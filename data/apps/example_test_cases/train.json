{"0": {"inputs": ["4\n4\n0001\n1000\n0011\n0111\n3\n010\n101\n0\n2\n00000\n00001\n4\n01\n001\n0001\n00001\n"], "outputs": ["1\n3 \n-1\n0\n"]}, "1": {"inputs": ["3\n2 2 3\n4 3 7\n10 1 9\n"], "outputs": ["1\n6\n-1\n"]}, "2": {"inputs": ["5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n"], "outputs": ["1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n"]}, "3": {"inputs": ["2\n4 1\n5 5 5 5\n3 2\n0 0 0\n"], "outputs": ["10\n0"]}, "4": {"inputs": ["3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n"], "outputs": ["101011\n11111\n1001\n"]}, "5": {"inputs": ["6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n"], "outputs": ["2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n"]}, "6": {"inputs": ["2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"], "outputs": ["2\n3 4 \n4\n4 5 6 7 \n"]}, "7": {"inputs": ["3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n"], "outputs": ["8\n0\n7\n"]}, "8": {"inputs": ["8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n"], "outputs": ["7\n11\n6\n26\n46\n0\n1\n6\n"]}, "9": {"inputs": ["5\n01111001\n0000\n111111\n101010101\n011011110111\n"], "outputs": ["4\n0\n6\n3\n6\n"]}, "10": {"inputs": ["2\n3\n3 2 1\n4\n1 3 4 2\n"], "outputs": ["2\n3 1 \n3\n1 4 2 \n"]}, "11": {"inputs": ["3\nDSAWWAW\nD\nWA\n"], "outputs": ["8\n2\n4\n"]}, "12": {"inputs": ["5\n3\n1 -1 0\n1 1 -2\n3\n0 1 1\n0 2 2\n2\n1 0\n1 41\n2\n-1 0\n-1 -41\n5\n0 1 -1 1 -1\n1 1 -1 1 -1\n"], "outputs": ["YES\nNO\nYES\nYES\nNO\n"]}, "13": {"inputs": ["3\n5 1 1\n8 10 10\n1000000 1 1000000\n"], "outputs": ["5\n8\n499999500000\n"]}, "14": {"inputs": ["3\n2 3\n3 1\n3 2\n1 3\n3 3\n1 3\n"], "outputs": ["Yes\nYes\nNo"]}, "15": {"inputs": ["6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n"], "outputs": ["56\n6\n442\n1\n45\n80\n"]}, "16": {"inputs": ["2\n4\n1.000 31.000\n12 3\n20 6\n30 1\n5 1\n3\n1.000 30.000\n1 10\n10 10\n20 8\n"], "outputs": ["7\n20\n"]}, "17": {"inputs": ["2\n5\n2 2 2 2 2\n6\n1 3 3 1 2 3\n"], "outputs": ["5\n2\n"]}, "18": {"inputs": ["3\n2\n4\n200\n"], "outputs": ["1.000000000\n2.414213562\n127.321336469"]}, "19": {"inputs": ["4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n"], "outputs": ["2\n1\n4\n5\n"]}, "20": {"inputs": ["4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n"], "outputs": ["YES\nNO\nYES\nNO\n"]}, "21": {"inputs": ["6\n4\n1 0 2 3\n6\n10 7 14 8 3 12\n2\n0 2\n3\n1 2 3\n6\n1 4 6 10 11 12\n2\n0 1023\n"], "outputs": ["1\n4\n2\n-1\n-1\n1023\n"]}, "22": {"inputs": ["8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n"], "outputs": ["42\n487\n519\n528\n544\n564\n588\n628\n"]}, "23": {"inputs": ["3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n"], "outputs": ["8\n0\n7\n"]}, "24": {"inputs": ["7\n69\n0\n1\n4\n5\n999\n1000\n"], "outputs": ["Y 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005"]}, "25": {"inputs": ["3\n6\n3 6 5\n5 2 4\n5 4 6\n6 3 1\n6\n2 5 6\n2 5 1\n4 1 2\n1 3 5\n3\n1 2 3\n"], "outputs": ["1 6 4 2 5 3 \n4 2 3 1 \n1 4 2 6 5 3 \n3 4 2 1 \n1 3 2 \n1"]}, "26": {"inputs": ["3\n1 3\n100000 100000\n2 2\n"], "outputs": ["YES\nNO\nYES\n"]}, "27": {"inputs": ["4\n6\n40 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n"], "outputs": ["4\n10\n4\n0\n"]}, "28": {"inputs": ["6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n15\nasdf???f???qwer\n11\nabacabacaba\n"], "outputs": ["Yes\nabacaba\nYes\nabacaba\nYes\nabadabacaba\nYes\nabacabadaba\nNo\nNo\n"]}, "29": {"inputs": ["3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n"], "outputs": ["-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1"]}, "30": {"inputs": ["3\n2\n10\n4\n0110\n8\n11101000\n"], "outputs": ["0\n1\n2\n"]}, "31": {"inputs": ["5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n"], "outputs": ["15\n6\n16\n12\n25"]}, "32": {"inputs": ["2\n5\n6\n"], "outputs": ["2\n4\n"]}, "33": {"inputs": ["1\n4\n"], "outputs": ["2\n2 4\n3 3\n3 1"]}, "34": {"inputs": ["2\n3\n4\n"], "outputs": ["7\n11"]}, "35": {"inputs": ["2\n3\n1 1 1\n5\n2 3 1 2 2\n"], "outputs": ["3\n2\n"]}, "36": {"inputs": ["5\n2 7 3 4 9\n3\n1 25 11\n"], "outputs": ["1\n5\n3\n"]}, "37": {"inputs": ["5\n3 3\n5 15\n4 13\n6 8\n4 2\n"], "outputs": ["2 1 3 \n3 1 2 5 4 \n-1\n1 2 6 3 4 5 \n1 2 4 3"]}, "38": {"inputs": ["2\n2 1 1\n2\n1\n5 2 3\n2 3\n1 4 5\n"], "outputs": ["YES\nNO\n"]}, "39": {"inputs": ["5\n2 2 1\nBB\n1 1 1\nAB\n3 2 8\nAABBBBAABB\n5 3 4\nBBBBB\n2 1 1\nABABAB\n"], "outputs": ["2\n1\n3\n1\n6"]}, "40": {"inputs": ["3\n7\n3 1 6 6 3 1 1\n8\n1 1 4 4 4 7 8 8\n7\n4 2 5 2 6 2 7\n"], "outputs": ["2\n0\n1\n"]}, "41": {"inputs": ["4\n8 2\n()(())()\n10 3\n))()()()((\n2 1\n()\n2 1\n)(\n"], "outputs": ["4\n3 4\n1 1\n5 8\n2 2\n3\n4 10\n1 4\n6 7\n0\n1\n1 2\n"]}, "42": {"inputs": ["4\n0110\n0101\n00001000\n0001000\n"], "outputs": ["4\n3\n4\n3"]}, "43": {"inputs": ["4\n4\n3 7 4 5\n2 1 2 4\n4\n1 2 3 4\n3 3 3 3\n2\n1 2\n10 10\n2\n10 10\n1 2\n"], "outputs": ["5\n3\n2\n3"]}, "44": {"inputs": ["3\n2\n3\n4\n"], "outputs": ["6 4\n4 6 10\n14 10 12 8"]}, "45": {"inputs": ["4\n1\n8\n6\n1000000000000000000\n"], "outputs": ["1\n2\n1\n30\n"]}, "46": {"inputs": ["3\nRRRR\nRSP\nS\n"], "outputs": ["PPPP\nRSP\nR\n"]}, "47": {"inputs": ["3\n3 0\n1 3 2\n2 0\n1 2\n7 0\n1 2 5 4 3 6 7\n"], "outputs": ["3\n2\n9\n"]}, "48": {"inputs": ["5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n"], "outputs": ["14\n33\n25\n2000000003\n1000000001999999999"]}, "49": {"inputs": ["4\n1 1000\n1024 1024\n65536 65536\n999999 1000001\n"], "outputs": ["1000\n1\n0\n2"]}, "50": {"inputs": ["4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n"], "outputs": ["6\n0\n6\n2\n"]}, "51": {"inputs": ["5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n6 3 3 0\n3 3 3 2\n"], "outputs": ["yes\nyes\nyes\nno\nno\n"]}, "52": {"inputs": ["2\n1\n3\n"], "outputs": ["6\n"]}, "53": {"inputs": ["3\n3 <<\n7 >><>><\n5 >>><\n"], "outputs": ["1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n"]}, "54": {"inputs": ["6\n4\n1024 512 64 512\n1\n2048\n3\n64 512 2\n2\n4096 4\n7\n2048 2 2048 2048 2048 2048 2048\n2\n2048 4096\n"], "outputs": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, "55": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n1\n2\n2\n"]}, "56": {"inputs": ["4\n2 2\n3 8\n1 0\n4 16\n"], "outputs": ["0\n10\n01\n2\n111\n111\n101\n0\n0\n0\n1111\n1111\n1111\n1111\n"]}, "57": {"inputs": ["4\n3\n1 2 3\n4\n3 1 2 4\n3\n2 3 1\n6\n2 4 6 1 3 5\n"], "outputs": ["YES\nYES\nNO\nYES\n"]}, "58": {"inputs": ["4\n2 2 1\n2 2 3\n2 2 2\n2 2 4\n"], "outputs": ["5\n5\n4\n0\n"]}, "59": {"inputs": ["7\n5\n-1 10 -1 12 -1\n5\n-1 40 35 -1 35\n6\n-1 -1 9 -1 3 -1\n2\n-1 -1\n2\n0 -1\n4\n1 -1 3 -1\n7\n1 -1 7 5 2 -1 5\n"], "outputs": ["1 11\n5 35\n3 6\n0 42\n0 0\n1 2\n3 4\n"]}, "60": {"inputs": ["6\n6 12\n4 9\n59 832\n28 14\n4925 2912\n1 1\n"], "outputs": ["10\n13\n891\n18\n6237\n0\n"]}, "61": {"inputs": ["3\n4\n2 1 4 3\n6\n4 6 1 2 5 3\n5\n5 3 1 2 4\n"], "outputs": ["YES\n2 3 4\nYES\n3 5 6\nNO"]}, "62": {"inputs": ["5\nababa\ncodedoca\nabcda\nzxzytyz\nabcdefghijklmnopqrstuvwxyza\n"], "outputs": ["YES\nbacdefghijklmnopqrstuvwxyz\nYES\nedocabfghijklmnpqrstuvwxyz\nNO\nYES\nxzytabcdefghijklmnopqrsuvw\nNO"]}, "63": {"inputs": ["3\n4 2\n1 13 7 17\n1 3\n6 2\n10 10 10 10 11 11\n3 3\n4 4\n1000000000 1000000000 1000000000 1000000000\n1 1 1 1\n"], "outputs": ["48\n42\n8000000000\n"]}, "64": {"inputs": ["5\n2 10\n1 9\n1 10\n1\n5 7\n1 2 3 4 6\n2 1000000000\n413470354 982876160\n9 478\n1 10 25 33 239 445 453 468 477\n"], "outputs": ["3.000000000000000\n3.666666666666667\n2.047619047619048\n329737645.750000000000000\n53.700000000000000\n"]}, "65": {"inputs": ["6\n8\n1 0 1 1 0 1 1 1\n5\n1 1 1 1 0\n7\n1 1 1 1 0 0 1\n6\n1 1 1 1 1 1\n1\n1\n1\n0\n"], "outputs": ["2\n2\n2\n2\n1\n0"]}, "66": {"inputs": ["2\n3\n1 8 5\n8 4 5\n3\n1 7 5\n6 1 2\n"], "outputs": ["1 8 5\n8 4 5\n5 1 7\n6 2 1\n"]}, "67": {"inputs": ["4\n5\nsouse\nhouhe\n3\ncat\ndog\n2\naa\naz\n3\nabc\nbca\n"], "outputs": ["Yes\n1\n1 4\nNo\nNo\nYes\n3\n1 2\n3 1\n2 3"]}, "68": {"inputs": ["5\n6\n111010\n1\n0\n1\n1\n2\n11\n6\n101010\n"], "outputs": ["3\n1\n1\n1\n3\n"]}, "69": {"inputs": ["2\n1 1\n01000010\n5 1\n01101110\n"], "outputs": ["2\n6\n"]}, "70": {"inputs": ["4\n6 2\nabaaba\n6 3\nabaaba\n36 9\nhippopotomonstrosesquippedaliophobia\n21 7\nwudixiaoxingxingheclp\n"], "outputs": ["2\n0\n23\n16\n"]}, "71": {"inputs": ["7\n4\n-3 5 -3 1\n2\n1 -1\n4\n-3 2 -3 4\n4\n-1 1 1 -1\n7\n-5 7 -6 -4 17 -13 4\n6\n-1000000000 -1000000000 -1000000000 1000000000 1000000000 1000000000\n1\n0\n"], "outputs": ["3\n0\n4\n1\n8\n3000000000\n0\n"]}, "72": {"inputs": ["4\n4 2\n1 2 2 1\n4 3\n1 2 2 1\n3 2\n1 2 3\n4 4\n4 3 4 2\n"], "outputs": ["5\n1 2 1 2 1\n4\n1 2 2 1\n-1\n7\n4 3 2 1 4 3 2\n"]}, "73": {"inputs": ["5\n3\n2 2 3\n3\n2 1 0\n7\n0 7 3 1 3 7 7\n9\n2 0 1 1 2 4 4 2 0\n9\n8 4 7 6 1 2 3 0 5\n"], "outputs": ["0\n"]}, "74": {"inputs": ["3\n5 2\n5 3\n7 0\n5 0\n4 0\n10 0\n2 1\n10 100\n50 10\n5 5\n1 5\n2 4\n3 3\n4 2\n5 1\n"], "outputs": ["4\n2 1 -1 5\n1\n2\n5\n5 4 3 2 1\n"]}, "75": {"inputs": ["3\n3\n5\n199\n"], "outputs": ["1.931851653\n3.196226611\n126.687663595"]}, "76": {"inputs": ["4\n3\n4\n12\n1000000000\n"], "outputs": ["NO\nYES\nYES\nYES\n"]}, "77": {"inputs": ["3\n3\n2 4\n2 1\n3 5\n3\n2 3\n2 10\n2 6\n4\n1 7\n3 3\n2 6\n1000000000 2\n"], "outputs": ["2\n9\n0\n"]}, "78": {"inputs": ["9\n5 5\n..*..\n..*..\n*****\n..*..\n..*..\n3 4\n****\n.*..\n.*..\n4 3\n***\n*..\n*..\n*..\n5 5\n*****\n*.*.*\n*****\n..*.*\n..***\n1 4\n****\n5 5\n.....\n..*..\n.***.\n..*..\n.....\n5 3\n...\n.*.\n.*.\n***\n.*.\n3 3\n.*.\n*.*\n.*.\n4 4\n*.**\n....\n*.**\n*.**\n"], "outputs": ["0\n0\n0\n0\n0\n4\n1\n1\n2\n"]}, "79": {"inputs": ["3\n6\n4\n30\n"], "outputs": ["2 3 6 \n1\n2 4 \n0\n2 30 6 3 15 5 10 \n0\n"]}, "80": {"inputs": ["3\n1 4\n323 323\n1 1000000\n"], "outputs": ["8\n0\n3439863766\n"]}, "81": {"inputs": ["4\naaa\nbbb\nccc\nabc\nbca\nbca\naabb\nbbaa\nbaba\nimi\nmii\niim\n"], "outputs": ["NO\nYES\nYES\nNO\n"]}, "82": {"inputs": ["3\n2\n1 2\n6\n2 1 6 5 4 3\n5\n2 4 3 1 5\n"], "outputs": ["2 1\n1 2 5 6 3 4\n3 1 5 2 4\n"]}, "83": {"inputs": ["5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n"], "outputs": ["2\n-1\n10\n-1\n1\n"]}, "84": {"inputs": ["3\n5\n2 1 1 2 2\n6\n1 2 1 1 3 2\n9\n3 1 2 2 1 6 6 3 3\n"], "outputs": ["4\n1\n8\n"]}, "85": {"inputs": ["3\n101110\n2\n01\n1\n110\n1\n"], "outputs": ["111011\n10\n-1"]}, "86": {"inputs": ["4\n2\n1 0\n2\n0 0\n4\n0 1 1 1\n4\n1 1 0 0\n"], "outputs": ["1\n0\n1\n0\n2\n1 1\n4\n1 1 0 0\n"]}, "87": {"inputs": ["5\n6 7 4\n10 7 12\n12 30 7\n1 1 1\n3247834 10298779 625324\n"], "outputs": ["6\n9\n5\n0\n116461800\n"]}, "88": {"inputs": ["4\n29 34 19 38\n"], "outputs": ["YES\nYES\nYES\nNO\n"]}, "89": {"inputs": ["3\n4\n1 4 3 2\n2\n1 2\n3\n1 2 3\n"], "outputs": ["3\n1\n1\n"]}, "90": {"inputs": ["5\n3\n1 3 2\n0 0 0\n4\n2 -3 4 -1\n1 1 1 1\n7\n-8 4 -2 -6 4 7 1\n1 0 0 0 1 1 0\n5\n0 1 -4 6 3\n0 0 0 1 1\n6\n-1 7 10 4 -8 -1\n1 0 0 0 0 1\n"], "outputs": ["1 2 3\n2 -3 4 -1\n-8 -6 1 4 4 7 -2\n-4 0 1 6 3\n-1 4 7 -8 10 -1\n"]}, "91": {"inputs": ["4\n5\n1 3 4 5 5\n4\n1 1 3 4\n2\n2 2\n1\n1\n"], "outputs": ["1 3 4 5 2 \n-1\n2 1 \n1 \n"]}, "92": {"inputs": ["3\nxabb\naabx\ntechnocup\ntechnocup\na\nz\n"], "outputs": ["YES\nYES\nNO\n"]}, "93": {"inputs": ["2\n3 3\n3 1 2\n3 2 1\n7 2\n2 1 7 3 4 5 6\n3 1\n"], "outputs": ["5\n8"]}, "94": {"inputs": ["2\n6 7\n1 2 3 4 5 6\n3 6\n3 3 3\n"], "outputs": ["1 0 0 1 1 0 \n1 0 0"]}, "95": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["-1\n57\n239\n6789\n"]}, "96": {"inputs": ["10\n3 5 1 3\n0 0 1\n2 1 4\n2 5 2 3\n1 0\n3 2\n1 20 2 4\n0\n16\n6 20 2 5\n1 1 0 1 0 0\n0 8 2 9 11 6\n4 16 3 6\n1 0 1 1\n8 3 5 6\n6 20 3 6\n0 1 0 0 1 0\n20 11 3 20 16 17\n7 17 1 6\n1 1 0 1 0 0 0\n1 7 0 11 10 15 10\n6 17 2 6\n0 0 1 0 0 1\n7 6 3 7 10 12\n5 17 2 5\n1 1 1 1 0\n17 11 10 6 4\n1 1 1 2\n0\n1\n"], "outputs": ["3\n2\n1\n0\n1\n4\n0\n1\n2\n1"]}, "97": {"inputs": ["3\nAZAMON APPLE\nAZAMON AAAAAAAAAAALIBABA\nAPPLE BANANA\n"], "outputs": ["AMAZON\n---\nAPPLE\n"]}, "98": {"inputs": ["6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n"], "outputs": ["1\n3\n0\n0\n1\n3\n"]}, "99": {"inputs": ["5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n"], "outputs": ["0001111111\n001\n01\n0\n1\n"]}, "100": {"inputs": ["6\n1 1 1\n1 2 1\n4 1 1\n7 4 10\n8 1 4\n8 2 8\n"], "outputs": ["1\n2\n2\n10\n5\n9\n"]}, "101": {"inputs": ["9\n1 10 7 1\n3 3 3 0\n8 2 10 4\n8 2 10 100\n-10 20 -17 2\n-3 2 2 0\n-3 1 2 0\n2 3 2 3\n-1 3 -2 2\n"], "outputs": ["7\n0\n4\n0\n30\n5\n4\n0\n3\n"]}, "102": {"inputs": ["6\n18\n1\n9\n100500\n33\n1000000000\n"], "outputs": ["10\n1\n9\n45\n12\n81\n"]}, "103": {"inputs": ["4\n2 2\n0 0\n0 0\n2 2\n0 0\n0 1\n2 3\n1 0 1\n1 1 0\n3 3\n1 0 0\n0 0 0\n1 0 0\n"], "outputs": ["Vivek\nAshish\nVivek\nAshish\n"]}, "104": {"inputs": ["3\n4\n1 3 4 2\n1 2 2 3\n5\n2 3 4 5 1\n1 2 3 4 5\n8\n7 4 5 6 1 8 3 2\n5 3 6 4 7 5 8 4\n"], "outputs": ["1\n5\n2\n"]}, "105": {"inputs": ["3\n2 2\n1 1\n3 5\n1 2 3\n3 7\n3 2 2\n"], "outputs": ["1\n5\n4\n"]}, "106": {"inputs": ["3\n2\n5 5\n2 3\n3\n3 5\n2 3\n2 3\n3\n3 3\n4 4\n5 5\n"], "outputs": ["2 1 \n-1\n1 1 2 \n"]}, "107": {"inputs": ["2\n1 2 0 1\n0 1 0 0\n"], "outputs": ["Ya Ya Tidak Tidak\nTidak Ya Tidak Tidak\n"]}, "108": {"inputs": ["10\n1\n248618\n3\n12 10 8\n6\n100 11 15 9 7 8\n4\n0 1 1 0\n2\n0 0\n2\n0 1\n2\n1 0\n2\n1 1\n3\n0 1 0\n3\n1 0 1\n"], "outputs": ["Yes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nYes\nNo\n"]}, "109": {"inputs": ["3\n10 3\n1 32 1\n23 4\n16 1 4 1\n20 5\n2 1 16 1 8\n"], "outputs": ["2\n-1\n0"]}, "110": {"inputs": ["5\n8 6\n1 2 4 1 2 4 1 2\n5 3\n3 2 3 2 1\n10 4\n4 3 4 3 2 3 2 1 0 1\n15 7\n3 7 4 8 2 3 4 5 21 2 3 4 2 1 3\n7 5\n1 2 3 4 5 6 1\n"], "outputs": ["3 2\n2 2\n2 1\n3 1\n2 3\n"]}, "111": {"inputs": ["3 5\n00100\n10110\n11001\n"], "outputs": ["5\n"]}, "112": {"inputs": ["8\n00000000\n00000110\n00012210\n01234200\n02444200\n01223200\n00001100\n00000000\n5\n00000\n01210\n02420\n01210\n00000\n7\n0000000\n0122100\n0134200\n0013200\n0002200\n0001100\n0000000\n0\n"], "outputs": ["4\n2 3\n2 4\n6 6\n5 2\n4\n2 2\n2 3\n3 3\n3 2\n3\n2 5\n4 5\n4 2\n"]}, "113": {"inputs": ["3\n4 0\n5 14\n3 9\n"], "outputs": ["2\n3\n2\n"]}, "114": {"inputs": ["2\n6\n2 3 11 14 1 8\n2\n3 2\n100 1\n5\n3 5 100 2 3\n2\n30 5\n90 1\n"], "outputs": ["5\n-1"]}, "115": {"inputs": ["6\n1 5\n0 10\n1 -5\n0 5\n1 11\n0 -10\n"], "outputs": ["5\n25\n10\n15\n36\n21"]}, "116": {"inputs": ["3\n4\n1 2 3 6\n1\n8\n2\n1 1\n"], "outputs": ["0\n"]}, "117": {"inputs": ["2\n2 3\n6 5 4\n1 2 3\n1 6\n2 5\n3 4\n3 1\n2\n3\n1\n3 1 2\n"], "outputs": ["1 2 3 \n6 5 4 \n3 \n1 \n2 \n"]}, "118": {"inputs": ["3\n5 10\n7 11 2 9 5\n4 8\n2 4 2 3\n4 11\n1 3 3 7\n"], "outputs": ["2\n1\n0"]}, "119": {"inputs": ["1\n10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n"], "outputs": ["8\n"]}, "120": {"inputs": ["5\n3 1\n3 2\n3 3\n4 0\n5 2\n"], "outputs": ["4\n5\n6\n0\n12\n"]}, "121": {"inputs": ["3\n1\n1 1\n3\n6 5 4 1 2 3\n5\n13 4 20 13 2 5 8 3 17 16\n"], "outputs": ["0\n1\n5\n"]}, "122": {"inputs": [" cardpoints = [1,2,3,4,5,6,1], k = 3\n", " cardpoints = [2,2,2], k = 2\n", " cardpoints = [9,7,7,9,7,7,9], k = 7\n", " cardpoints = [1,1000,1], k = 1\n", " cardpoints = [1,79,80,1,1,1,200,1], k = 3\n"], "outputs": [" 12\nExplanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.\n", " 4\nExplanation: Regardless of which two cards you take, your score will always be 4.\n", " 55\nExplanation: You have to take all the cards. Your score is the sum of points of all cards.\n", " 1\nExplanation: You cannot take the card in the middle. Your best score is 1. \n", " 202\n"]}, "123": {"inputs": [" n = 3, l = 3, k = 1\n", " n = 2, l = 3, k = 0\n", " n = 2, l = 3, k = 1\n"], "outputs": [" 6\nExplanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n", " 6\nExplanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]\n", " 2\nExplanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]\n"]}, "124": {"inputs": [" nums = [2,5,6,0,0,1,2], target = 0\n", " nums = [2,5,6,0,0,1,2], target = 3\n"], "outputs": [" true\n", " false\n"]}, "125": null, "126": {"inputs": [" s = \"aababcaab\", maxletters = 2, minsize = 3, maxsize = 4\n", " s = \"aaaa\", maxletters = 1, minsize = 3, maxsize = 3\n", " s = \"aabcabcab\", maxletters = 2, minsize = 2, maxsize = 3\n", " s = \"abcde\", maxletters = 2, minsize = 3, maxsize = 3\n"], "outputs": [" 2\nExplanation: Substring \"aab\" has 2 ocurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).\n", " 2\nExplanation: Substring \"aaa\" occur 2 times in the string. It can overlap.\n", " 3\n", " 0\n"]}, "127": {"inputs": [" g = 5, p = 3, group = [2,2], profit = [2,3]\n", " g = 10, p = 5, group = [2,3,5], profit = [6,7,8]\n"], "outputs": [" 2\nExplanation: \nTo make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.\n", " 7\nExplanation: \nTo make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n"]}, "128": {"inputs": [" \"1 + 1\"\n", " \" 2-1 + 2 \"\n", " \"(1+(4+5+2)-3)+(6+8)\"\n"], "outputs": [" 2\n", " 3\n", " 23\nNote:\n"]}, "129": {"inputs": [" [8,1,5,2,6]\n"], "outputs": [" 11\nExplanation: i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11\n"]}, "130": {"inputs": [" s = \"1000\", k = 10000\n", " s = \"1000\", k = 10\n", " s = \"1317\", k = 2000\n", " s = \"2020\", k = 30\n", " s = \"1234567890\", k = 90\n"], "outputs": [" 1\nExplanation: The only possible array is [1000]\n", " 0\nExplanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.\n", " 8\nExplanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]\n", " 1\nExplanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.\n", " 34\n"]}, "131": null, "132": {"inputs": [" days = [1,4,6,7,8,20], costs = [2,7,15]\n", " days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n"], "outputs": [" 11\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total you spent $11 and covered all the days of your travel.\n", " 17\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total you spent $17 and covered all the days of your travel.\n"]}, "133": {"inputs": [" s = \"qwer\"\n", " s = \"qqwe\"\n", " s = \"qqqw\"\n", " s = \"qqqq\"\n"], "outputs": [" 0\nExplanation: s is already balanced.\n", " 1\nExplanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.\n", " 2\nExplanation: We can replace the first \"QQ\" to \"ER\". \n", " 3\nExplanation: We can replace the last 3 'Q' to make s = \"QWER\".\n"]}, "134": {"inputs": [" 20\n", " 100\n", " 1000\n"], "outputs": [" 1\nExplanation: The only positive number (<= 20) with at least 1 repeated digit is 11.\n", " 10\nExplanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n", " 262\n"]}, "135": {"inputs": [" pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n", " pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n"], "outputs": [" true\nExplanation: We might do the following sequence:\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n", " false\nExplanation: 1 cannot be popped before 2.\n"]}, "136": {"inputs": [" grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n"], "outputs": [" 35\nExplanation: \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n"]}, "137": {"inputs": [" n = 0\n", " n = 3\n", " n = 6\n", " n = 9\n", " n = 333\n"], "outputs": [" 0\n", " 2\nExplanation: The binary representation of 3 is \"11\".\n\"11\" -> \"01\" with the 2nd operation since the 0th bit is 1.\n\"01\" -> \"00\" with the 1st operation.\n", " 4\nExplanation: The binary representation of 6 is \"110\".\n\"110\" -> \"010\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.\n\"010\" -> \"011\" with the 1st operation.\n\"011\" -> \"001\" with the 2nd operation since the 0th bit is 1.\n\"001\" -> \"000\" with the 1st operation.\n", " 14\n", " 393\n"]}, "138": {"inputs": [" nums = [1,-2,-3,4]\n", " nums = [0,1,-2,-3,-4]\n", " nums = [-1,-2,-3,0,1]\n", " nums = [-1,2]\n", " nums = [1,2,3,5,-6,4,0,10]\n"], "outputs": [" 4\nExplanation: The array nums already has a positive product of 24.\n", " 3\nExplanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.\nExample 3:\n", " 2\nExplanation: The longest subarray with positive product is [-1,-2] or [-2,-3].\n", " 1\n", " 4\n"]}, "139": {"inputs": [" [\"ca\",\"bb\",\"ac\"]\n", " [\"xc\",\"yb\",\"za\"]\n", " [\"zyx\",\"wvu\",\"tsr\"]\n"], "outputs": [" 1\nExplanation: \nAfter deleting the first column, A = [\"a\", \"b\", \"c\"].\nNow A is in lexicographic order (ie. A[0] <= A[1] <= A[2]).\nWe require at least 1 deletion since initially A was not in lexicographic order, so the answer is 1.\n", " 0\nExplanation: \nA is already in lexicographic order, so we don't need to delete anything.\nNote that the rows of A are not necessarily in lexicographic order:\nie. it is NOT necessarily true that (A[0][0] <= A[0][1] <= ...)\n", " 3\nExplanation: \nWe have to delete every column.\n"]}, "140": {"inputs": [" [3, 10, 5, 25, 2, 8]\n"], "outputs": [" 28\n"]}, "141": {"inputs": [" people = [1,2], limit = 3\n", " people = [3,2,2,1], limit = 3\n", " people = [3,5,3,4], limit = 5\n"], "outputs": [" 1\nExplanation: 1 boat (1, 2)\n", " 3\nExplanation: 3 boats (1, 2), (2) and (3)\n", " 4\nExplanation: 4 boats (3), (3), (4), (5)\nNote:\n"]}, "142": {"inputs": [" \"aba\", \"cdc\", \"eae\"\n"], "outputs": [" 3\n"]}, "143": {"inputs": [" [1,2,1]\n", " [0,1,2,2]\n", " [1,2,3,2,2]\n", " [3,3,3,1,2,1,1,2,3,3,4]\n"], "outputs": [" 3\nExplanation: We can collect [1,2,1].\n", " 3\nExplanation: We can collect [1,2,2].\nIf we started at the first tree, we would only collect [0, 1].\n", " 4\nExplanation: We can collect [2,3,2,2].\nIf we started at the first tree, we would only collect [1, 2].\n", " 5\nExplanation: We can collect [1,2,1,1,2].\nIf we started at the first tree or the eighth tree, we would only collect 4 fruits.\n"]}, "144": {"inputs": [" 3\n"], "outputs": [" 3\nExplanation:\nIntitally, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n"]}, "145": {"inputs": [" [4, 1, 8, 7]\n", " [1, 2, 1, 2]\n"], "outputs": [" true\nExplanation: (8-4) * (7-1) = 24\n", " false\n"]}, "146": null, "147": {"inputs": [" n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\n", " n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\n", " n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\n"], "outputs": [" 60\nExplanation: \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n", " 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n", " 72\n"]}, "148": {"inputs": [" difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n"], "outputs": [" 100 \nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.\nNotes:\n"]}, "149": {"inputs": [" s = \"abcd\", k = 2\n", " s = \"deeedbbcccbdaa\", k = 3\n", " s = \"pbbcggttciiippooaais\", k = 2\n"], "outputs": [" \"abcd\"\nExplanation: There's nothing to delete.\n", " \"aa\"\nExplanation: \nFirst delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\"\nExample 3:\n", " \"ps\"\n"]}, "150": {"inputs": [" [5,0,3,8,6]\n", " [1,1,1,0,6,12]\n"], "outputs": [" 3\nExplanation: left = [5,0,3], right = [8,6]\n", " 4\nExplanation: left = [1,1,1,0], right = [6,12]\n"]}, "151": null, "152": {"inputs": [" position = [1,2,3,4,7], m = 3\n", " position = [5,4,3,2,1,1000000000], m = 2\n"], "outputs": [" 3\nExplanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n", " 999999999\nExplanation: We can use baskets 1 and 1000000000.\n"]}, "153": {"inputs": [" [1,1,2,2,2]\n", " [3,3,3,3,4]\n"], "outputs": [" true\n", " false\n"]}, "154": {"inputs": [" h = 5, w = 4, horizontalcuts = [1,2,4], verticalcuts = [1,3]\n", " h = 5, w = 4, horizontalcuts = [3,1], verticalcuts = [1]\n", " h = 5, w = 4, horizontalcuts = [3], verticalcuts = [3]\n"], "outputs": [" 4 \nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.\n", " 6\nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.\n", " 9\n"]}, "155": {"inputs": [" arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\n", " arr = [3,3,3,3,3], d = 3\n", " arr = [7,6,5,4,3,2,1], d = 1\n", " arr = [7,1,7,1,7,1], d = 2\n", " arr = [66], d = 1\n"], "outputs": [" 4\nExplanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.\n", " 1\nExplanation: You can start at any index. You always cannot jump to any index.\n", " 7\nExplanation: Start at index 0. You can visit all the indicies. \n", " 2\n", " 1\n"]}, "156": {"inputs": [" str1 = \"abac\", str2 = \"cab\"\n"], "outputs": [" \"cabac\"\nExplanation: \nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties.\n"]}, "157": {"inputs": ["s = \"aa\"\np = \"a\"\n", "s = \"aa\"\np = \"*\"\n", "s = \"cb\"\np = \"?a\"\n", "s = \"adceb\"\np = \"*a*b\"\n", "s = \"acdcb\"\np = \"a*c?b\"\n"], "outputs": [" false\nExplanation: \"a\" does not match the entire string \"aa\".\n", " true\nExplanation:\u00a0'*' matches any sequence.\n", " false\nExplanation:\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n", " true\nExplanation:\u00a0The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\n", " false"]}, "158": {"inputs": [" a = \"ab\", b = \"ba\"\n", " a = \"abc\", b = \"bca\"\n", " a = \"abac\", b = \"baca\"\n", " a = \"aabc\", b = \"abca\"\n"], "outputs": [" 1\n", " 2\n", " 2\n", " 2\n"]}, "159": {"inputs": [" nums = [10,2,-10,5,20], k = 2\n", " nums = [-1,-2,-3], k = 1\n", " nums = [10,-2,-10,-5,20], k = 2\n"], "outputs": [" 37\nExplanation: The subsequence is [10, 2, 5, 20].\n", " -1\nExplanation: The subsequence must be non-empty, so we choose the largest number.\n", " 23\nExplanation: The subsequence is [10, -2, -5, 20].\n"]}, "160": {"inputs": [" piles = [5,3,4,5]\n"], "outputs": [" true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n"]}, "161": {"inputs": [" \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n", " \"1,#\"\n", " \"9,#,#,1\"\n"], "outputs": [" true\n", " false\n", " false"]}, "162": {"inputs": [" text1 = \"abcde\", text2 = \"ace\" \n", " text1 = \"abc\", text2 = \"abc\"\n", " text1 = \"abc\", text2 = \"def\"\n"], "outputs": [" 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n", " 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n", " 0\nExplanation: There is no such common subsequence, so the result is 0.\n"]}, "163": null, "164": {"inputs": [" num = \"4321\", k = 4\n", " num = \"100\", k = 1\n", " num = \"36789\", k = 1000\n", " num = \"22\", k = 22\n", " num = \"9438957234785635408\", k = 23\n"], "outputs": [" \"1342\"\nExplanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.\n", " \"010\"\nExplanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.\n", " \"36789\"\nExplanation: We can keep the number without any swaps.\n", " \"22\"\n", " \"0345989723478563548\"\n"]}, "165": {"inputs": ["s = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n", "s = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\n"], "outputs": ["\"apple\"\n", "\"a\"\n"]}, "166": {"inputs": [" a = 2, b = 6, c = 5\n", " a = 4, b = 2, c = 7\n", " a = 1, b = 2, c = 3\n"], "outputs": [" 3\nExplanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)\n", " 1\n", " 0\n"]}, "167": {"inputs": [" k = 1, n = 2\n", " k = 2, n = 6\n", " k = 3, n = 14\n"], "outputs": [" 2\nExplanation: \nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\nOtherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.\nIf it didn't break, then we know with certainty F = 2.\nHence, we needed 2 moves in the worst case to know what F is with certainty.\n", " 3\n", " 4\n"]}, "168": {"inputs": [" s = \"annabelle\", k = 2\n", " s = \"leetcode\", k = 3\n", " s = \"true\", k = 4\n", " s = \"yzyzyzyzyzyzyzy\", k = 2\n", " s = \"cr\", k = 7\n"], "outputs": [" true\nExplanation: You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\n", " false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.\n", " true\nExplanation: The only possible solution is to put each character in a separate string.\n", " true\nExplanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.\n", " false\nExplanation: We don't have enough characters in s to construct 7 palindromes.\n"]}, "169": null, "170": {"inputs": [" arr = [1,2,3,10,4,2,3,5]\n", " arr = [5,4,3,2,1]\n", " arr = [1,2,3]\n", " arr = [1]\n"], "outputs": [" 3\nExplanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4].\n", " 4\nExplanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].\n", " 0\nExplanation: The array is already non-decreasing. We do not need to remove any elements.\n", " 0\n"]}, "171": {"inputs": [" [2,3,-2,4]\n", " [-2,0,-1]\n"], "outputs": [" 6\nExplanation:\u00a0[2,3] has the largest product 6.\n", " 0\nExplanation:\u00a0The result cannot be 2, because [-2,-1] is not a subarray."]}, "172": {"inputs": [" num = 555\n", " num = 9\n", " num = 123456\n", " num = 10000\n", " num = 9288\n"], "outputs": [" 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888\n", " 8\nExplanation: The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8\n", " 820000\n", " 80000\n", " 8700\n"]}, "173": {"inputs": [" arr = [1,2,3,4,5,10,6,7,8,9], k = 5\n", " arr = [1,2,3,4,5,6], k = 7\n", " arr = [1,2,3,4,5,6], k = 10\n", " arr = [-10,10], k = 2\n", " arr = [-1,1,-2,2,-3,3,-4,4], k = 3\n"], "outputs": [" true\nExplanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).\n", " true\nExplanation: Pairs are (1,6),(2,5) and(3,4).\n", " false\nExplanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.\n", " true\n", " true\n"]}, "174": null, "175": {"inputs": [" 5\n"], "outputs": [" 5\nExplanation: \nHere are the non-negative integers \n"]}, "176": {"inputs": [" s1 = \"great\", s2 = \"rgeat\"\n", " s1 = \"abcde\", s2 = \"caebd\"\n"], "outputs": [" true\n", " false"]}, "177": {"inputs": [" s = \"adobecodebanc\", t = \"abc\"\n"], "outputs": [" \"banc\"\n"]}, "178": {"inputs": [" [10,9,2,5,3,7,101,18]\n"], "outputs": [" 4 \nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. \n"]}, "179": {"inputs": [" s = \"aaabcccd\", k = 2\n", " s = \"aabbaa\", k = 2\n", " s = \"aaaaaaaaaaa\", k = 0\n"], "outputs": [" 4\nExplanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4.\n", " 2\nExplanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2.\n", " 3\nExplanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3.\n"]}, "180": {"inputs": [" target = 1, startfuel = 1, stations = []\n", " target = 100, startfuel = 1, stations = [[10,100]]\n", " target = 100, startfuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n"], "outputs": [" 0\nExplanation: We can reach the target without refueling.\n", " -1\nExplanation: We can't reach the target (or even the first gas station).\n", " 2\nExplanation: \nWe start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n"]}, "181": {"inputs": [" [1,2,3,0,2]\n"], "outputs": [" 3 \nExplanation: transactions = [buy, sell, cooldown, buy, sell]"]}, "182": {"inputs": [" [0,1,0,2,1,0,1,3,2,1,2,1]\n"], "outputs": [" 6"]}, "183": {"inputs": [" nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n", " nums1 = [3,-2], nums2 = [2,-6,7]\n", " nums1 = [-1,-1], nums2 = [1,1]\n"], "outputs": [" 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.\n", " 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.\nExample 3:\n", " -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.\n"]}, "184": {"inputs": [" text = \"ababa\"\n", " text = \"aaabaaa\"\n", " text = \"aaabbaaa\"\n", " text = \"aaaaa\"\n", " text = \"abcdef\"\n"], "outputs": [" 3\nExplanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\", which its length is 3.\n", " 6\nExplanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\", which its length is 6.\n", " 4\n", " 5\nExplanation: No need to swap, longest repeated character substring is \"aaaaa\", length is 5.\n", " 1\n"]}, "185": {"inputs": [" s = \"00110110\", k = 2\n", " s = \"00110\", k = 2\n", " s = \"0110\", k = 1\n", " s = \"0110\", k = 2\n", " s = \"0000000001011100\", k = 4\n"], "outputs": [" true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.\n", " true\n", " true\nExplanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring. \n", " false\nExplanation: The binary code \"00\" is of length 2 and doesn't exist in the array.\n", " false\n"]}, "186": {"inputs": [" cost = [4,3,2,5,6,7,2,5,5], target = 9\n", " cost = [7,6,5,5,5,6,8,7,8], target = 12\n", " cost = [2,4,6,2,4,6,4,4,4], target = 5\n", " cost = [6,10,15,40,40,40,40,40,40], target = 47\n"], "outputs": [" \"7772\"\nExplanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\nDigit    cost\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5\n", " \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.\n", " \"0\"\nExplanation: It's not possible to paint any integer with total cost equal to target.\n", " \"32211\"\n"]}, "187": {"inputs": [" customers = [8,3], boardingcost = 5, runningcost = 6\n", " customers = [10,9,6], boardingcost = 6, runningcost = 4\n", " customers = [3,4,0,5,1], boardingcost = 1, runningcost = 92\n", " customers = [10,10,6,4,7], boardingcost = 3, runningcost = 8\n"], "outputs": [" 3\nExplanation: The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times.\n", " 7\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\nThe highest profit was $122 after rotating the wheel 7 times.\n", " -1\nExplanation:\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\nThe profit was never positive, so return -1.\n", " 9\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.\n2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.\n3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.\n4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.\n5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.\n6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.\n7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.\n8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.\n9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.\n10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.\nThe highest profit was $36 after rotating the wheel 9 times.\n"]}, "188": {"inputs": [" 123\n", " 12345\n", " 1234567\n", " 1234567891\n"], "outputs": [" \"one hundred twenty three\"\n", " \"twelve thousand three hundred forty five\"\n", " \"one million two hundred thirty four thousand five hundred sixty seven\"\n", " \"one billion two hundred thirty four million five hundred sixty seven thousand eight hundred ninety one\""]}, "189": {"inputs": [" n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\n", " n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\n", " n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\n"], "outputs": [" 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.\n", " 0\nExplanation: Both friends 0 and 1 are happy.\n", " 4\n"]}, "190": {"inputs": ["A: [1,2,3,2,1]\nB: [3,2,1,4,7]\n"], "outputs": [" 3\nExplanation: \nThe repeated subarray with maximum length is [3, 2, 1].\n"]}, "191": {"inputs": [" digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\n", " digits = [\"1\",\"4\",\"9\"], n = 1000000000\n", " digits = [\"7\"], n = 8\n"], "outputs": [" 20\nExplanation: \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n", " 29523\nExplanation: \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n", " 1\n"]}, "192": {"inputs": [" piles = [2,4,1,2,7,8]\n", " piles = [2,4,5]\n", " piles = [9,8,7,6,5,1,2,3,4]\n"], "outputs": [" 9\nExplanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.\n", " 4\n", " 18\n"]}, "193": {"inputs": [" arr = [3,3,3,3,5,5,5,2,2,7]\n", " arr = [7,7,7,7,7,7]\n", " arr = [1,9]\n", " arr = [1000,1000,3,7]\n", " arr = [1,2,3,4,5,6,7,8,9,10]\n"], "outputs": [" 2\nExplanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.\n", " 1\nExplanation: The only possible set you can choose is {7}. This will make the new array empty.\n", " 1\n", " 1\n", " 5\n"]}, "194": {"inputs": [" nums = [4, 3, 2, 3, 5, 2, 1], k = 4\n"], "outputs": [" true\nExplanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n"]}, "195": {"inputs": [" [2,1,3]\n"], "outputs": [" 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2\n"]}, "196": {"inputs": [" [1,-2,3,-2]\n", " [5,-3,5]\n", " [3,-1,2,-1]\n", " [3,-2,2,-3]\n", " [-2,-3,-1]\n"], "outputs": [" 3\nExplanation: Subarray [3] has maximum sum 3\n", " 10\nExplanation:\u00a0Subarray [5,5] has maximum sum 5 + 5 = 10\n", " 4\nExplanation:\u00a0Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4\n", " 3\nExplanation:\u00a0Subarray [3] and [3,-2,2] both have maximum sum 3\n", " -1\nExplanation:\u00a0Subarray [-1] has maximum sum -1\n"]}, "197": {"inputs": [" s = \"aabcbc\"\n", " s = \"abcabcababcc\"\n", " s = \"abccba\"\n", " s = \"cababc\"\n"], "outputs": [" true\nExplanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid.\n", " true\nExplanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.\n", " false\nExplanation: It is impossible to get \"abccba\" using the operation.\n", " false\nExplanation: It is impossible to get \"cababc\" using the operation.\n"]}, "198": {"inputs": [" s = \"abcd\", t = \"bcdf\", maxcost = 3\n", " s = \"abcd\", t = \"cdef\", maxcost = 3\n", " s = \"abcd\", t = \"acde\", maxcost = 0\n"], "outputs": [" 3\nExplanation: \"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3.\n", " 1\nExplanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1.\n", " 1\nExplanation: You can't make any change, so the maximum length is 1.\n"]}, "199": {"inputs": ["\u00a0[100, 4, 200, 1, 3, 2]\n"], "outputs": [" 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."]}, "200": {"inputs": [" k = 7\n", " k = 10\n", " k = 19\n"], "outputs": [" 2 \nExplanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7.\n", " 2 \nExplanation: For k = 10 we can use 2 + 8 = 10.\n", " 3 \nExplanation: For k = 19 we can use 1 + 5 + 13 = 19.\n"]}, "201": {"inputs": [" 3\n"], "outputs": [" 5\nExplanation:\nGiven n = 3, there are a total of 5 unique BST's:\n"]}, "202": {"inputs": [" [2,1,4,7,3,2,5]\n", " [2,2,2]\n"], "outputs": [" 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n", " 0\nExplanation: There is no mountain.\n"]}, "203": {"inputs": [" m = 3, n = 2\n", " m = 7, n = 3\n"], "outputs": [" 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Right -> Down\n2. Right -> Down -> Right\n3. Down -> Right -> Right\n", " 28"]}, "204": {"inputs": [" nums = [4,5,6,7,0,1,2], target = 0\n", " nums = [4,5,6,7,0,1,2], target = 3\n"], "outputs": [" 4\n", " -1"]}, "205": {"inputs": [" array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\n", " array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\n"], "outputs": [" 4\n", " 2\n"]}, "206": {"inputs": [" [1, 5, 2]\n", " [1, 5, 233, 7]\n"], "outputs": [" false\nExplanation: Initially, player 1 can choose between 1 and 2. If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. Hence, player 1 will never be the winner and you need to return False.\n", " true\nExplanation: Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n"]}, "207": {"inputs": [" [10,2]\n", " [3,30,34,5,9]\n"], "outputs": [" \"210\"\n", " \"9534330\"\n"]}, "208": {"inputs": [" \"rd\"\n", " \"rdd\"\n"], "outputs": [" \"radiant\"\nExplanation: The first senator comes from Radiant and he can just ban the next senator's right in the round 1. And the second senator can't exercise any rights any more since his right has been banned. And in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n", " \"dire\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in the round 1. And the second senator can't exercise any rights anymore since his right has been banned. And the third senator comes from Dire and he can ban the first senator's right in the round 1. And in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n"]}, "209": {"inputs": [" stones = [3,2,4,1], k = 2\n", " stones = [3,2,4,1], k = 3\n", " stones = [3,5,1,2,6], k = 3\n"], "outputs": [" 20\nExplanation: \nWe start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible.\n", " -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\n", " 25\nExplanation: \nWe start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible.\n"]}, "210": {"inputs": [" nums = [1,2,3,1], k = 3, t = 0\n", " nums = [1,0,1,1], k = 1, t = 2\n", " nums = [1,5,9,1,5,9], k = 2, t = 3\n"], "outputs": [" true\n", " true\n", " false"]}, "211": {"inputs": [" s = \"ababccc\"\n", " s = \"aba\"\n", " s = \"aa\"\n"], "outputs": [" 5\nExplanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.\n", " 2\nExplanation: One way to split maximally is ['a', 'ba'].\n", " 1\nExplanation: It is impossible to split the string any further.\n"]}, "212": {"inputs": [" a = [2, 4]\n", " a = [2, 4, 5, 10]\n"], "outputs": [" 3\nExplanation: We can make these trees: [2], [4], [4, 2, 2]\n", " 7\nExplanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\n"]}, "213": {"inputs": [" 2.00000, 10\n", " 2.10000, 3\n", " 2.00000, -2\n"], "outputs": [" 1024.00000\n", " 9.26100\n", " 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n"]}, "214": {"inputs": [" nums = [1,2,3]\n", " nums = [9,6,1,6,2]\n"], "outputs": [" 2\nExplanation: We can decrease 2 to 0 or 3 to 1.\n", " 4\n"]}, "215": {"inputs": [" nums = [12,5,7,23]\n", " nums = [29,6,10]\n", " nums = [3,6]\n"], "outputs": [" true\nExplanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1\n", " true\nExplanation: Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1\n", " false\n"]}, "216": {"inputs": [" croakoffrogs = \"croakcroak\"\n", " croakoffrogs = \"crcoakroak\"\n", " croakoffrogs = \"croakcrook\"\n", " croakoffrogs = \"croakcroa\"\n"], "outputs": [" 1 \nExplanation: One frog yelling \"croak\" twice.\n", " 2 \nExplanation: The minimum number of frogs is two.\u00a0\nThe first frog could yell \"crcoakroak\".\nThe second frog could yell later \"crcoakroak\".\n", " -1\nExplanation: The given string is an invalid combination of \"croak\" from different frogs.\n", " -1\n"]}, "217": {"inputs": [" [0]\n", " [1,1,2]\n", " [1,2,4]\n"], "outputs": [" 1\nExplanation: \nThere is only one possible result: 0.\n", " 3\nExplanation: \nThe possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n", " 6\nExplanation: \nThe possible results are 1, 2, 3, 4, 6, and 7.\n"]}, "218": {"inputs": [" s = \"cba\", k = 1\n", " s = \"baaca\", k = 3\n"], "outputs": [" \"acb\"\nExplanation: \nIn the first move, we move the 1st character (\"c\") to the end, obtaining the string \"bac\".\nIn the second move, we move the 1st character (\"b\") to the end, obtaining the final result \"acb\".\n", " \"aaabc\"\nExplanation: \nIn the first move, we move the 1st character (\"b\") to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd character (\"c\") to the end, obtaining the final result \"aaabc\".\n"]}, "219": {"inputs": [" hours = [9,9,6,0,6,6,9]\n"], "outputs": [" 3\nExplanation: The longest well-performing interval is [9,9,6].\n"]}, "220": {"inputs": [" customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], x = 3\n"], "outputs": [" 16\nExplanation:\u00a0The bookstore owner keeps themselves\u00a0not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n"]}, "221": {"inputs": [" \"banana\"\n", " \"abcd\"\n"], "outputs": [" \"ana\"\n", " \"\"\n"]}, "222": {"inputs": [" [1,2,3,4,5,6,7,8]\n", " [1,3,7,11,12,14,18]\n"], "outputs": [" 5\nExplanation:\nThe longest subsequence that is fibonacci-like: [1,2,3,5,8].\n", " 3\nExplanation:\nThe longest subsequence that is fibonacci-like:\n[1,11,12], [3,11,14] or [7,11,18].\n"]}, "223": {"inputs": [" citations = [0,1,3,5,6]\n"], "outputs": [" 3 \nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had \n             received 0, 1, 3, 5, 6 citations respectively. \n\u00a0            Since the researcher has 3 papers with at least 3 citations each and the remaining \n\u00a0            two with no more than 3 citations each, her h-index is 3.\n"]}, "224": {"inputs": [" s = \"rabbbit\", t = \"rabbit\"\n", " s = \"babgbag\", t = \"bag\"\n"], "outputs": ["\u00a03\nExplanation:\n", "\u00a05\nExplanation:\n"]}, "225": {"inputs": [" \".l.r...lr..l..\"\n", " \"rr.l\"\n"], "outputs": [" \"ll.rr.llrrll..\"\n", " \"rr.l\"\nExplanation: The first domino expends no additional force on the second domino.\n"]}, "226": {"inputs": [" [1,17,8]\n", " [2,2,2]\n"], "outputs": [" 2\nExplanation: \n[1,8,17] and [17,8,1] are the valid permutations.\n", " 1\n"]}, "227": {"inputs": [" a = [1,1,1,0,0,0,1,1,1,1,0], k = 2\n", " a = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\n"], "outputs": [" 6\nExplanation: \n[1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1.  The longest subarray is underlined.\n", " 10\nExplanation: \n[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1.  The longest subarray is underlined.\n"]}, "228": {"inputs": [" s = \"abciiidef\", k = 3\n", " s = \"aeiou\", k = 2\n", " s = \"leetcode\", k = 3\n", " s = \"rhythms\", k = 4\n", " s = \"tryhard\", k = 4\n"], "outputs": [" 3\nExplanation: The substring \"iii\" contains 3 vowel letters.\n", " 2\nExplanation: Any substring of length 2 contains 2 vowels.\n", " 2\nExplanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.\n", " 0\nExplanation: We can see that s doesn't have any vowel letters.\n", " 1\n"]}, "229": {"inputs": [" a = [3,1,3,6]\n", " a = [2,1,2,6]\n", " a = [4,-2,2,-4]\n", " a = [1,2,4,16,8,4]\n"], "outputs": [" false\n", " false\n", " true\nExplanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].\n", " false\n"]}, "230": {"inputs": [" num = \"1432219\", k = 3\n", " num = \"10200\", k = 1\n", " num = \"10\", k = 2\n"], "outputs": [" \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n", " \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n", " \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0."]}, "231": {"inputs": [" [1,2,0]\n", " [3,4,-1,1]\n", " [7,8,9,11,12]\n"], "outputs": [" 3\n", " 2\n", " 1\n"]}, "232": {"inputs": [" [1,4], 2\n", " [1,2], 2\n"], "outputs": [" 4\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. This poisoned status will last 2 seconds until the end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. So you finally need to output 4.\n", " 3\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status will last 2 seconds until the end of time point 2. However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. So you finally need to output 3.\n"]}, "233": {"inputs": ["[\n\u00a0 \" /\",\n\u00a0 \"/ \"\n]\n", "[\n\u00a0 \" /\",\n\u00a0 \"  \"\n]\n", "[\n\u00a0 \"\\\\/\",\n\u00a0 \"/\\\\\"\n]\n", "[\n\u00a0 \"/\\\\\",\n\u00a0 \"\\\\/\"\n]\n", "[\n\u00a0 \"//\",\n\u00a0 \"/ \"\n]\n"], "outputs": [" 2\nExplanation: The 2x2 grid is as follows:\n", " 1\nExplanation: The 2x2 grid is as follows:\n", " 4\nExplanation: (Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.)\nThe 2x2 grid is as follows:\n", " 5\nExplanation: (Recall that because \\ characters are escaped, \"/\\\\\" refers to /\\, and \"\\\\/\" refers to \\/.)\nThe 2x2 grid is as follows:\n", " 3\nExplanation: The 2x2 grid is as follows:\n"]}, "234": {"inputs": [" \"())\"\n", " \"(((\"\n", " \"()\"\n", " \"()))((\"\n"], "outputs": [" 1\n", " 3\n", " 0\n", " 4\n"]}, "235": null, "236": {"inputs": [" \"00110\"\n", " \"010110\"\n", " \"00011000\"\n"], "outputs": [" 1\nExplanation: We flip the last digit to get 00111.\n", " 2\nExplanation: We flip to get 011111, or alternatively 000111.\n", " 2\nExplanation: We flip to get 00000000.\n"]}, "237": {"inputs": [" a = [1,0,1,0,1], s = 2\n"], "outputs": [" 4\nExplanation: \nThe 4 subarrays are bolded below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n"]}, "238": {"inputs": [" [3,3,5,0,0,3,1,4]\n", " [1,2,3,4,5]\n", " [7,6,4,3,1]\n"], "outputs": [" 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\u00a0            Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n", " 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n\u00a0            Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n\u00a0            engaging multiple transactions at the same time. You must sell before buying again.\n", " 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0."]}, "239": {"inputs": [" values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1\n", " values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2\n", " values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1\n", " values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2\n"], "outputs": [" 9\nExplanation: The subset chosen is the first, third, and fifth item.\n", " 12\nExplanation: The subset chosen is the first, second, and third item.\n", "\u00a016\nExplanation: The subset chosen is the first and fourth item.\n", " 24\nExplanation: The subset chosen is the first, second, and fourth item.\n"]}, "240": {"inputs": ["\"tree\"\n", "\"cccaaa\"\n", "\"Aabb\"\n"], "outputs": ["\"eert\"\n", "\"cccaaa\"\n", "\"bbAa\"\n"]}, "241": {"inputs": [" \"ggllgg\"\n", " \"gg\"\n", " \"gl\"\n"], "outputs": [" true\nExplanation: \nThe robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).\nWhen repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.\n", " false\nExplanation: \nThe robot moves north indefinitely.\n", " true\nExplanation: \nThe robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...\n"]}, "242": {"inputs": [" nums = [2,2,1,1,5,3,3,5]\n", " nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\n", " nums = [1,1,1,2,2,2]\n", " nums = [10,2,8,9,3,8,1,5,2,3,7,6]\n"], "outputs": [" 7\nExplanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.\n", " 13\n", " 5\n", " 8\n"]}, "243": {"inputs": [" fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n"], "outputs": [" 2\nExplanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].\nWe choose the second card, which has number 2 on the back, and it isn't on the front of any card, so 2 is good.\n"]}, "244": {"inputs": [" s = \"1101\"\n", " s = \"10\"\n", " s = \"1\"\n"], "outputs": [" 6\nExplanation: \"1101\" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\u00a0\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\u00a0 \nStep 5) 4 is even, divide by 2 and obtain 2.\u00a0\nStep 6) 2 is even, divide by 2 and obtain 1.\u00a0 \n", " 1\nExplanation: \"10\" corressponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1.\u00a0 \n", " 0\n"]}, "245": {"inputs": [" [1000,100,10,2]\n"], "outputs": [" \"1000/(100/10/2)\"\nExplanation:\n1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don't influence the operation priority. So you should return \"1000/(100/10/2)\". \n"]}, "246": {"inputs": [" dict = [\"cat\", \"bat\", \"rat\"]\nsentence = \"the cattle was rattled by the battery\"\n"], "outputs": [" \"the cat was rat by the bat\"\n"]}, "247": {"inputs": [" arr = [3,2,2,4,3], target = 3\n", " arr = [7,3,4,7], target = 7\n", " arr = [4,3,2,6,2,3,4], target = 6\n", " arr = [5,5,4,4,5], target = 3\n", " arr = [3,1,1,1,5,1,2,1], target = 3\n"], "outputs": [" 2\nExplanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\n", " 2\nExplanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\n", " -1\nExplanation: We have only one sub-array of sum = 6.\n", " -1\nExplanation: We cannot find a sub-array of sum = 3.\n", " 3\nExplanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.\n"]}, "248": {"inputs": [" grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\n", " grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\n", " grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\n"], "outputs": [" true\nExplanation: There are two valid cycles shown in different colors in the image below:\n", " true\nExplanation: There is only one valid cycle highlighted in the image below:\n", " false\n"]}, "249": {"inputs": [" grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\n", " grid = [[8]]\n", " grid = [[4,4],[3,3]]\n", " grid = [[4,7,8],[9,5,1],[2,3,6]]\n"], "outputs": [" 1\nExplanation: \nThe following subgrid is a 3 x 3 magic square:\n", " 0\n", " 0\n", " 0\n"]}, "250": {"inputs": [" quality = [10,20,5], wage = [70,50,30], k = 2\n", " quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\n"], "outputs": [" 105.00000\nExplanation: We pay 70 to 0-th worker and 35 to 2-th worker.\n", " 30.66667\nExplanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. \n"]}, "251": {"inputs": [" 4\n", " 10\n"], "outputs": ["\u00a07\nExplanation: 7 = 4 * 3 / 2 + 1\n", " 12\nExplanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n"]}, "252": {"inputs": [" n = 5, ranges = [3,4,1,1,0,0]\n", " n = 3, ranges = [0,0,0,0]\n", " n = 7, ranges = [1,2,1,0,2,1,0,1]\n", " n = 8, ranges = [4,0,0,0,0,0,0,0,4]\n", " n = 8, ranges = [4,0,0,0,4,0,0,0,4]\n"], "outputs": [" 1\nExplanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]\n", " -1\nExplanation: Even if you activate all the four taps you cannot water the whole garden.\n", " 3\n", " 2\n", " 1\n"]}, "253": null, "254": null, "255": {"inputs": [" [2,3,1,1,4]\n"], "outputs": [" 2\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\n"]}, "256": {"inputs": [" piles = [3,6,7,11], h = 8\n", " piles = [30,11,23,4,20], h = 5\n", " piles = [30,11,23,4,20], h = 6\n"], "outputs": [" 4\n", " 30\nExample 3:\n", " 23\n"]}, "257": {"inputs": [" n = 3, edges = [[0,1],[1,2],[0,2]], succprob = [0.5,0.5,0.2], start = 0, end = 2\n", " n = 3, edges = [[0,1],[1,2],[0,2]], succprob = [0.5,0.5,0.3], start = 0, end = 2\n", " n = 3, edges = [[0,1]], succprob = [0.5], start = 0, end = 2\n"], "outputs": [" 0.25000\nExplanation:\u00a0There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\n", " 0.30000\n", " 0.00000\nExplanation:\u00a0There is no path between 0 and 2.\n"]}, "258": {"inputs": [" \"owoztneoer\"\n", " \"fviefuro\"\n"], "outputs": [" \"012\"\n", " \"45\""]}, "259": {"inputs": [" nums = [1,2,5,9], threshold = 6\n", " nums = [2,3,5,7,11], threshold = 11\n", " nums = [19], threshold = 5\n"], "outputs": [" 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \n", " 3\n", " 4\n"]}, "260": null, "261": {"inputs": [" [3,2,1,5,6,4] and k = 2\n", " [3,2,3,1,2,4,5,5,6] and k = 4\n"], "outputs": [" 5\n", " 4\n"]}, "262": {"inputs": [" words = [\"send\",\"more\"], result = \"money\"\n", " words = [\"six\",\"seven\",\"seven\"], result = \"twenty\"\n", " words = [\"this\",\"is\",\"too\"], result = \"funny\"\n", " words = [\"leet\",\"code\"], result = \"point\"\n"], "outputs": [" true\nExplanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652\n", " true\nExplanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214\nExample 3:\n", " true\n", " false\n"]}, "263": {"inputs": [" n = 1\n", " n = 2\n", " n = 3\n", " n = 4\n", " n = 3131\n"], "outputs": [" 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n", " 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n", " 46\n", " 104\n", " 136006598\nExplanation: Please take care of the mod.\n"]}, "264": {"inputs": [" arr = [\"un\",\"iq\",\"ue\"]\n", " arr = [\"cha\",\"r\",\"act\",\"ers\"]\n", " arr = [\"abcdefghijklmnopqrstuvwxyz\"]\n"], "outputs": [" 4\nExplanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".\nMaximum length is 4.\n", " 6\nExplanation: Possible solutions are \"chaers\" and \"acters\".\n", " 26\n"]}, "265": {"inputs": [" nums = [1,1,1,1,1], target = 2\n", " nums = [-1,3,5,1,4,2,-9], target = 6\n", " nums = [-2,6,6,3,5,4,1,2,8], target = 10\n", " nums = [0,0,0], target = 0\n"], "outputs": [" 2\nExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).\n", " 2\nExplanation: There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\nExample 3:\n", " 3\n", " 3\n"]}, "266": {"inputs": [" s = \"aacaba\"\n", " s = \"abcd\"\n", " s = \"aaaaa\"\n", " s = \"acbadbaada\"\n"], "outputs": [" 2\nExplanation: There are 5 ways to split \"aacaba\" and 2 of them are good. \n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively.\n", " 1\nExplanation: Split the string as follows (\"ab\", \"cd\").\n", " 4\nExplanation: All possible splits are good.\n", " 2\n"]}, "267": {"inputs": [" [\"2\", \"1\", \"+\", \"3\", \"*\"]\n", " [\"4\", \"13\", \"5\", \"/\", \"+\"]\n", " [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\n"], "outputs": [" 9\nExplanation: ((2 + 1) * 3) = 9\n", " 6\nExplanation: (4 + (13 / 5)) = 6\n", " 22\nExplanation: \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22"]}, "268": {"inputs": [" 2\n", " 3\n", " 4\n"], "outputs": [" \"110\"\nExplantion: (-2) ^ 2 + (-2) ^ 1 = 2\n", " \"111\"\nExplantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3\n", " \"100\"\nExplantion: (-2) ^ 2 = 4\n"]}, "269": {"inputs": [" nums = [1,0,0,0,1,0,0,1], k = 2\n", " nums = [1,0,0,1,0,1], k = 2\n", " nums = [1,1,1,1,1], k = 0\n", " nums = [0,1,0,1], k = 1\n"], "outputs": [" true\nExplanation: Each of the 1s are at least 2 places away from each other.\n", " false\nExplanation: The second 1 and third 1 are only one apart from each other.\nExample 3:\n", " true\n", " true\n"]}, "270": {"inputs": [" n = 1, k = 3\n", " n = 1, k = 4\n", " n = 3, k = 9\n", " n = 2, k = 7\n", " n = 10, k = 100\n"], "outputs": [" \"c\"\nExplanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".\n", " \"\"\nExplanation: There are only 3 happy strings of length 1.\n", " \"cab\"\nExplanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\"\n", " \"\"\n", " \"abacbabacb\"\n"]}, "271": {"inputs": [" [2,3,1,1,4]\n", " [3,2,1,0,4]\n"], "outputs": [" true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n", " false\nExplanation: You will always arrive at index 3 no matter what. Its maximum\njump length is 0, which makes it impossible to reach the last index."]}, "272": {"inputs": [" status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedboxes = [[1,2],[3],[],[]], initialboxes = [0]\n", " status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedboxes = [[1,2,3,4,5],[],[],[],[],[]], initialboxes = [0]\n", " status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedboxes = [[],[],[]], initialboxes = [1]\n", " status = [1], candies = [100], keys = [[]], containedboxes = [[]], initialboxes = []\n", " status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedboxes = [[],[],[]], initialboxes = [2,1,0]\n"], "outputs": [" 16\nExplanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don't have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\n", " 6\nExplanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.\n", " 1\n", " 0\n", " 7\n"]}, "273": {"inputs": ["target = 3\n", "target = 6\n"], "outputs": [" 2\nExplanation: \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0->1->3.\n", " 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0->1->3->7->7->6.\n"]}, "274": {"inputs": [" nums = [8,2,4,7], limit = 4\n", " nums = [10,1,2,4,7,2], limit = 5\n", " nums = [4,2,2,2,4,4,2,2], limit = 0\n"], "outputs": [" 2 \nExplanation: All subarrays are: \n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute diff |8-2| = 6 > 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2.\n", " 4 \nExplanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.\n", " 3\n"]}, "275": {"inputs": [" \"()\"\n", " \"(*)\"\n", " \"(*))\"\n"], "outputs": [" true\n", " true\n", " true\n"]}, "276": null, "277": {"inputs": [" light = [2,1,3,5,4]\n", " light = [3,2,4,1,5]\n", " light = [4,1,2,3]\n", " light = [2,1,4,3,6,5]\n", " light = [1,2,3,4,5,6]\n"], "outputs": [" 3\nExplanation: All bulbs turned on, are blue at the moment 1, 2 and 4.\n", " 2\nExplanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).\n", " 1\nExplanation: All bulbs turned on, are blue at the moment 3 (index-0).\nBulb 4th changes to blue at the moment 3.\n", " 3\n", " 6\n"]}, "278": {"inputs": [" digits = [8,1,9]\n", " digits = [8,6,7,1,0]\n", " digits = [1]\n", " digits = [0,0,0,0,0,0]\n"], "outputs": [" \"981\"\n", " \"8760\"\n", " \"\"\n", " \"0\"\n"]}, "279": {"inputs": [" n = 3, k = 3\n", " n = 4, k = 9\n"], "outputs": [" \"213\"\n", " \"2314\""]}, "280": {"inputs": [" s = \"abc\", k = 2\n", " s = \"aabbc\", k = 3\n", " s = \"leetcode\", k = 8\n"], "outputs": [" 1\nExplanation:\u00a0You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.\n", " 0\nExplanation:\u00a0You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome.\nExample 3:\n", " 0\n"]}, "281": {"inputs": [" s = \"input\", t = \"ouput\", k = 9\n", " s = \"abc\", t = \"bcd\", k = 10\n", " s = \"aab\", t = \"bbb\", k = 27\n"], "outputs": [" true\nExplanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.\n", " false\nExplanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.\n", " true\nExplanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.\n"]}, "282": {"inputs": [" mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\n", " mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\n", " mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6\n", " mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184\n"], "outputs": [" 2\nExplanation: The maximum side length of square with sum less than 4 is 2 as shown.\n", " 0\n", " 3\n", " 2\n"]}, "283": {"inputs": ["nums = [1,3,1]\nk = 1\n"], "outputs": [" 0 \nExplanation:\nHere are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\n"]}, "284": {"inputs": [" tokens = [100], p = 50\n", " tokens = [100,200], p = 150\n", " tokens = [100,200,300,400], p = 200\n"], "outputs": [" 0\n", " 1\n", " 2\n"]}, "285": {"inputs": [" a = [1], k = 0\n", " a = [0,10], k = 2\n", " a = [1,3,6], k = 3\n"], "outputs": [" 0\nExplanation: B = [1]\n", " 6\nExplanation: B = [2,8]\n", " 3\nExplanation: B = [4,6,3]\n"]}, "286": {"inputs": [" balls = [1,1]\n", " balls = [2,1,1]\n", " balls = [1,2,1,2]\n", " balls = [3,2,1]\n", " balls = [6,6,6,6,6,6]\n"], "outputs": [" 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n", " 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667\n", " 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6\n", " 0.30000\nExplanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box.\nProbability = 18 / 60 = 0.3\n", " 0.90327\n"]}, "287": {"inputs": [" 2\n"], "outputs": [" 2\nExplanation: \nThe first beautiful arrangement is [1, 2]:\nNumber at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\nNumber at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\nThe second beautiful arrangement is [2, 1]:\nNumber at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\nNumber at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\n"]}, "288": {"inputs": [" n = 1, m = 1.\n", " n = 2, m = 1.\n", " n = 3, m = 1.\n"], "outputs": [" 2\nExplanation: Status can be: [on], [off]\n", " 3\nExplanation: Status can be: [on, off], [off, on], [off, off]\n", " 4\nExplanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\n"]}, "289": {"inputs": [" a = [0,6,5,2,2,5,1,9,4], l = 1, m = 2\n", " a = [3,8,1,3,2,1,8,9,0], l = 3, m = 2\n", " a = [2,1,5,6,0,9,5,0,3,8], l = 4, m = 3\n"], "outputs": [" 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n", " 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n", " 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.\n"]}, "290": {"inputs": [" n = 7, cuts = [1,3,4,5]\n", " n = 9, cuts = [5,6,1,4,2]\n"], "outputs": [" 16\nExplanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n", " 22\nExplanation: If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.\n"]}, "291": {"inputs": [" arr = [1,3,5]\n", " arr = [2,4,6]\n", " arr = [1,2,3,4,5,6,7]\n", " arr = [100,100,99,99]\n", " arr = [7]\n"], "outputs": [" 4\nExplanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.\n", " 0\nExplanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.\n", " 16\n", " 4\n", " 1\n"]}, "292": {"inputs": [" arr1 = [1,2,3,4], arr2 = [-1,4,5,6]\n", " arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]\n"], "outputs": [" 13\n", " 20\n"]}, "293": {"inputs": [" tasks = [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"], n = 2\n"], "outputs": [" 8\nExplanation: A -> B -> idle -> A -> B -> idle -> A -> B.\n"]}, "294": {"inputs": [" 4\n"], "outputs": [" 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown below.\n[\n\u00a0[\".Q..\", \u00a0// Solution 1\n\u00a0 \"...Q\",\n\u00a0 \"Q...\",\n\u00a0 \"..Q.\"],\n"]}, "295": null, "296": {"inputs": [" [1,3,5]\n", " [2,2,2,0,1]\n"], "outputs": [" 1\n", " 0\n"]}, "297": {"inputs": [" tiles = \"aab\"\n", " tiles = \"aaabbc\"\n", " tiles = \"v\"\n"], "outputs": [" 8\nExplanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n", " 188\n", " 1\n"]}, "298": {"inputs": [" num1 = \"2\", num2 = \"3\"\n", " num1 = \"123\", num2 = \"456\"\n"], "outputs": [" \"6\"\n", " \"56088\"\n"]}, "299": {"inputs": [" grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\n", " grid = [[1,1,3],[3,2,2],[1,1,4]]\n", " grid = [[1,2],[4,3]]\n", " grid = [[2,2,2],[2,2,2]]\n", " grid = [[4]]\n"], "outputs": [" 3\nExplanation: You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\nThe total cost = 3.\n", " 0\nExplanation: You can follow the path from (0, 0) to (2, 2).\n", " 1\n", " 3\n", " 0\n"]}, "300": {"inputs": [" x = 3, target = 19\n", " x = 5, target = 501\n", " x = 100, target = 100000000\n"], "outputs": [" 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.  The expression contains 5 operations.\n", " 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.  The expression contains 8 operations.\n", " 3\nExplanation: 100 * 100 * 100 * 100.  The expression contains 3 operations.\n"]}, "301": {"inputs": [" a = [1,4,2], b = [1,2,4]\n", " a = [2,5,1,2,5], b = [10,5,2,1,5,2]\n", " a = [1,3,7,1,7,5], b = [1,9,2,5,1]\n"], "outputs": [" 2\nExplanation: We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.\n", " 3\n", " 2\n"]}, "302": null, "303": {"inputs": [" arr = [1,15,7,9,2,5,10], k = 3\n", " arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\n", " arr = [1], k = 1\n"], "outputs": [" 84\nExplanation: arr becomes [15,15,15,9,10,10,10]\n", " 83\n", " 1\n"]}, "304": {"inputs": [" [16,16]\n", " [16,17,18]\n", " [20,30,100,110,120]\n"], "outputs": [" 2\nExplanation: 2 people friend request each other.\n", " 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\nExample 3:\n", " 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n"]}, "305": {"inputs": [" text = \"abcabcabc\"\n", " text = \"leetcodeleetcode\"\n"], "outputs": [" 3\nExplanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".\n", " 2\nExplanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".\n"]}, "306": null, "307": {"inputs": [" n = 50\n"], "outputs": [" 0.625\nExplanation: \nIf we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n"]}, "308": null, "309": {"inputs": [" a = [3,6,9,12]\n", " a = [9,4,7,2,10]\n", " a = [20,1,15,3,10,5,8]\n"], "outputs": [" 4\nExplanation: \nThe whole array is an arithmetic sequence with steps of length = 3.\n", " 3\nExplanation: \nThe longest arithmetic subsequence is [4,7,10].\n", " 4\nExplanation: \nThe longest arithmetic subsequence is [20,15,10,5].\n"]}, "310": {"inputs": [" n = 10\n", " n = 1234\n", " n = 332\n"], "outputs": [" 9\n", " 1234\n", " 299\n"]}, "311": {"inputs": [" [1,0,2]\n", " [1,2,2]\n"], "outputs": [" 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n", " 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions."]}, "312": {"inputs": [" a = [1], k = 1\n", " a = [1,2], k = 4\n", " a = [2,-1,2], k = 3\n"], "outputs": [" 1\n", " -1\n", " 3\n"]}, "313": {"inputs": [" bloomday = [1,10,3,10,2], m = 3, k = 1\n", " bloomday = [1,10,3,10,2], m = 3, k = 2\n", " bloomday = [7,7,7,7,12,7,7], m = 2, k = 3\n", " bloomday = [1000000000,1000000000], m = 1, k = 1\n", " bloomday = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2\n"], "outputs": [" 3\nExplanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.\n", " -1\nExplanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.\n", " 12\nExplanation: We need 2 bouquets each should have 3 flowers.\nHere's the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways.\n", " 1000000000\nExplanation: You need to wait 1000000000 days to have a flower ready for a bouquet.\n", " 9\n"]}, "314": {"inputs": [" s = \"0110111\"\n", " s = \"101\"\n", " s = \"111111\"\n", " s = \"000\"\n"], "outputs": [" 9\nExplanation: There are 9 substring in total with only 1's characters.\n\"1\" -> 5 times.\n\"11\" -> 3 times.\n\"111\" -> 1 time.\n", " 2\nExplanation: Substring \"1\" is shown 2 times in s.\n", " 21\nExplanation: Each substring contains only 1's characters.\n", " 0\n"]}, "315": {"inputs": [" s1 = \"xx\", s2 = \"yy\"\n", " s1 = \"xy\", s2 = \"yx\"\n", " s1 = \"xx\", s2 = \"xy\"\n", " s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"\n"], "outputs": [" 1\nExplanation: \nSwap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".\n", " 2\nExplanation: \nSwap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you can't swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.\nExample 3:\n", " -1\n", " 4\n"]}, "316": {"inputs": [" s = \"level\"\n", " s = \"ababab\"\n", " s = \"leetcodeleet\"\n", " s = \"a\"\n"], "outputs": [" \"l\"\nExplanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".\n", " \"abab\"\nExplanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.\n", " \"leet\"\n", " \"\"\n"]}, "317": {"inputs": [" \"did\"\n"], "outputs": [" 5\nExplanation: \nThe 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n"]}, "318": {"inputs": [" slices = [1,2,3,4,5,6]\n", " slices = [8,9,8,6,1,1]\n", " slices = [4,1,2,5,8,3,1,9,7]\n", " slices = [3,1,2]\n"], "outputs": [" 10\nExplanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n", " pick pizza slice of size 8 in each turn. if you pick slice with size 9 your partners will pick slices of size 8.\n", " 21\n", " 3\n"]}, "319": {"inputs": [" values = [1,2,3,7]\n", " values = [1,2,3,-9]\n", " values = [1,2,3,6]\n", " values = [1,2,3,-1,-2,-3,7]\n", " values = [-1,-2,-3]\n"], "outputs": [" \"bob\"\nExplanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.\n", " \"alice\"\nExplanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. The next move Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. The next move Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win.\n", " \"tie\"\nExplanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.\n", " \"alice\"\n", " \"tie\"\n"]}, "320": {"inputs": [" nums = [1,5]\n", " nums = [2,2]\n", " nums = [4,2,5]\n", " nums = [3,2,2,4]\n", " nums = [2,4,8,16]\n"], "outputs": [" 5\nExplanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\nIncrement by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).\nTotal of operations: 1 + 2 + 2 = 5.\n", " 3\nExplanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\nDouble all the elements: [1, 1] -> [2, 2] (1 operation).\nTotal of operations: 2 + 1 = 3.\n", " 6\nExplanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).\n", " 7\n", " 8\n"]}, "321": {"inputs": [" s1 = \"abc\", s2 = \"xya\"\n", " s1 = \"abe\", s2 = \"acd\"\n", " s1 = \"leetcodee\", s2 = \"interview\"\n"], "outputs": [" true\nExplanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".\n", " false \nExplanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n", " true\n"]}, "322": {"inputs": [" nums = [1,3], n = 6\n", " nums = [1,5,10], n = 20\n", " nums = [1,2,2], n = 5\n"], "outputs": [" 1 \nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n", " 2\nExplanation: The two patches can be [2, 4].\n", " 0"]}, "323": {"inputs": [" s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n", " s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n"], "outputs": [" true\n", " false"]}, "324": {"inputs": [" 12\n", " 21\n"], "outputs": [" 21\n", " -1"]}, "325": {"inputs": [" [[1,0,1],[0,0,0],[1,0,1]]\n", " [[1,0,0],[0,0,0],[0,0,0]]\n"], "outputs": [" 2\nExplanation: \nThe cell (1, 1) is as far as possible from all the land with distance 2.\n", " 4\nExplanation: \nThe cell (2, 2) is as far as possible from all the land with distance 4.\n"]}, "326": {"inputs": [" s = \"paypalishiring\", numrows = 3\n", " s = \"paypalishiring\", numrows =\u00a04\n"], "outputs": [" \"pahnaplsiigyir\"\n", "\u00a0\"pinalsigyahrpi\"\nExplanation:\n"]}, "327": null, "328": {"inputs": [" [1, 2, 3, 4]\n", " [3, 1, 4, 2]\n", " [-1, 3, 2, 0]\n"], "outputs": [" false\n", " true\n", " true\n"]}, "329": {"inputs": [" grid = [[-1,-2,-3],\n\u00a0              [-2,-3,-3],\n\u00a0              [-3,-3,-2]]\n", " grid = [[1,-2,1],\n\u00a0              [1,-2,1],\n\u00a0              [3,-4,1]]\n", " grid = [[1, 3],\n\u00a0              [0,-4]]\n", " grid = [[ 1, 4,4,0],\n\u00a0              [-2, 0,0,1],\n\u00a0              [ 1,-1,1,1]]\n"], "outputs": [" -1\nExplanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n", " 8\nExplanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).\n", " 0\nExplanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).\n", " 2\nExplanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).\n"]}, "330": null, "331": {"inputs": [" hour = 12, minutes = 30\n", " hour = 3, minutes = 30\n", " hour = 3, minutes = 15\n", " hour = 4, minutes = 50\n", " hour = 12, minutes = 0\n"], "outputs": [" 165\n", " 75\n", " 7.5\n", " 155\n", " 0\n"]}, "332": {"inputs": [" \"abc\"\n", " \"aaa\"\n"], "outputs": [" 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n", " 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n"]}, "333": {"inputs": [" arr = [100,-23,-23,404,100,23,23,23,3,404]\n", " arr = [7]\n", " arr = [7,6,9,6,9,6,9,7]\n", " arr = [6,1,9]\n", " arr = [11,22,7,7,7,7,7,7,7,22,13]\n"], "outputs": [" 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n", " 0\nExplanation: Start index is the last index. You don't need to jump.\n", " 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array.\n", " 2\n", " 3\n"]}, "334": {"inputs": [" s = \"abaac\", cost = [1,2,3,4,5]\n", " s = \"abc\", cost = [1,2,3]\n", " s = \"aabaa\", cost = [1,2,3,4,1]\n"], "outputs": [" 3\nExplanation: Delete the letter \"a\" with cost 3 to get \"abac\" (String without two identical letters next to each other).\n", " 0\nExplanation: You don't need to delete any character because there are no identical letters next to each other.\n", " 2\nExplanation: Delete the first and the last character, getting the string (\"aba\").\n"]}, "335": {"inputs": [" [1,2,3,6]\n", " [1,2,3,4,5,6]\n", " [1,2]\n"], "outputs": [" 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n", " 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n", " 0\nExplanation: The billboard cannot be supported, so we return 0.\n"]}, "336": {"inputs": [" s = \"bab\", t = \"aba\"\n", " s = \"leetcode\", t = \"practice\"\n", " s = \"anagram\", t = \"mangaar\"\n", " s = \"xxyyzz\", t = \"xxyyzz\"\n", " s = \"friend\", t = \"family\"\n"], "outputs": [" 1\nExplanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.\n", " 5\nExplanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.\n", " 0\nExplanation: \"anagram\" and \"mangaar\" are anagrams. \n", " 0\n", " 4\n"]}, "337": {"inputs": ["gas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n", "gas  = [2,3,4]\ncost = [3,4,3]\n"], "outputs": [" 3\n", " -1\n"]}, "338": {"inputs": [" n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\n", " n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\n", " n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\n"], "outputs": [" 51 \nExplanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\".\u00a0\n", " 0 \nExplanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.\n", " 2\n"]}, "339": {"inputs": [" nums1 = [7,4], nums2 = [5,2,8,9]\n", " nums1 = [1,1], nums2 = [1,1,1]\n", " nums1 = [7,7,8,3], nums2 = [1,2,9,7]\n", " nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]\n"], "outputs": [" 1\nExplanation: Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8). \n", " 9\nExplanation: All Triplets are valid, because 1^2 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]^2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].\n", " 2\nExplanation: There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]^2 = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]^2 = nums1[0] * nums1[1].\n", " 0\nExplanation: There are no valid triplets.\n"]}, "340": null, "341": {"inputs": [" n = 10\n"], "outputs": [" 12\nExplanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.\n"]}, "342": null, "343": {"inputs": [" n = 12\n", " n = 13\n"], "outputs": [" 3 \nExplanation: 12 = 4 + 4 + 4.\n", " 2\nExplanation: 13 = 4 + 9."]}, "344": {"inputs": [" [\"babca\",\"bbazb\"]\n", " [\"edcba\"]\n", " [\"ghi\",\"def\",\"abc\"]\n"], "outputs": [" 3\nExplanation: After deleting columns 0, 1, and 4, the final array is A = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. A[0][0] <= A[0][1] and A[1][0] <= A[1][1]).\nNote that A[0] > A[1] - the array A isn't necessarily in lexicographic order.\n", " 4\nExplanation: If we delete less than 4 columns, the only row won't be lexicographically sorted.\n", " 0\nExplanation: All rows are already lexicographically sorted.\n"]}, "345": null, "346": {"inputs": [" nums = [1,1,2,1,1], k = 3\n", " nums = [2,4,6], k = 1\n", " nums = [2,2,2,1,2,2,1,2,2,2], k = 2\n"], "outputs": [" 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n", " 0\nExplanation: There is no odd numbers in the array.\n", " 16\n"]}, "347": {"inputs": ["s1 = \"ab\" s2 = \"eidbaooo\"\n", "s1= \"ab\" s2 = \"eidboaoo\"\n"], "outputs": ["true\nExplanation: s2 contains one permutation of s1 (\"ba\").\n", " false\n"]}, "348": {"inputs": [" arr = [1,-2,0,3]\n", " arr = [1,-2,-2,3]\n", " arr = [-1,-1,-1,-1]\n"], "outputs": [" 4\nExplanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.\n", " 3\nExplanation: We just choose [3] and it's the maximum sum.\n", " -1\nExplanation:\u00a0The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.\n"]}, "349": {"inputs": [" nums = [3, 4, 2]\n", " nums = [2, 2, 3, 3, 3, 4]\n"], "outputs": [" 6\nExplanation: \nDelete 4 to earn 4 points, consequently 3 is also deleted.\nThen, delete 2 to earn 2 points. 6 total points are earned.\n", " 9\nExplanation: \nDelete 3 to earn 3 points, deleting both 2's and the 4.\nThen, delete 3 again to earn 3 points, and 3 again to earn 3 points.\n9 total points are earned.\n"]}, "350": {"inputs": [" a = [1,2,1,2,3], k = 2\n", " a = [1,2,1,3,4], k = 3\n"], "outputs": [" 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n", " 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n"]}, "351": {"inputs": [" x = 2, y = 3\n", " x = 5, y = 8\n", " x = 3, y = 10\n", " x = 1024, y = 1\n"], "outputs": [" 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n", " 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n", " 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n", " 1023\nExplanation: Use decrement operations 1023 times.\n"]}, "352": {"inputs": [" [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\n"], "outputs": [" 4\nExplanation: one of the longest word chain is \"a\",\"ba\",\"bda\",\"bdca\".\n"]}, "353": {"inputs": [" nums = [3,5,6,7], target = 9\n", " nums = [3,3,6,8], target = 10\n", " nums = [2,3,3,4,6,7], target = 12\n", " nums = [5,2,4,1,7,6,8], target = 16\n"], "outputs": [" 4\nExplanation: There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)\n", " 6\nExplanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]\nExample 3:\n", " 61\nExplanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61).\n", " 127\nExplanation: All non-empty subset satisfy the condition (2^7 - 1) = 127\n"]}, "354": {"inputs": [" n = 2, rollmax = [1,1,2,2,2,3]\n", " n = 2, rollmax = [1,1,1,1,1,1]\n", " n = 3, rollmax = [1,1,1,2,2,3]\n"], "outputs": [" 34\nExplanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n", " 30\n", " 181\n"]}, "355": {"inputs": ["n: 13   k: 2\n"], "outputs": ["10\n"]}, "356": {"inputs": ["matrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n", "matrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n"], "outputs": [" true\n", " false"]}, "357": {"inputs": [" seats = [1,0,0,0,1,0,1]\n", " seats = [1,0,0,0]\n", " seats = [0,1]\n"], "outputs": [" 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n", " 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n", " 1\n"]}, "358": {"inputs": [" s = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\n", " s = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\n"], "outputs": [" \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n", " \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n"]}, "359": {"inputs": [" [[1,2,3],[4,5,6],[7,8,9]]\n"], "outputs": [" 12\nExplanation: \nThe possible falling paths are:\n"]}, "360": {"inputs": [" weights = [1,2,3,4,5,6,7,8,9,10], d = 5\n", " weights = [3,2,2,4,1,4], d = 3\n", " weights = [1,2,3,1,1], d = 4\n"], "outputs": [" 15\nExplanation: \nA ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n", " 6\nExplanation: \nA ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n", " 3\nExplanation: \n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n"]}, "361": {"inputs": [" n = 2, m = 3\n", " n = 5, m = 8\n", " n = 11, m = 13\n"], "outputs": [" 3\nExplanation: 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)\n", " 5\n", " 6\n"]}, "362": {"inputs": [" hats = [[3,4],[4,5],[5]]\n", " hats = [[3,5,1],[3,5]]\n", " hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\n", " hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]\n"], "outputs": [" 1\nExplanation: There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.\n", " 4\nExplanation: There are 4 ways to choose hats\n(3,5), (5,3), (1,3) and (1,5)\n", " 24\nExplanation: Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24.\n", " 111\n"]}, "363": {"inputs": [" [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n", " [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n"], "outputs": [" 3\nExplanation: \nThere are three 1s that are enclosed by 0s, and one 1 that isn't enclosed because its on the boundary.\n", " 0\nExplanation: \nAll 1s are either on the boundary or can reach the boundary.\n"]}, "364": {"inputs": [" x = 3, y = 5, z = 4\n", " x = 2, y = 6, z = 5\n"], "outputs": [" true\n", " false\n"]}, "365": {"inputs": [" s = \"abc\"\n", " s = \"aba\"\n", " s = \"leetcode\"\n"], "outputs": [" 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvey substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n", " 8\nExplanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\n", " 92\n"]}, "366": {"inputs": ["s = \"aaabb\", k = 3\n", "s = \"ababbc\", k = 2\n"], "outputs": ["3\n", "5\n"]}, "367": {"inputs": [" [1,3,4,2,2]\n", " [3,1,3,4,2]\n"], "outputs": [" 2\n", " 3\n"]}, "368": {"inputs": [" satisfaction = [-1,-8,0,5,-9]\n", " satisfaction = [4,3,2]\n", " satisfaction = [-1,-4,-5]\n", " satisfaction = [-2,5,-1,0,3,-3]\n"], "outputs": [" 14\nExplanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.\n", " 20\nExplanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)\n", " 0\nExplanation: People don't like the dishes. No dish is prepared.\n", " 35\n"]}, "369": {"inputs": [" mat = [[0,0],[0,1]]\n", " mat = [[0]]\n", " mat = [[1,1,1],[1,0,1],[0,0,0]]\n", " mat = [[1,0,0],[1,0,0]]\n"], "outputs": [" 3\nExplanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.\n", " 0\nExplanation: Given matrix is a zero matrix. We don't need to change it.\n", " 6\n", " -1\nExplanation: Given matrix can't be a zero matrix\n"]}, "370": {"inputs": [" [4,6,15,35]\n", " [20,50,9,63]\n", " [2,3,6,7,4,12,21,39]\n"], "outputs": [" 4\n", " 2\n", " 8\n"]}, "371": {"inputs": ["routes = [[1, 2, 7], [3, 6, 7]]\nS = 1\nT = 6\n"], "outputs": [" 2\nExplanation: \nThe best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n"]}, "372": {"inputs": ["s = \"aa\"\np = \"a\"\n", "s = \"aa\"\np = \"a*\"\n", "s = \"ab\"\np = \".*\"\n", "s = \"aab\"\np = \"c*a*b\"\n", "s = \"mississippi\"\np = \"mis*is*p*.\"\n"], "outputs": [" false\nExplanation: \"a\" does not match the entire string \"aa\".\n", " true\nExplanation:\u00a0'*' means zero or more of the precedeng\u00a0element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n", " true\nExplanation:\u00a0\".*\" means \"zero or more (*) of any character (.)\".\n", " true\nExplanation:\u00a0c can be repeated 0 times, a can be repeated 1 time. Therefore it matches \"aab\".\n", " false"]}, "373": {"inputs": [" [2,4,1], k = 2\n", " [3,2,6,5,0,3], k = 2\n"], "outputs": [" 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n", " 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.\nThen buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."]}, "374": {"inputs": [" [\"alex\",\"loves\",\"leetcode\"]\n", " [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\n"], "outputs": [" \"alexlovesleetcode\"\nExplanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.\n", " \"gctaagttcatgcatc\"\n"]}, "375": {"inputs": [" [3,6,9,1]\n", " [10]\n"], "outputs": [" 3\nExplanation: The sorted form of the array is [1,3,6,9], either\n\u00a0            (3,6) or (6,9) has the maximum difference 3.\n", " 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n"]}, "376": {"inputs": [" [1,2,3]\n", " [3,7,4,5]\n", " [1,3,1,4,1,5]\n"], "outputs": [" 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.\n", " 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.  The minimum score is 144.\n", " 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\n"]}, "377": {"inputs": [" n = 1, a = 2, b = 3\n", " n = 4, a = 2, b = 3\n", " n = 5, a = 2, b = 4\n", " n = 3, a = 6, b = 4\n"], "outputs": [" 2\n", " 6\n", " 10\n", " 8\n"]}, "378": {"inputs": [" [1, 5, 11, 5]\n", " [1, 2, 3, 5]\n"], "outputs": [" true\n", " false\n"]}, "379": {"inputs": [" nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\n", " nums1 = [1,3,5,7,9], nums2 = [3,5,100]\n", " nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\n", " nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]\n"], "outputs": [" 30\nExplanation:\u00a0Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10].\n", " 109\nExplanation:\u00a0Maximum sum is obtained with the path [1,3,5,100].\n", " 40\nExplanation:\u00a0There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10].\n", " 61\n"]}, "380": {"inputs": [" \"172.16.254.1\"\n", " \"2001:0db8:85a3:0:0:8a2e:0370:7334\"\n", " \"256.256.256.256\"\n"], "outputs": [" \"ipv4\"\n", " \"ipv6\"\n", " \"neither\"\n"]}, "381": {"inputs": [" s = 7, nums = [2,3,1,2,4,3]\n"], "outputs": [" 2\nExplanation: the subarray [4,3] has the minimal length under the problem constraint.\n"]}, "382": {"inputs": [" nums = [1,2,3,1]\n", " nums = [1,2,1,3,5,6,4]\n"], "outputs": [" 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n", " 1 or 5 \nExplanation: Your function can return either index number 1 where the peak element is 2, \n\u00a0            or index number 5 where the peak element is 6.\n"]}, "383": {"inputs": [" graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n", " graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\n", " graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\n"], "outputs": [" 0\n", " 1\n", " 1\n"]}, "384": {"inputs": [" [2,1,3]\n"], "outputs": [" 6\nExplanation:\nSubsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n"]}, "385": {"inputs": [" n = 12, k = 3\n", " n = 7, k = 2\n", " n = 4, k = 4\n", " n = 1, k = 1\n", " n = 1000, k = 3\n"], "outputs": [" 3\nExplanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.\n", " 7\nExplanation: Factors list is [1, 7], the 2nd factor is 7.\n", " -1\nExplanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.\n", " 1\nExplanation: Factors list is [1], the 1st factor is 1.\n", " 4\nExplanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].\n"]}, "386": {"inputs": [" n = 1\n", " n = 2\n", " n = 5\n"], "outputs": [" 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n", " 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n", " 68\n"]}, "387": {"inputs": [" votes = [\"abc\",\"acb\",\"abc\",\"acb\",\"acb\"]\n", " votes = [\"wxyz\",\"xyzw\"]\n", " votes = [\"zmnaguedsjylbophrqicwfxtvk\"]\n", " votes = [\"bca\",\"cab\",\"cba\",\"abc\",\"acb\",\"bac\"]\n", " votes = [\"m\",\"m\",\"m\",\"m\"]\n"], "outputs": [" \"acb\"\nExplanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.\nTeam B was ranked second by 2 voters and was ranked third by 3 voters.\nTeam C was ranked second by 3 voters and was ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team and team B is the third.\n", " \"xwyz\"\nExplanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position. \n", " \"zmnaguedsjylbophrqicwfxtvk\"\nExplanation: Only one voter so his votes are used for the ranking.\n", " \"abc\"\nExplanation: \nTeam A was ranked first by 2 voters, second by 2 voters and third by 2 voters.\nTeam B was ranked first by 2 voters, second by 2 voters and third by 2 voters.\nTeam C was ranked first by 2 voters, second by 2 voters and third by 2 voters.\nThere is a tie and we rank teams ascending by their IDs.\n", " \"m\"\nExplanation: Only team M in the competition so it has the first rank.\n"]}, "388": {"inputs": [" citations = [3,0,6,1,5]\n"], "outputs": [" 3 \nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had \n             received 3, 0, 6, 1, 5 citations respectively. \n\u00a0            Since the researcher has 3 papers with at least 3 citations each and the remaining \n\u00a0            two with no more than 3 citations each, her h-index is 3.\n"]}, "389": null, "390": {"inputs": [" n = 1\n", " n = 2\n", " n = 4\n", " n = 7\n", " n = 17\n"], "outputs": [" true\nExplanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.\n", " false\nExplanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).\nExample 3:\n", " true\nExplanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).\n", " false\nExplanation: Alice can't win the game if Bob plays optimally.\nIf Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). \nIf Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0).\n", " false\nExplanation: Alice can't win the game if Bob plays optimally.\n"]}, "391": null, "392": {"inputs": [" s = \"10101\"\n", " s = \"1001\"\n", " s = \"0000\"\n", " s = \"100100010100110\"\n"], "outputs": [" 4\nExplanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\"\n", " 0\n", " 3\nExplanation: There are three ways to split s in 3 parts.\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\"\n", " 12\n"]}, "393": {"inputs": [" n = 3, a = 2, b = 3, c = 5\n", " n = 4, a = 2, b = 3, c = 4\n", " n = 5, a = 2, b = 11, c = 13\n", " n = 1000000000, a = 2, b = 217983653, c = 336916467\n"], "outputs": [" 4\nExplanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.\n", " 6\nExplanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.\n", " 10\nExplanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.\n", " 1999999984\n"]}, "394": {"inputs": ["[1,2,3]\n"], "outputs": ["2\n"]}, "395": {"inputs": [" [10,13,12,14,15]\n", " [2,3,1,1,4]\n", " [5,1,3,4,2]\n"], "outputs": [" 2\nExplanation: \nFrom starting index i = 0, we can jump to i = 2 (since A[2] is the smallest among A[1], A[2], A[3], A[4] that is greater or equal to A[0]), then we can't jump any more.\nFrom starting index i = 1 and i = 2, we can jump to i = 3, then we can't jump any more.\nFrom starting index i = 3, we can jump to i = 4, so we've reached the end.\nFrom starting index i = 4, we've reached the end already.\nIn total, there are 2 different starting indexes (i = 3, i = 4) where we can reach the end with some number of jumps.\n", " 3\nExplanation: \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\n", " 3\nExplanation: \nWe can reach the end from starting indexes 1, 2, and 4.\n"]}, "396": {"inputs": [" 1\n", " 2\n", " 3\n"], "outputs": [" 1\nExplanation: The smallest answer is N = 1, which has length 1.\n", " -1\nExplanation: There is no such positive integer N divisible by 2.\nExample 3:\n", " 3\nExplanation: The smallest answer is N = 111, which has length 3.\n"]}, "397": {"inputs": [" 13\n"], "outputs": [" 6 \nExplanation: Digit 1 occurred in the following numbers: 1, 10, 11, 12, 13."]}, "398": {"inputs": ["nums = [1,1,1], k = 2\n"], "outputs": [" 2\n"]}, "399": {"inputs": [" \"12\"\n", " \"226\"\n"], "outputs": [" 2\nExplanation:\u00a0It could be decoded as \"AB\" (1 2) or \"L\" (12).\n", " 3\nExplanation:\u00a0It could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."]}, "400": {"inputs": [" [2,1,5,6,2,3]\n"], "outputs": [" 10"]}, "401": {"inputs": [" nums = [3,6,5,1,8]\n", " nums = [4]\n", " nums = [1,2,3,4,4]\n"], "outputs": [" 18\nExplanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).\n", " 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.\n", " 12\nExplanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).\n"]}, "402": {"inputs": [" blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\n", " blocked = [], source = [0,0], target = [999999,999999]\n"], "outputs": [" false\nExplanation: \nThe target square is inaccessible starting from the source square, because we can't walk outside the grid.\n", " true\nExplanation: \nBecause there are no blocked cells, it's possible to reach the target square.\n"]}, "403": null, "404": {"inputs": ["A = [9,1,2,3,9]\nK = 3\n"], "outputs": [" 20\nExplanation: \nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n"]}, "405": {"inputs": [" n = 10, k = 1, w = 10\n", " n = 6, k = 1, w = 10\n", " n = 21, k = 17, w = 10\n"], "outputs": [" 1.00000\nExplanation:  Alice gets a single card, then stops.\n", " 0.60000\nExplanation:  Alice gets a single card, then stops.\nIn 6 out of W = 10 possibilities, she is at or below N = 6 points.\n", " 0.73278\nNote:\n"]}, "406": {"inputs": ["beginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n", "beginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n"], "outputs": [" 5\n", "\u00a00\n"]}, "407": {"inputs": [" \"()\"\n", " \"(())\"\n", " \"()()\"\n", " \"(()(()))\"\n"], "outputs": [" 1\n", " 2\n", " 2\n", " 6\n"]}, "408": {"inputs": [" arr = [4,9,3], target = 10\n", " arr = [2,3,5], target = 10\n", " arr = [60864,25176,27249,21296,20204], target = 56803\n"], "outputs": [" 3\nExplanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.\n", " 5\n", " 11361\n"]}, "409": {"inputs": [" arr = [1,2], k = 3\n", " arr = [1,-2,1], k = 5\n", " arr = [-1,-2], k = 7\n"], "outputs": [" 9\n", " 2\n", " 0\n"]}, "410": {"inputs": [" lo = 12, hi = 15, k = 2\n", " lo = 1, hi = 1, k = 1\n", " lo = 7, hi = 11, k = 4\n", " lo = 10, hi = 20, k = 5\n", " lo = 1, hi = 1000, k = 777\n"], "outputs": [" 13\nExplanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.\n", " 1\n", " 7\nExplanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7.\n", " 13\n", " 570\n"]}, "411": {"inputs": [" s = \"leetcode\", worddict = [\"leet\", \"code\"]\n", " s = \"applepenapple\", worddict = [\"apple\", \"pen\"]\n", " s = \"catsandog\", worddict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n"], "outputs": [" true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n", " true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n\u00a0            Note that you are allowed to reuse a dictionary word.\n", " false"]}, "412": {"inputs": [" d = 1, f = 6, target = 3\n", " d = 2, f = 6, target = 7\n", " d = 2, f = 5, target = 10\n", " d = 1, f = 2, target = 3\n", " d = 30, f = 30, target = 500\n"], "outputs": [" 1\nExplanation: \nYou throw one die with 6 faces.  There is only one way to get a sum of 3.\n", " 6\nExplanation: \nYou throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:\n1+6, 2+5, 3+4, 4+3, 5+2, 6+1.\n", " 1\nExplanation: \nYou throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.\n", " 0\nExplanation: \nYou throw one die with 2 faces.  There is no way to get a sum of 3.\n", " 222616187\nExplanation: \nThe answer must be returned modulo 10^9 + 7.\n"]}, "413": {"inputs": [" palindrome = \"abccba\"\n", " palindrome = \"a\"\n"], "outputs": [" \"aaccba\"\n", " \"\"\n"]}, "414": {"inputs": [" arr = [2,1,3,5,4,6,7], k = 2\n", " arr = [3,2,1], k = 10\n", " arr = [1,9,8,2,3,7,6,4,5], k = 7\n", " arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\n"], "outputs": [" 5\nExplanation: Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n", " 3\nExplanation: 3 will win the first 10 rounds consecutively.\n", " 9\n", " 99\n"]}, "415": {"inputs": [" a = [1,3,5,4], b = [1,2,3,7]\n"], "outputs": [" 1\nExplanation: \nSwap A[3] and B[3].  Then the sequences are:\nA = [1, 3, 5, 7] and B = [1, 2, 3, 4]\nwhich are both strictly increasing.\n"]}, "416": {"inputs": [" [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n"], "outputs": [" 0\nExplanation:\n4---3---1\n|\u00a0 \u00a0|\n2---5\n\u00a0\\\u00a0/\n\u00a0 0\n"]}, "417": null, "418": {"inputs": ["8\n", "7\n"], "outputs": ["3\n", "4\n"]}, "419": {"inputs": [" 3\n"], "outputs": [" 1 \nExplanation: \nAt first, the three bulbs are [off, off, off].\nAfter first round, the three bulbs are [on, on, on].\nAfter second round, the three bulbs are [on, off, on].\nAfter third round, the three bulbs are [on, off, off]. \n"]}, "420": {"inputs": [" s = \"eleetminicoworoep\"\n", " s = \"leetcodeisgreat\"\n", " s = \"bcbcbc\"\n"], "outputs": [" 13\nExplanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.\n", " 5\nExplanation: The longest substring is \"leetc\" which contains two e's.\n", " 6\nExplanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times.\n"]}, "421": {"inputs": [" \"abab\"\n", " \"leetcode\"\n"], "outputs": [" \"bab\"\nExplanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".\n", " \"tcode\"\n"]}, "422": {"inputs": [" \"babad\"\n", " \"cbbd\"\n"], "outputs": [" \"bab\"\nNote: \"aba\" is also a valid answer.\n", " \"bb\""]}, "423": {"inputs": [" arr = [1,2,3,4], difference = 1\n", " arr = [1,3,5,7], difference = 1\n", " arr = [1,5,7,8,5,3,4,2,1], difference = -2\n"], "outputs": [" 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].\n", " 1\nExplanation: The longest arithmetic subsequence is any single element.\n", " 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n"]}, "424": {"inputs": [" img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\n", " img1 = [[1]], img2 = [[1]]\n", " img1 = [[0]], img2 = [[0]]\n"], "outputs": [" 3\nExplanation: We slide img1 to right by 1 unit and down by 1 unit.\n", " 1\n", " 0\n"]}, "425": {"inputs": [" dividend = 10, divisor = 3\n", " dividend = 7, divisor = -3\n"], "outputs": [" 3\n", " -2\n"]}, "426": {"inputs": [" 1\n", " 10\n", " 16\n", " 24\n", " 46\n"], "outputs": [" true\n", " false\n", " true\n", " false\n", " true\n"]}, "427": {"inputs": [" n = 1\n", " n = 2\n", " n = 3\n"], "outputs": [" 1\nExplanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n", " 6\nExplanation: All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n", " 90\n"]}, "428": {"inputs": [" [\"@.a.#\",\"###.#\",\"b.a.b\"]\n", " [\"@..aa\",\"..b#.\",\"....b\"]\n"], "outputs": [" 8\n", " 6\n"]}, "429": {"inputs": [" secret = \"1807\", guess = \"7810\"\n", " secret = \"1123\", guess = \"0111\"\n"], "outputs": [" \"1a3b\"\n", " \"1a1b\"\n"]}, "430": {"inputs": [" \"abc\"\n", " \"aba\"\n", " \"aaa\"\n"], "outputs": [" 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n", " 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"ba\", \"aa\" and \"aba\".\n", " 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n"]}, "431": {"inputs": [" [3,1,2,4]\n"], "outputs": [" 17\nExplanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\u00a0 Sum is 17.\n"]}, "432": {"inputs": [" nums = [1,2,3,3,4,4,5,6], k = 4\n", " nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\n", " nums = [3,3,2,2,1,1], k = 3\n", " nums = [1,2,3,4], k = 3\n"], "outputs": [" true\nExplanation: Array can be divided into [1,2,3,4] and [3,4,5,6].\n", " true\nExplanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].\n", " true\n", " false\nExplanation: Each array should be divided in subarrays of size 3.\n"]}, "433": {"inputs": [" arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n", " arr = [1,1,1,1,1], k = 1, threshold = 0\n", " arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n", " arr = [7,7,7,7,7,7,7], k = 7, threshold = 7\n", " arr = [4,4,4,4], k = 4, threshold = 1\n"], "outputs": [" 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n", " 5\n", " 6\nExplanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n", " 1\n", " 1\n"]}, "434": {"inputs": [" nums = [1,1,0,1]\n", " nums = [0,1,1,1,0,1,1,0,1]\n", " nums = [1,1,1]\n", " nums = [1,1,0,0,1,1,1,0,1]\n", " nums = [0,0,0]\n"], "outputs": [" 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.\n", " 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].\nExample 3:\n", " 2\nExplanation: You must delete one element.\n", " 4\n", " 0\n"]}, "435": {"inputs": [" a = [4,5,0,-2,-3,1], k = 5\n"], "outputs": [" 7\nExplanation: There are 7 subarrays with a sum divisible by K = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n"]}, "436": {"inputs": [" n = 10\n", " n = 6\n", " n = 1\n", " n = 56\n"], "outputs": [" 4\nExplanation: You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges.\n", " 3\nExplanation: You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges.\n", " 1\n", " 6\n"]}, "437": {"inputs": [" s = \"leet2code3\", k = 10\n", " s = \"ha22\", k = 5\n", " s = \"a2345678999999999999999\", k = 1\n"], "outputs": [" \"o\"\nExplanation: \nThe decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter in the string is \"o\".\n", " \"h\"\nExplanation: \nThe decoded string is \"hahahaha\".  The 5th letter is \"h\".\n", " \"a\"\nExplanation: \nThe decoded string is \"a\" repeated 8301530446056247680 times.  The 1st letter is \"a\".\n"]}, "438": {"inputs": [" arr = [3,5,1,2,4], m = 1\n", " arr = [3,1,5,4,2], m = 2\n", " arr = [1], m = 1\n", " arr = [2,1], m = 2\n"], "outputs": [" 4\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4.\n", " -1\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step.\n", " 1\n", " 2\n"]}, "439": {"inputs": [" [9,4,2,10,7,8,8,1,9]\n", " [4,8,12,16]\n", " [100]\n"], "outputs": [" 5\nExplanation: (A[1] > A[2] < A[3] > A[4] < A[5])\n", " 2\n", " 1\n"]}, "440": {"inputs": [" p = 2, q = 1\n"], "outputs": [" 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n"]}, "441": {"inputs": [" 5\n", " 9\n", " 15\n"], "outputs": [" 2\nExplanation: 5 = 5 = 2 + 3\n", " 3\nExplanation: 9 = 9 = 4 + 5 = 2 + 3 + 4\nExample 3:\n", " 4\nExplanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\nNote:\u00a01 <= N <= 10 ^ 9."]}, "442": {"inputs": [" grid = [[0,0,1],[1,1,0],[1,0,0]]\n", " grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\n", " grid = [[1,0,0],[1,1,0],[1,1,1]]\n"], "outputs": [" 3\n", " -1\nExplanation: All rows are similar, swaps have no effect on the grid.\n", " 0\n"]}, "443": {"inputs": [" rating = [2,5,3,4,1]\n", " rating = [2,1,3]\n", " rating = [1,2,3,4]\n"], "outputs": [" 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n", " 0\nExplanation: We can't form any team given the conditions.\n", " 4\n"]}, "444": {"inputs": [" n = 1\n", " n = 2\n"], "outputs": [" 1.00000\nExplanation: The first person can only get the first seat.\n", " 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).\n"]}, "445": {"inputs": [" nums = [5,3,2,4]\n", " nums = [1,5,0,10,14]\n", " nums = [6,6,0,1,1,4,6]\n", " nums = [1,5,6,14,15]\n"], "outputs": [" 0\nExplanation: Change the array [5,3,2,4] to [2,2,2,2].\nThe difference between the maximum and minimum is 2-2 = 0.\n", " 1\nExplanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. \nThe difference between the maximum and minimum is 1-0 = 1.\n", " 2\n", " 1\n"]}, "446": {"inputs": [" arr = [5,5,4], k = 1\n", " arr = [4,3,1,1,3,3,2], k = 3\n"], "outputs": [" 1\nExplanation: Remove the single 4, only 5 is left.\n", " 2\nExplanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\n"]}, "447": {"inputs": [" \"bcabc\"\n", " \"cbacdcbc\"\n"], "outputs": [" \"abc\"\n", " \"acdb\""]}, "448": {"inputs": [" [23, 2, 4, 6, 7],  k=6\n", " [23, 2, 6, 4, 7],  k=6\n"], "outputs": [" true\nExplanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n", " true\nExplanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n"]}, "449": {"inputs": [" [3,4,5,1,2] \n", " [4,5,6,7,0,1,2]\n"], "outputs": [" 1\n", " 0"]}, "450": null, "451": {"inputs": [" s = \"0.(52)\", t = \"0.5(25)\"\n", " s = \"0.1666(6)\", t = \"0.166(66)\"\n", " s = \"0.9(9)\", t = \"1.\"\n"], "outputs": [" true\nExplanation:\nBecause \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.\n", " true\n", " true\nExplanation: \n\"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".\n"]}, "452": {"inputs": [" jobdifficulty = [6,5,4,3,2,1], d = 2\n", " jobdifficulty = [9,9,9], d = 4\n", " jobdifficulty = [1,1,1], d = 3\n", " jobdifficulty = [7,1,7,1,7,1], d = 3\n", " jobdifficulty = [11,111,22,222,33,333,44,444], d = 6\n"], "outputs": [" 7\nExplanation: First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7 \n", " -1\nExplanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\n", " 3\nExplanation: The schedule is one job per day. total difficulty will be 3.\n", " 15\n", " 843\n"]}, "453": {"inputs": [" houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n", " houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n", " houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5\n", " houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\n"], "outputs": [" 9\nExplanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.\n", " 11\nExplanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11.\n", " 5\n", " -1\nExplanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.\n"]}, "454": {"inputs": [" 2736\n", " 9973\n"], "outputs": [" 7236\nExplanation: Swap the number 2 and the number 7.\n", " 9973\nExplanation: No swap.\n"]}, "455": {"inputs": [" targetgrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\n", " targetgrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\n", " targetgrid = [[1,2,1],[2,1,2],[1,2,1]]\n", " targetgrid = [[1,1,1],[3,1,3]]\n"], "outputs": [" true\n", " true\n", " false\nExplanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.\n", " false\n"]}, "456": null, "457": {"inputs": [" coins = [1,2,5], amount = 11\n", " coins = [2], amount = 3\n", " coins = [1], amount = 0\n", " coins = [1], amount = 1\n", " coins = [1], amount = 2\n"], "outputs": [" 3\nExplanation: 11 = 5 + 5 + 1\n", " -1\n", " 0\n", " 1\n", " 2\n"]}, "458": {"inputs": [" nums = [3,1,4,2], p = 6\n", " nums = [6,3,5,2], p = 9\n", " nums = [1,2,3], p = 3\n", " nums = [1,2,3], p = 7\n", " nums = [1000000000,1000000000,1000000000], p = 3\n"], "outputs": [" 1\nExplanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.\n", " 2\nExplanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.\n", " 0\nExplanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\n", " -1\nExplanation: There is no way to remove a subarray in order to get a sum divisible by 7.\n", " 0\n"]}, "459": {"inputs": ["s = \"ABAB\", k = 2\n", "s = \"AABABBA\", k = 1\n"], "outputs": ["4\n", "4\n"]}, "460": {"inputs": [" a = [5,4,0,3,1,6,2]\n"], "outputs": [" 4\nExplanation: \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n"]}, "461": {"inputs": [" n = 1, headid = 0, manager = [-1], informtime = [0]\n", " n = 6, headid = 2, manager = [2,2,-1,2,2,2], informtime = [0,0,1,0,0,0]\n", " n = 7, headid = 6, manager = [1,2,3,4,5,6,-1], informtime = [0,6,5,4,3,2,1]\n", " n = 15, headid = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informtime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]\n", " n = 4, headid = 2, manager = [3,3,-1,2], informtime = [0,0,162,914]\n"], "outputs": [" 0\nExplanation: The head of the company is the only employee in the company.\n", " 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.\n", " 21\nExplanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.\nThe employee with id = 5 will inform the employee with id = 4 in 2 minutes.\nThe employee with id = 4 will inform the employee with id = 3 in 3 minutes.\nThe employee with id = 3 will inform the employee with id = 2 in 4 minutes.\nThe employee with id = 2 will inform the employee with id = 1 in 5 minutes.\nThe employee with id = 1 will inform the employee with id = 0 in 6 minutes.\nNeeded time = 1 + 2 + 3 + 4 + 5 + 6 = 21.\n", " 3\nExplanation: The first minute the head will inform employees 1 and 2.\nThe second minute they will inform employees 3, 4, 5 and 6.\nThe third minute they will inform the rest of employees.\n", " 1076\n"]}, "462": {"inputs": [" grid = [[1,0],[0,1]]\n", " grid = [[1,0],[1,1]]\n", " grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\n"], "outputs": [" 0\nExplanation:\u00a0No servers can communicate with others.\n", " 3\nExplanation:\u00a0All three servers can communicate with at least one other server.\n", " 4\nExplanation:\u00a0The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.\n"]}, "463": {"inputs": [" nums = [2,3,1,5,4]\n", " nums = [2,4,9,24,2,1,10]\n"], "outputs": [" 10\nExplanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\n", " 68\n"]}, "464": {"inputs": [" n = 3\n", " n = 6\n"], "outputs": [" 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n", " 9\n"]}, "465": {"inputs": ["\u00a0\"aab\"\n"], "outputs": [" 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut."]}, "466": {"inputs": [" \"leetcode@leetcode.com\"\n", " \"ab@qq.com\"\n", " \"1(234)567-890\"\n", " \"86-(10)12345678\"\n"], "outputs": [" \"l*****e@leetcode.com\"\nExplanation:\u00a0All names are converted to lowercase, and the letters between the\n\u00a0            first and last letter of the first name is replaced by 5 asterisks.\n\u00a0            Therefore, \"leetcode\" -> \"l*****e\".\n", " \"a*****b@qq.com\"\nExplanation:\u00a0There must be 5 asterisks between the first and last letter \n\u00a0            of the first name \"ab\". Therefore, \"ab\" -> \"a*****b\".\n", " \"***-***-7890\"\nExplanation:\u00a010 digits in the phone number, which means all digits make up the local number.\n", " \"+**-***-***-5678\"\nExplanation:\u00a012 digits, 2 digits for country code and 10 digits for local number. \n"]}, "467": {"inputs": [" nums = [21,4,7]\n"], "outputs": [" 32\nExplanation:\n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only.\n"]}, "468": {"inputs": [" numerator = 1, denominator = 2\n", " numerator = 2, denominator = 1\n", " numerator = 2, denominator = 3\n"], "outputs": [" \"0.5\"\n", " \"2\"\n", " \"0.(6)\""]}, "469": {"inputs": [" n = 4, leftchild = [1,-1,3,-1], rightchild = [2,-1,-1,-1]\n", " n = 4, leftchild = [1,-1,3,-1], rightchild = [2,3,-1,-1]\n", " n = 2, leftchild = [1,0], rightchild = [-1,-1]\n", " n = 6, leftchild = [1,-1,-1,4,-1,-1], rightchild = [2,-1,-1,5,-1,-1]\n"], "outputs": [" true\n", " false\n", " false\n", " false\n"]}, "470": {"inputs": [" a = [1,1,2,2,3,3,4,4,5,5], target = 8\n", " a = [1,1,2,2,2,2], target = 5\n"], "outputs": [" 20\nExplanation: \nEnumerating by the values (A[i], A[j], A[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n", " 12\nExplanation: \nA[i] = 1, A[j] = A[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.\n"]}, "471": {"inputs": ["11110\n11010\n11000\n00000\n", "11000\n11000\n00100\n00011\n"], "outputs": ["\u00a01\n", " 3"]}, "472": {"inputs": [" arr = [4,2,3,0,3,1,2], start = 5\n", " arr = [4,2,3,0,3,1,2], start = 0\n", " arr = [3,0,2,1,2], start = 2\n"], "outputs": [" true\nExplanation: \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -> index 4 -> index 1 -> index 3 \nindex 5 -> index 6 -> index 4 -> index 1 -> index 3 \n", " true \nExplanation: \nOne possible way to reach at index 3 with value 0 is: \nindex 0 -> index 4 -> index 1 -> index 3\n", " false\nExplanation: There is no way to reach at index 1 with value 0.\n"]}, "473": {"inputs": [" arr = [2,3,1,6,7]\n", " arr = [1,1,1,1,1]\n", " arr = [2,3]\n", " arr = [1,3,5,7,9]\n", " arr = [7,11,12,9,5,2,7,17,22]\n"], "outputs": [" 4\nExplanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)\n", " 10\n", " 0\n", " 3\n", " 8\n"]}, "474": {"inputs": [" words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\n", " words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\n", " words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\n"], "outputs": [" 23\nExplanation:\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21.\n", " 27\nExplanation:\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25.\nExample 3:\n", " 0\nExplanation:\nLetter \"e\" can only be used once.\n"]}, "475": {"inputs": [" nums = [1,2,3,4], n = 4, left = 1, right = 5\n", " nums = [1,2,3,4], n = 4, left = 3, right = 4\n", " nums = [1,2,3,4], n = 4, left = 1, right = 10\n"], "outputs": [" 13 \nExplanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. \n", " 6\nExplanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.\n", " 50\n"]}, "476": {"inputs": [" target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n"], "outputs": [" 3\nExplanation:\nThe cars starting at 10 and 8 become a fleet, meeting each other at 12.\nThe car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 and 3 become a fleet, meeting each other at 6.\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n"]}, "477": {"inputs": [" n = 3, k = 1\n", " n = 4, k = 11\n", " n = 1, k = 1\n", " n = 2, k = 3\n"], "outputs": [" \"0\"\nExplanation: S3\u00a0is \"0111001\". The first bit is \"0\".\n", " \"1\"\nExplanation: S4\u00a0is \"011100110110001\". The 11th bit is \"1\".\n", " \"0\"\n", " \"1\"\n"]}, "478": {"inputs": [" [2,2,3,2]\n", " [0,1,0,1,0,1,99]\n"], "outputs": [" 3\n", " 99"]}, "479": {"inputs": ["[[1,2,2,1],\n [3,1,2],\n [1,3,2],\n [2,4],\n [3,1,2],\n [1,3,1,1]]\n"], "outputs": [" 2\nExplanation: \n"]}, "480": {"inputs": [" steps = 3, arrlen = 2\n", " steps = 2, arrlen = 4\n", " steps = 4, arrlen = 2\n"], "outputs": [" 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n", " 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n", " 8\n"]}, "481": null, "482": {"inputs": [" arr = [6,2,4]\n"], "outputs": [" 32\nExplanation:\nThere are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.\n"]}, "483": null, "484": {"inputs": [" 6\n", " 8\n", " 13\n"], "outputs": [" 7\n", " 11\n", " 101\n"]}, "485": {"inputs": [" a = [0,1,0], k = 1\n", " a = [1,1,0], k = 2\n", " a = [0,0,0,1,0,1,1,0], k = 3\n"], "outputs": [" 2\nExplanation: Flip A[0], then flip A[2].\n", " -1\nExplanation:\u00a0No matter how we flip subarrays of size 2, we can't make the array become [1,1,1].\n", " 3\nExplanation:\nFlip A[0],A[1],A[2]:\u00a0A becomes [1,1,1,1,0,1,1,0]\nFlip A[4],A[5],A[6]:\u00a0A becomes [1,1,1,1,1,0,0,0]\nFlip A[5],A[6],A[7]:\u00a0A becomes [1,1,1,1,1,1,1,1]\n"]}, "486": {"inputs": [" s = \"0110\", n = 3\n", " s = \"0110\", n = 4\n"], "outputs": [" true\n", " false\n"]}, "487": {"inputs": [" a = 1, b = 1, c = 7\n", " a = 2, b = 2, c = 1\n", " a = 7, b = 1, c = 0\n"], "outputs": [" \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.\n", " \"aabbc\"\n", " \"aabaa\"\nExplanation: It's the only correct answer in this case.\n"]}, "488": null, "489": {"inputs": [" [6,0,8,2,1,5]\n", " [9,8,1,0,1,9,4,0,4,1]\n"], "outputs": [" 4\nExplanation: \nThe maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.\n", " 7\nExplanation: \nThe maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.\n"]}, "490": {"inputs": [" [[1],[2],[3],[]]\n", " [[1,3],[3,0,1],[2],[0]]\n"], "outputs": [" true\nExplanation:  \nWe start in room 0, and pick up key 1.\nWe then go to room 1, and pick up key 2.\nWe then go to room 2, and pick up key 3.\nWe then go to room 3.  Since we were able to go to every room, we return true.\n", " false\nExplanation: We can't enter the room with number 2.\n"]}, "491": {"inputs": [" \"a\"\n", " \"cac\"\n", " \"zab\"\n"], "outputs": [" 1\n", " 2\nExplanation: There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\n", " 6\nExplanation: There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s."]}, "492": {"inputs": [" a = 1, b = 2\n", " a = 4, b = 1\n"], "outputs": [" \"abb\"\nExplanation: \"abb\", \"bab\" and \"bba\" are all correct answers.\n", " \"aabaa\"\n"]}, "493": {"inputs": [" nums is [1, 1, 1, 1, 1], s is 3. \n"], "outputs": [" 5\nExplanation: \n"]}, "494": {"inputs": [" text = \"ghiabcdefhelloadamhelloabcdefghi\"\n", " text = \"merchant\"\n", " text = \"antaprezatepzapreanta\"\n", " text = \"aaa\"\n"], "outputs": [" 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n", " 1\nExplanation: We can split the string on \"(merchant)\".\n", " 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".\n", " 3\nExplanation: We can split the string on \"(a)(a)(a)\".\n"]}, "495": {"inputs": [" [2,7,4,1,8,1]\n"], "outputs": [" 1\nExplanation: \nWe can combine 2 and 4 to get 2 so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1 so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0 so the array converts to [1] then that's the optimal value.\n"]}, "496": {"inputs": [" [1,2,2]\n", " [3,2,1,2,1,7]\n"], "outputs": [" 1\nExplanation:  After 1 move, the array could be [1, 2, 3].\n", " 6\nExplanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n"]}, "497": {"inputs": [" starttime = [1,2,3,3], endtime = [3,4,5,6], profit = [50,10,40,70]\n", " starttime = [1,2,3,4,6], endtime = [3,5,10,6,9], profit = [20,20,100,70,60]\n", " starttime = [1,1,1], endtime = [2,3,4], profit = [5,6,4]\n"], "outputs": [" 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n", " 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n", " 6\n"]}, "498": {"inputs": [" [2,3,2]\n", " [1,2,3,1]\n"], "outputs": [" 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),\n\u00a0            because they are adjacent houses.\n", " 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."]}, "499": {"inputs": [" target = [1,2,3,2,1]\n", " target = [3,1,1,2]\n", " target = [3,1,5,4,2]\n", " target = [1,1,1,1]\n"], "outputs": [" 3\nExplanation: We need at least 3 operations to form the target array from the initial array.\n[0,0,0,0,0] increment 1 from index 0 to 4\u00a0(inclusive).\n[1,1,1,1,1] increment 1 from index 1 to 3\u00a0(inclusive).\n[1,2,2,2,1] increment 1 at index 2.\n[1,2,3,2,1] target array is formed.\n", " 4\nExplanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).\n", " 7\nExplanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] \n                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).\n", " 1\n"]}, "500": {"inputs": [" \"3+2*2\"\n", " \" 3/2 \"\n", " \" 3+5 / 2 \"\n"], "outputs": [" 7\n", " 1\n", " 5\n"]}, "501": {"inputs": [" \"aacecaaa\"\n", " \"abcd\"\n"], "outputs": [" \"aaacecaaa\"\n", " \"dcbabcd\""]}, "502": {"inputs": [" graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n", " graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n", " graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n"], "outputs": [" 0\n", " 0\n", " 1\n"]}, "503": {"inputs": [" text = \"leetcode is cool\"\n", " text = \"keep calm and code on\"\n", " text = \"to be or not to be\"\n"], "outputs": [" \"is cool leetcode\"\nExplanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\n", " \"on and keep calm code\"\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters.\n", " \"to be or to be not\"\n"]}, "504": {"inputs": [" s = \"(abcd)\"\n", " s = \"(u(love)i)\"\n", " s = \"(ed(et(oc))el)\"\n", " s = \"a(bcdefghijkl(mno)p)q\"\n"], "outputs": [" \"dcba\"\n", " \"iloveu\"\nExplanation:\u00a0The substring \"love\" is reversed first, then the whole string is reversed.\n", " \"leetcode\"\nExplanation:\u00a0First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n", " \"apmnolkjihgfedcbq\"\n"]}, "505": {"inputs": [" s = \"lee(t(c)o)de)\"\n", " s = \"a)b(c)d\"\n", " s = \"))((\"\n", " s = \"(a(b(c)d)\"\n"], "outputs": [" \"lee(t(c)o)de\"\nExplanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.\n", " \"ab(c)d\"\n", " \"\"\nExplanation: An empty string is also valid.\n", " \"a(b(c)d)\"\n"]}, "506": {"inputs": [" \"42\"\n", " \"   -42\"\n", " \"4193 with words\"\n", " \"words and 987\"\n", " \"-91283472332\"\n"], "outputs": [" 42\n", " -42\nExplanation: The first non-whitespace character is '-', which is the minus sign.\n\u00a0            Then take as many numerical digits as possible, which gets 42.\n", " 4193\nExplanation: Conversion stops at digit '3' as the next character is not a numerical digit.\n", " 0\nExplanation: The first non-whitespace character is 'w', which is not a numerical \n\u00a0            digit or a +/- sign. Therefore no valid conversion could be performed.\n", " -2147483648\nExplanation: The number \"-91283472332\" is out of the range of a 32-bit signed integer.\nThefore INT_MIN (\u2212231) is returned."]}, "507": {"inputs": [" [1,1,2,3,3,4,4,8,8]\n", " [3,3,7,7,10,11,11]\n"], "outputs": [" 2\n", " 10\n"]}, "508": {"inputs": ["4 6\n1 3 2\n7 13 10\n18 20 13\n3 4 2\n0\n1\n2\n3\n5\n8\n"], "outputs": ["2\n2\n10\n-1\n13\n-1\n"]}, "509": {"inputs": ["3 4\n1 2 1\n2 3 2\n3 1 3\n1 3 1\n"], "outputs": ["1\n2\n1\n"]}, "510": {"inputs": ["7\nabcdbbd\n6\n2 3 6\n1 5 z\n2 1 1\n1 4 a\n1 7 d\n2 1 7\n"], "outputs": ["3\n1\n5\n"]}, "511": {"inputs": ["4\n20 11 9 24\n"], "outputs": ["26 5 7 22\n"]}, "512": {"inputs": ["5 3\n1 2 1 10\n1 3 2 20\n2 4 4 30\n5 2 1 40\n1 100 1 4\n1 100 1 5\n3 1000 3 4\n"], "outputs": ["130\n200\n60\n"]}, "513": {"inputs": ["10\n1 2 5 3 4 6 7 3 2 4\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n1 8\n8 9\n9 10\n"], "outputs": ["1\n2\n3\n3\n4\n4\n5\n2\n2\n3\n"]}, "514": {"inputs": ["82\n28\n"], "outputs": ["54"]}, "515": {"inputs": ["3\n2\n3\n4\n"], "outputs": ["2\n3\n3\n"]}, "516": {"inputs": ["2\n3 3\n2 1 3\n4 100\n99 2 1000 24\n"], "outputs": ["12\n30000"]}, "517": {"inputs": ["3 176\n"], "outputs": ["6\n"]}, "518": {"inputs": ["1\n3\n"], "outputs": ["2\n"]}, "519": {"inputs": ["6 3 4 5 -2 1 1 6 1 3 4 2 5 6\n"], "outputs": ["13"]}, "520": null, "521": {"inputs": ["2\n2\n0 1\n0 1\n2\n0 1\n100 1\n"], "outputs": ["0.785398163397\n0.000100999899\n"]}, "522": {"inputs": ["3\n"], "outputs": ["3\n"]}, "523": {"inputs": ["1\n4 3 \n1 2 3 4 \n"], "outputs": ["36\n"]}, "524": {"inputs": ["bbccdd\n5\n1 2\n3 4\n5 6\n1 6\n2 5\n"], "outputs": ["1\n0\n1\n2\n2\n"]}, "525": {"inputs": ["1\n7 2 10\n"], "outputs": ["9"]}, "526": {"inputs": ["1\naaabb\n"], "outputs": ["-40\n"]}, "527": {"inputs": ["4\n2 2 3 4\n4\n1 1 2\n1 3 4\n2 3 3\n1 1 4\n"], "outputs": ["YES\nNO\nYES\n"]}, "528": {"inputs": ["2\n1 10\n2 10\n"], "outputs": ["10\n4\n"]}, "529": {"inputs": ["3\n1\n2\n3\n"], "outputs": ["1/1\n3/4\n5/9\n"]}, "530": {"inputs": ["2\n3 6 1 1 5\n4 4 2 1 3\n"], "outputs": ["1 1 4\n-1\n"]}, "531": {"inputs": ["5\n1 2\n2 1\n5 10\n10 9\n19 1\n5\n1 2\n2 1\n5 10\n10 9\n20 1\n"], "outputs": ["3\n4\n"]}, "532": {"inputs": ["4\n"], "outputs": ["5\n"]}, "533": {"inputs": ["2\n2 6\n2 3 4 2 1 6\n4 6\n2 3 4 2 1 6\n"], "outputs": ["3\n0\n"]}, "534": {"inputs": ["3\n3 3\n1 2\n1 3\n2 3\n4 2\n1 2\n3 4\n5 0\n"], "outputs": ["3\n1\n0\n"]}, "535": {"inputs": ["2\n3 3 2 2\n4 4 2 3\n"], "outputs": ["24\n94\n"]}, "536": null, "537": {"inputs": ["3 1 \n3 1 3\n"], "outputs": ["2"]}, "538": {"inputs": ["2\n100 180 200 20 60\n130 131 132 1 72\n"], "outputs": ["SEBI\nFATHER\n"]}, "539": {"inputs": ["2\n1\n2\n"], "outputs": ["2\n8\n"]}, "540": {"inputs": ["1\n3 3\n1 2 4\n"], "outputs": ["3\n"]}, "541": {"inputs": ["4\n14\n5 4 2 2 3 2 1 3 2 7 4 9 9 9\n3\n1 2 1\n3\n1 1 1\n5\n1 2 3 4 1\n"], "outputs": ["3\n1\n1\n0\n"]}, "542": null, "543": {"inputs": ["4\n2\n1 2\n3\n1 3 2\n1\n2\n2\n3 2\n2\n1 2\n3\n1 3 2\n1\n2\n3\n3 2 4\n3\n3 2 5\n2\n2 100\n1\n2\n1\n100\n2\n1 2\n3\n1 3 2\n1\n2\n3\n3 2 2\n"], "outputs": ["yes\nno\nyes\nyes\n"]}, "544": {"inputs": ["3\n4\n0000\n8\n00001111\n4\n1001\n"], "outputs": ["a\nap\nj\n"]}, "545": {"inputs": ["3\n3 4\n3 1 2 3\n2 1 3\n2 1 2\n2 3\n3 1 2 3\n2 1 3\n2 3\n2 1 2\n2 1 3\n"], "outputs": ["sad\nsome\nall\n"]}, "546": {"inputs": ["1\n13 \n"], "outputs": ["2\n"]}, "547": {"inputs": ["3\n1\n2 3\n2\n4 5\n5 6\n2\n2 3\n3 5\n"], "outputs": ["NO\nNO\nYES\n"]}, "548": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["*\n*\n*\n*\n***\n***\n*\n*\n***\n***\n*****\n*****\n*\n*\n***\n***\n*****\n*****\n*******\n*******\n"]}, "549": {"inputs": ["5\n1 2 3 4 5\n"], "outputs": ["8\n"]}, "550": {"inputs": ["1\n4 5\n"], "outputs": ["2 7\n"]}, "551": {"inputs": ["4\nlikecs\nvenivedivici\nbhuvan\ncodechef\n"], "outputs": ["no\nyes\nno\nyes\n"]}, "552": {"inputs": ["2\n5 2\n8 4 5 2 10\n8 3\n1 1 1 1 1 1 1 1\n"], "outputs": ["17\n2\n"]}, "553": {"inputs": ["2\n3 5 7\n6 5 10\n8 6 3\n9 7 8\n"], "outputs": ["1\n2\n"]}, "554": {"inputs": ["2\n4 2\n9 3\n"], "outputs": ["25 56\n387 489"]}, "555": {"inputs": ["2\n5\n2 3 5 1 2\n3\n1 2 3\n"], "outputs": ["3\n3\n"]}, "556": {"inputs": ["5\n1\n2\n3\n50\n12233443\n"], "outputs": ["0 1\n-1 1\n-1 0\n2 4\n-1749 812"]}, "557": {"inputs": ["1\n5 3\n1 3 5\n2 5 2\n3 4 7\n"], "outputs": ["202\n"]}, "558": {"inputs": ["3 4\nF 3 \nS 2\nO 2\nS 1\nF 2\nO 2\nF 4\n2 3 8 1 1 \n"], "outputs": ["15"]}, "559": {"inputs": ["5\n3\n0 0\n1 1\n2 1\n3\n0 0\n1 0\n6 1\n3\n0 0\n1 0\n1 1\n4\n0 0\n1 0\n1 1\n6 1\n6\n0 0\n1 0\n1 1\n2 1\n2 2\n3 2\n"], "outputs": ["yes yes\nyes yes\nno yes\nno yes\nno no\n"]}, "560": null, "561": {"inputs": ["2 \n4 9\n5 2 2 4\n4 9\n5 2 18 3\n"], "outputs": ["YES\nNO\n"]}, "562": {"inputs": ["8 8\n00101010\n00010101\n10101010\n01010101\n10101010\n01010101\n10101010\n01010101\n4\n1 2 0 1001\n"], "outputs": ["7\n8\n6\n8\n"]}, "563": {"inputs": ["1\n4\n10 2 5 50\n2\n1 3\n2 4\n"], "outputs": ["17\n57\n"]}, "564": null, "565": {"inputs": ["1\n7 7\n3 1 6 7 2 5 4\n1\n2\n3\n4\n5\n6\n7\n"], "outputs": ["0\n1\n1\n2\n1\n0\n0\n"]}, "566": null, "567": {"inputs": ["3\n4\n1 5 5 5\n4\n1 1 1 5\n3\n5 5 2\n"], "outputs": ["yes\nYes\nNo\n"]}, "568": {"inputs": ["2\n4\n1 2\n1 3\n1 4\n7\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n"], "outputs": ["YES\n1 2 3 4\nNO"]}, "569": {"inputs": ["5\n8\n9\n20\n32\n109\n"], "outputs": ["2\n3\n5\n4\n4"]}, "570": {"inputs": ["2\nkarp\nabcd\n"], "outputs": ["22\n24"]}, "571": {"inputs": ["3\n2 4 4\n3 2 3 4\n4 3 15 9 6\n"], "outputs": ["1 1\n2 3 4\n1 5 3 2\n"]}, "572": null, "573": {"inputs": ["2\n2 1\n3 2\n"], "outputs": ["1\n4\n"]}, "574": null, "575": {"inputs": ["4\n<<<\n<><\n<=>\n<=<\n"], "outputs": ["4\n2\n2\n3\n"]}, "576": {"inputs": ["2\nabc\naba\n", "3\nabcde\nabcdea\nxyz\n"], "outputs": ["4\n6\n", "16\n48\n0"]}, "577": {"inputs": ["act\n2\ncat\ndog\n"], "outputs": ["yes\nNo\n"]}, "578": {"inputs": ["3\n10 2\n8 5\n6 1\n"], "outputs": ["12\n3\n9\n"]}, "579": {"inputs": ["5\n3 6\n2 1 6\n3 6\n2 1 5\n3 7\n2 4 6\n3 7\n1 2 4\n3 7\n1 2 6\n"], "outputs": ["2 1 3\n-1\n-1\n-1\n2 3 1\n"]}, "580": {"inputs": ["4\n1\n3\n5\n7\n"], "outputs": ["1\n111\n111\n111\n11111\n11 11\n1 1 1\n11 11\n11111\n1111111\n11   11\n1 1 1 1\n1  1  1\n1 1 1 1\n11   11\n1111111\n"]}, "581": {"inputs": ["2\n4 10 2\n2 2 3 1\n4 12 3\n6 5 7 3\n"], "outputs": ["YES \nNO"]}, "582": {"inputs": ["1\n)())((()\n3\n1 7 6\n"], "outputs": ["3\n8\n-1\n"]}, "583": {"inputs": ["2\n1\n-1\n2\n1 2\n"], "outputs": ["NO\nYES\n"]}, "584": {"inputs": ["3\n"], "outputs": ["1\n"]}, "585": {"inputs": ["5\n4 1\n5\n6 2\n2 4\n1 4\n7 16 8 29\n1000000000 1\n998244353\n1 1\n20201220\n"], "outputs": ["3\n4\n0\n1755647\n0\n"]}, "586": {"inputs": ["1\n10 5\namigoes  1\nbannermen 1\nmonarchy 4\noutliers 5\niniciador 10\naegimos 2\niiiacdnor 1\neilorstu 1\ngimosae 3\nmnachroy 7\n"], "outputs": ["iniciador 11\nmonarchy 11\namigoes 6\noutliers 6\nbannermen 1\n"]}, "587": {"inputs": ["2\n10 16\n"], "outputs": ["8 18"]}, "588": {"inputs": ["3\n4 \n0 90 180 270\n2\n90 210\n2\n0 1\n"], "outputs": ["0\n1\n358\n"]}, "589": {"inputs": ["4\n####\n##.#..#\n##..#.#\n##.#....#\n"], "outputs": ["0\n2\n1\n2\n"]}, "590": {"inputs": ["2\n3 2 3\n1 2 3\n3 3 3 \n1 2 3\n"], "outputs": ["5\n15\n"]}, "591": {"inputs": ["1\n3\n"], "outputs": ["37"]}, "592": {"inputs": ["3\ncodechef\n2\ncode\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nppi\n"], "outputs": ["Tracy\nTracy\nTeddy\n"]}, "593": {"inputs": ["2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nabcdefghijklmopqrstuvwz\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nthequickbrownfoxjumpsoverthelazydog\n"], "outputs": ["63\n0\n"]}, "594": {"inputs": ["3 2\n1 -2 3\n"], "outputs": ["0.5\n"]}, "595": {"inputs": ["abba\n"], "outputs": ["7\n"]}, "596": {"inputs": ["5\n0 1\n1 1\n2 1\n1 3\n4 6\n"], "outputs": ["0\n1\n4\n5\n46\n"]}, "597": {"inputs": ["1\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n"], "outputs": ["27\n"]}, "598": {"inputs": ["4 1\n5 -1 7 0\n"], "outputs": ["2 8 0 7"]}, "599": {"inputs": ["2\n6\n1 1 2 1 1 1\n6\n1 1 2 1 1 2\n"], "outputs": ["3\n0\n"]}, "600": {"inputs": ["1\n9\n"], "outputs": ["3\n"]}, "601": {"inputs": ["4\n2 5\n9 7\n15 6\n9 3\n"], "outputs": ["3"]}, "602": {"inputs": ["Mai Hu Jiyaan\n"], "outputs": ["Hu Mai Hu Hu Hu Jiyaan Hu"]}, "603": {"inputs": ["2\n1\n2\n"], "outputs": ["ba\ncba"]}, "604": {"inputs": ["2\n3 3\n1 2 1\n2 3 2\n1 2 1\n3 4\n0 0 0 0\n0 0 0 0\n0 0 4 0\n"], "outputs": ["Stable\nUnstable\n"]}, "605": {"inputs": ["5\n1 1\nR\n2 3\nLLRU\n3 2\nLLRU\n4 3\nULURUDRDLD\n3 6\nRURUR\n"], "outputs": ["unsafe\nsafe\nunsafe\nsafe\nsafe\n"]}, "606": {"inputs": ["\t2\n"], "outputs": ["\tno\n"]}, "607": {"inputs": ["2\n3\n2 2 3\n4\n2 3 3 2\n"], "outputs": ["1\n2"]}, "608": {"inputs": ["2\n10000\n+5 -3 -2 +10 +15\n6256250\n-24 +22 +4 -16 +20\n"], "outputs": ["+26.2634\n-2.79977"]}, "609": {"inputs": ["2 \n6 5 \n10 5 5 3 2 1 \n1 1\n100\n"], "outputs": ["6\n101\n"]}, "610": {"inputs": ["3\n3\n1 0 1\n7\n1 0 0 0 0 0 1\n11\n0 1 0 0 0 0 0 1 0 0 1\n"], "outputs": ["NO\nYES\nNO\n"]}, "611": {"inputs": ["4\n4\n1 1 2 3\n4\n2 1 3 3\n5\n5 4 4 3 1\n5\n3 2 1 1 4\n"], "outputs": ["Truly Happy\nPoor Chef\nPoor Chef\nTruly Happy\n"]}, "612": {"inputs": ["2\n11111110\n10101010101010\n"], "outputs": ["Bad\nGood\n"]}, "613": null, "614": {"inputs": ["1\n4 \n1 2 3 4\n3\n2 1 2\n2 3 4\n3 1 2 3\n"], "outputs": ["6"]}, "615": {"inputs": ["1\n8 3\n1 2 3 4 5 6 7 8\n2 3\n1 6\n5 8\n"], "outputs": ["5\n21\n26\n"]}, "616": {"inputs": ["2\n4 5\nN P N N P\nN N P N N\nN P N N N\nP N N N N\n3 3\nN P P\nP P P \nP P N\n"], "outputs": ["10\n6\n"]}, "617": {"inputs": ["$1$\n$4$ \n$1$ $2$\n$4$ $3$\n$3$ $5$ \n$2$ $4$ \n"], "outputs": ["$3$   \n"]}, "618": {"inputs": ["1\n5 3\n8 6 9 4 10\n"], "outputs": ["24\n"]}, "619": {"inputs": ["3\n1 3 2\n0 3 2\n34 55 2\n"], "outputs": ["CHEF\nCOOK\nCHEF\n"]}, "620": {"inputs": ["2\n5 3\n2 4 2 4 2\n8 5\n9 3 5 7 8 11 17 2\n"], "outputs": ["5\n3\n"]}, "621": {"inputs": ["1\n4\ngrace graceful disgraceful gracefully\n"], "outputs": ["grace\n"]}, "622": {"inputs": ["2\n6 2 10 10\nULRDDL\n4 4\n5 5\n4 2 10 10\nRUDL\n1 1\n9 9\n"], "outputs": ["1.41421356237\n2.00000000000"]}, "623": {"inputs": ["5\n5\n3\n6\n7\n1\n"], "outputs": ["1\n3\n5\n6\n7"]}, "624": {"inputs": ["2\n1\n2\n"], "outputs": ["0 1\n2 1"]}, "625": {"inputs": ["2\n3\n100000000 900000000 100000000\n1\n900000000\n"], "outputs": ["2\n0"]}, "626": {"inputs": ["2\n2 chef\n4 enjoyourapplepie\n"], "outputs": ["cehf\neayejpuinpopolre"]}, "627": {"inputs": ["2 5\n"], "outputs": ["6\n"]}, "628": {"inputs": ["3\nW\nBW\nBWBB\n"], "outputs": ["Chef\nAleksa\nAleksa\n"]}, "629": {"inputs": ["3\n1 1 1 1\n1\n2\n3\n1 1 1 1\n2\n4\n6\n3 2 2 2\n1 2 3\n2 4\n6 8\n"], "outputs": ["2\n4\n4\n"]}, "630": {"inputs": ["1\n5 4 3\n1 1 2 2 3\n1 2\n1 3\n2 4\n2 5\n", "1\n5 4 5\n1 1 2 2 3\n1 2\n1 3\n2 4\n2 5\n"], "outputs": ["3\n", "-1\n"]}, "631": {"inputs": ["5858 1234\n"], "outputs": ["1624\n"]}, "632": {"inputs": ["4\n4 0\n4 47\n1 0\n1 1\n"], "outputs": ["OFF\nON\nOFF\nON"]}, "633": {"inputs": ["1\n5\n4\n7\n6\n3\n1\n"], "outputs": ["7"]}, "634": {"inputs": ["06454\nC0D3C43F\n"], "outputs": ["6454\n3943\n"]}, "635": {"inputs": ["5 3\n2 2 3 3 5\n"], "outputs": ["18\n"]}, "636": {"inputs": ["6 20 3 1 1 2 5 10\n", "6 13 1 2 3 4 5 4 \n"], "outputs": ["1\n", "3\n"]}, "637": {"inputs": ["2\n4 2\n8 6\n"], "outputs": ["-1\n(())(())\n"]}, "638": {"inputs": ["3\n2 1\naa\n2 1\nd\n12 3\ncdmn\nqweewef\nqs\n"], "outputs": ["Case 1:\n1\nCase 2:\n52\nCase 3:\n443568031\n71288256\n41317270\n"]}, "639": {"inputs": ["3\naaaabccc\naabbcc\nppppmmnnoooopp\n"], "outputs": ["Dynamic\nNot\nDynamic\n"]}, "640": {"inputs": ["2\n2 2\n4 6\n"], "outputs": ["0\n3\n"]}, "641": {"inputs": ["6\n10\n20\n25\n40\n30\n30\n4 5\n1 3\n3 4\n2 3\n6 4\n"], "outputs": ["70"]}, "642": {"inputs": ["2\n3 2\n3 2 3\n2 1\n5 6\n"], "outputs": ["1.5000000000\n2.0000000000"]}, "643": {"inputs": ["1\n3\n2 3 5\n2 1 2\n1 1 1\n"], "outputs": ["540\n"]}, "644": {"inputs": ["1\n"], "outputs": ["Yes\n"]}, "645": {"inputs": ["1\n3\n2\n"], "outputs": ["2\n"]}, "646": {"inputs": ["3\nabccd\nabbac\naaaa\n"], "outputs": ["3\n1\n0\n"]}, "647": {"inputs": ["2\n1 5\n"], "outputs": ["5\n"]}, "648": {"inputs": ["5 3\n1 2 3 4 5\n1 1 2\n2 3 4 -1\n1 1 2\n"], "outputs": ["3\n4\n"]}, "649": {"inputs": ["3\n4 4\n1010\n0010\n1001\n0100\nLRDU\n4 3\n000\n010\n001\n101\nLRL\n3 2\n01\n10\n00\nD\n"], "outputs": ["0011\n0011\n0001\n0001\n000\n100\n100\n110\n00\n00\n11\n"]}, "650": {"inputs": ["1\n"], "outputs": ["3\n"]}, "651": {"inputs": ["2\n5\n1 2 2 3 5\n9\n1 2 2 3 3 5 8 8 9\n"], "outputs": ["3\n5\n"]}, "652": {"inputs": ["2\nabc\nacb\nAB\nba\n"], "outputs": ["first\nfirst"]}, "653": {"inputs": ["1\n200\n100\n", "2\n100 200\n150\n"], "outputs": ["0\n", "1\n"]}, "654": null, "655": {"inputs": ["3\n3 3 4\n2 7 3\n3 1 4\n7 6 5\n3 3 4\n2 8 3\n"], "outputs": ["4\n-1\n-1"]}, "656": {"inputs": ["5\n"], "outputs": ["4\n"]}, "657": {"inputs": ["----------\n- First line will contains $m$, $n$ for the size of the 2-D array. \n- Contains $m$ lines of $n$ space-separated values each. \n", "3 4  \n0 0 1 1  \n1 0 1 0  \n1 1 0 0  \n"], "outputs": ["----------\nSingle integer which is the maximum score obtained by the sum of binary numbers.\n", "39"]}, "658": {"inputs": ["2\n7\n100 1 10 3 20 25 24\n5\n3 3 2 4 1\n"], "outputs": ["7\n6\n"]}, "659": null, "660": {"inputs": ["2\n2\n10\n"], "outputs": ["1\n0\n"]}, "661": {"inputs": ["2 20\n5\n3\n"], "outputs": ["yes\nno\n"]}, "662": {"inputs": ["1\n3 \n"], "outputs": ["114\n"]}, "663": {"inputs": ["2\n1 rga\n2 cab\n"], "outputs": ["arg\nabc\n"]}, "664": {"inputs": ["4\n2 1 4\n2 4 4\n2 5 4\n2 8 4\n"], "outputs": ["0\n3\n10\n609\n"]}, "665": {"inputs": ["2\n3 3\n2500 2500 2520\n10 -5 -20\n10 15 20\n-15 17 13\n2 3\n2125 2098\n-20 10 -10\n10 10 -20\n"], "outputs": ["2\n2\n"]}, "666": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n12\n34\n123\n456\n789\n1234\n5678\n9101112\n13141516\n"]}, "667": {"inputs": ["3\n"], "outputs": ["6  \n"]}, "668": null, "669": {"inputs": ["3\n4 3 3\n1 2\n1 3\n1 4\n0\n4 3 3\n1 2\n1 3\n1 4\n1\n2 2\n4 3 3\n1 2\n1 3\n1 4\n1\n2 1\n"], "outputs": ["28\n4\n6"]}, "670": {"inputs": ["2\n1\n1\n3\n2 4 6\n"], "outputs": ["1\n6\n"]}, "671": {"inputs": ["2\n4 90\n3 8 6 5\n0 1 1 0\n4 90\n5 7 6 5\n0 1 1 0\n"], "outputs": ["yes\nno\n"]}, "672": {"inputs": ["2\n3  5  6  5\n2\n4  5\n6  8\n3  4  7  10\n1\n7  4\n"], "outputs": ["Test case : 1\nYES\nNO\n3.000000\nTest case : 2\nNO\n3.328201"]}, "673": {"inputs": ["1\n2 20 2 1\n"], "outputs": ["5\n"]}, "674": {"inputs": ["5\n3 3\n100\n010\n000\n000\n010\n001\n4 4\n0000\n0110\n0000\n0011\n1100\n0000\n1100\n0000\n3 3\n100\n000\n001\n000\n010\n000\n3 3\n000\n010\n000\n100\n000\n001\n3 3\n111\n000\n000\n001\n001\n001\n"], "outputs": ["0\n2\n1\n0\n2"]}, "675": {"inputs": ["3\n4\n3\n5\n"], "outputs": ["-1\n1 3 2\n2 3 1 5 4"]}, "676": {"inputs": ["2\n"], "outputs": ["john\n"]}, "677": {"inputs": ["14 3 2012\n"], "outputs": ["Wednesday"]}, "678": {"inputs": ["2\n7\n2 1 1 5 5 5 5\n5\n5 1 3 2 1\n"], "outputs": ["2\n1\n"]}, "679": {"inputs": ["6\n9 english\n6 mathematics\n8 geography\n-1\n3 graphics\n-1\n"], "outputs": ["1 mathematics\n0 graphics"]}, "680": {"inputs": ["1\n3 4\n2 -1 5\n3 3 2 4\n6\n3\n1 2 3 -2\n3\n1 1 3 1\n2 2 4 2\n3\n"], "outputs": ["72\n24\n90\n"]}, "681": {"inputs": ["3 3 2\n1 2 3\n"], "outputs": ["2\n"]}, "682": {"inputs": ["8\n1 6 5 4 3 2 7 8\n"], "outputs": ["2 6"]}, "683": {"inputs": ["123\n"], "outputs": ["123"]}, "684": {"inputs": ["7\n1\n2\n3\n4\n5\n6\n12\n"], "outputs": ["Grinch\nMe\nMe\nGrinch\nMe\nGrinch\nMe"]}, "685": {"inputs": ["2\n2 10\n0 0\n1 0\n2 10\n1 2\n1 1\n"], "outputs": ["yes\nno"]}, "686": {"inputs": ["3\n5 10 15\n2 10 14\n7 14 10\n"], "outputs": ["Elevator\nStairs\nStairs"]}, "687": {"inputs": ["4\n1\n1\n2\n2 1\n3\n3 2 1\n4\n1 3 2 4\n"], "outputs": ["YES\nYES\nNO\nYES\n"]}, "688": {"inputs": ["4\n00000000\n10101010\n10000001\n10010011\n"], "outputs": ["uniform\nnon-uniform\nuniform\nnon-uniform\n"]}, "689": {"inputs": ["2\n0 1\n1 -1\n"], "outputs": ["YES"]}, "690": {"inputs": ["6 2 5\n1 1 1 1 1 1\n"], "outputs": ["2\n"]}, "691": {"inputs": ["1\n7\n8 1 28 4 2 6 7\n"], "outputs": ["3\n"]}, "692": {"inputs": ["6\n1 2 5 3 10 6\n6\nA 1 5\nM 1 3\nm 5 6\ns 3 6\nU 1 7\nS 1 2\n"], "outputs": ["21\n5\n6\n5\n2\n"]}, "693": null, "694": {"inputs": ["1\n10\n8 10 6\n"], "outputs": ["2\n"]}, "695": {"inputs": ["3\n1 2 10\n2 1 10\n0 0 7\n"], "outputs": ["6\n5\n0"]}, "696": {"inputs": ["2\n7 4\n3 1 2 4 5 7 6\n1 2\n4 4\n6 7\n2 3\n4 2\n2 1 3 4\n2 4\n2 3\n"], "outputs": ["Possible\nImpossible"]}, "697": {"inputs": ["1\n5 3\n1 2 3 4 5\n"], "outputs": ["12"]}, "698": null, "699": {"inputs": ["5\n1 5 31\n4\n1 10 3\n23\n2 5 7\n20 36\n2 5 10\n19 2\n3 3 300\n1 1 1\n"], "outputs": ["0\n2\n7\n4\n1\n"]}, "700": null, "701": {"inputs": ["1\n5 2\n1 1 3 3 5\n"], "outputs": ["4\n"]}, "702": {"inputs": ["2\n4 5 10\n2 2 5\n"], "outputs": ["Yes\nNo"]}, "703": {"inputs": ["3\n3\n6\n8\n"], "outputs": ["2\n5\n8\n"]}, "704": {"inputs": ["2\n12 2 17\n523 3 11\n"], "outputs": ["5\n6\n"]}, "705": {"inputs": ["2\n2\n5\n"], "outputs": ["4\n84"]}, "706": {"inputs": ["4\n1 1 \n2\n2 4\n1 1\n3 6\n3 4 2\n3 6\n3 4 3\n"], "outputs": ["-1\n1\n2\n3\n"]}, "707": {"inputs": ["1\n5\n1 2\n1 3\n2 4\n2 5\n"], "outputs": ["1 2 3 4 5"]}, "708": {"inputs": ["1\n3 2\n"], "outputs": ["511620149\n"]}, "709": {"inputs": ["1\n1\n2\n"], "outputs": ["2"]}, "710": {"inputs": ["6\n"], "outputs": ["46"]}, "711": {"inputs": ["5\naa?\na???\n????\nasfhaslskfak\naf??avvnfed?fav?faf????\n"], "outputs": ["2\n6\n4\n2\n27\n"]}, "712": {"inputs": ["2\n5\n1 2 5 4 3\n1\n7\n"], "outputs": ["NO\nYES\n"]}, "713": {"inputs": ["3\n6\n1 2 3 4 5 6\n3\n2 3 4\n6\n22 5 6 33 1 4\n2\n4 15\n4\n1 3 4 2\n2\n1 2\n"], "outputs": ["Yes\nNo\nYes\n"]}, "714": {"inputs": ["3\n"], "outputs": ["4\n"]}, "715": {"inputs": ["A\n"], "outputs": ["27\n"]}, "716": {"inputs": ["2\n6 7\n2 5 8 10 3 44\n1 2 6\n0 2 3\n1 2 6\n0 4 6\n1 1 6\n0 1 6\n1 4 6\n2 2\n1 3\n0 2 2\n1 1 2\n"], "outputs": ["5 3 5 11\n1\n"]}, "717": {"inputs": ["1\n2 3\n"], "outputs": ["8"]}, "718": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["0 \n0 \n1 1 \n0 \n1 1 \n2 3 5 \n0 \n1 1 \n2 3 5 \n8 13 21 34  \n"]}, "719": {"inputs": ["3\n"], "outputs": ["1\n"]}, "720": {"inputs": ["2\n010001\n10\n"], "outputs": ["4\n1\n"]}, "721": {"inputs": ["5\n1\n2\n3\n4\n100\n"], "outputs": ["26\n52\n728\n1404\n508533804\n"]}, "722": {"inputs": ["2\n7 3 7\n1 1 6 1\n1 2 3 2\n5 2 5 2\n2 4 2 6\n6 2 6 4\n5 6 5 7\n7 1 7 4\n7 3 7\n1 1 6 1\n1 2 3 2\n5 2 5 2\n2 6 2 6\n6 2 6 4\n5 6 5 7\n7 1 7 4\n"], "outputs": ["3\n-1\n"]}, "723": {"inputs": ["2\n1\n1 2\n3\n1 3\n1 1\n1 0\n"], "outputs": ["2x^1\n3x^2 + 1"]}, "724": {"inputs": ["2\n3 2\n1 2\n2 1\n1\n"], "outputs": ["YES\n2 3 1\nNO"]}, "725": {"inputs": ["4\n5 3 2\n1 3 1 2 1\n5 3 3\n7 7 7 7 7\n5 3 3\n7 7 7 8 8\n4 3 1\n1 3 1 2\n"], "outputs": ["0\n1\n1\n-1\n"]}, "726": {"inputs": ["3\n6\ncplusplus\noscar\ndeck\nfee\nhat\nnear\n5\ncode\nhacker\nchef\nchaby\ndumbofe\n5\ncodechef\nchefcode\nfehcedoc\ncceeohfd\ncodechef\n"], "outputs": ["1\n2\n5\n"]}, "727": {"inputs": ["4\n3 8\n3 9\n2 4\n5 25\n"], "outputs": ["0\n0\n-1\n5\n"]}, "728": {"inputs": ["3\n11 2 4\n4 5 6\n10 8 -12\n"], "outputs": ["15\n"]}, "729": {"inputs": ["1\n3 3\n010\n000\n001\n"], "outputs": ["1 0 1\n2 1 1\n1 1 0"]}, "730": {"inputs": ["3\n2\n6 1 2 3 4 5 6\n9 3 3 3 4 4 4 5 5 5\n2\n5 2 3 4 5 6\n7 1 1 2 2 3 3 4\n3\n4 1 1 2 3\n4 1 2 2 3\n4 1 2 3 3\n"], "outputs": ["chef\n2\ntie\n"]}, "731": {"inputs": ["4 5\n1 2 10\n1 3 24\n2 3 2\n2 4 15\n3 4 7\n"], "outputs": ["19\n"]}, "732": {"inputs": ["3\n4\n1 3 3 4\n1 2 4 4\n2\n2 3\n3 2\n2\n3 3\n3 3\n"], "outputs": ["5\n0\n6\n"]}, "733": {"inputs": ["2\n2\nzy\n1\ncd\n"], "outputs": ["y\nc\n"]}, "734": {"inputs": ["2\n9\n1 1 1 2 2 2 3 3 3\n2\n1 1\n"], "outputs": ["Yes\n2 2 2 3 3 3 1 1 1\nNo"]}, "735": {"inputs": ["2 \n16 \n27\n"], "outputs": ["YES\nNO"]}, "736": {"inputs": ["1\nabba\n"], "outputs": ["2\n"]}, "737": {"inputs": ["2\n7 5\n6 5\n"], "outputs": ["YES\nNO\n"]}, "738": {"inputs": ["24\n"], "outputs": ["5"]}, "739": null, "740": {"inputs": ["2\n4 4 9\n1 4\n2 1 \n2 2\n2 3\n3 1\n3 3\n4 1\n4 2\n4 3\n4 4 1\n1 1\n"], "outputs": ["20\n4\n"]}, "741": {"inputs": ["6\n7\n"], "outputs": ["5\n7"]}, "742": null, "743": {"inputs": ["3\n5 1\n4 2\n10 10\n"], "outputs": ["NO\nNO\nYES\n"]}, "744": {"inputs": ["4\n1\n3\n5\n7\n"], "outputs": ["*\n*\n**\n*\n*\n**\n* *\n**\n*\n*\n**\n* *\n*  *\n* *\n**\n*\n"]}, "745": {"inputs": ["3\n3\n1 2 1\n4\n1 1 2 1\n5\n1 2 6 2 1\n"], "outputs": ["0\n1\n3\n"]}, "746": {"inputs": ["2\n1 2 3\n3\n3 1 5 2 6 4 7\n0\n"], "outputs": ["3\n105\n"]}, "747": {"inputs": ["5\n4\n1 3 2 4\n4\n1 3 2 4\n6\n1 10 10 10 20 15\n5\n1 1 2 2 3\n4\n1 2 3 3\n"], "outputs": ["YES\n1 2 3 4\nYES\n4 3 2 1\nNO\nYES\n1 2 3 2 1\nNO"]}, "748": null, "749": {"inputs": ["4\n0 7 8 10\n7 0 4 5 \n8 4 0 6\n10 5 6 0\n"], "outputs": ["9"]}, "750": {"inputs": ["4\n1 4 3 2\n5\n2 3 4 5 1\n1\n1\n0\n"], "outputs": ["ambiguous\nnot ambiguous\nambiguous"]}, "751": {"inputs": ["2\n2\n01\n1 2\n3\n100\n1 5 6\n"], "outputs": ["1\n5\n"]}, "752": {"inputs": ["5 6\nhtml text/html\nhtm text/html\npng image/png\nsvg image/svg+xml\ntxt text/plain\nindex.html\nthis.file.has.lots.of.dots.txt\nnodotsatall\nvirus.exe\ndont.let.the.png.fool.you\ncase.matters.TXT\n"], "outputs": ["text/html\ntext/plain\nunknown\nunknown\nunknown\nunknown"]}, "753": {"inputs": ["1\n1 2 3\n3 2 1\n1 3 4\n"], "outputs": ["7\n"]}, "754": {"inputs": ["2\n19\n385\n"], "outputs": ["0\n1"]}, "755": {"inputs": ["3\n38\n6\n34\n"], "outputs": ["2 4"]}, "756": {"inputs": ["2\n1 3\n4 3\n"], "outputs": ["1\n4\n"]}, "757": {"inputs": ["2\n5\nAUXFC\n6\nXBCDEF\n"], "outputs": ["Yes\n"]}, "758": {"inputs": ["1\n2 2\n"], "outputs": ["5.8831725615"]}, "759": {"inputs": ["1\n7\n"], "outputs": ["5\n"]}, "760": {"inputs": ["2\nz\nabcd\n"], "outputs": ["0\n144"]}, "761": {"inputs": ["1\n4 2 2 \n5 7 6 1\n3 3 1 1\n6 3\n1 4\n"], "outputs": ["3\n"]}, "762": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1 \n1 01 \n11 001 \n1 01 11 \n001 101 011 \n111 0001 1001 \n1 01 11 001 \n101 011 111 0001 \n1001 0101 1101 0011 \n1011 0111 1111 00001 \n"]}, "763": {"inputs": ["3\n2\n00\n00\n3\n101\n010\n4\n0110\n0011\n"], "outputs": ["Yes\nNo\nYes\n"]}, "764": {"inputs": ["5\neggs sugar flour salt\nsugar eggs milk flour\naa ab ac ad\nac ad ae af\ncookies sugar grass lemon\nlemon meat chili wood\none two three four\none two three four\ngibberish jibberish lalalalala popopopopo\njibberisz gibberisz popopopopu lalalalalu\n"], "outputs": ["similar\nsimilar\ndissimilar\nsimilar\ndissimilar\n"]}, "765": {"inputs": ["5\n1 2 3 4 5\n3\n2 1\n1 3 10\n2 2\n"], "outputs": ["1 120\n5 50\n"]}, "766": {"inputs": ["1\n5\n4 2 1 5 3\n"], "outputs": ["20 2"]}, "767": {"inputs": ["3\n18 7 6 \n23 10 27\n20 9 14\n"], "outputs": ["74\n"]}, "768": {"inputs": ["2\n3\n1 1\n5\n1 1 2 2\n"], "outputs": ["4\n9"]}, "769": {"inputs": ["1\n3 4\n"], "outputs": ["1"]}, "770": {"inputs": ["3\n1 1\n3\n2 1\n2 2\n5 2\n1 2 3 4 6\n"], "outputs": ["3\n2\n11\n"]}, "771": {"inputs": ["2\n7\n2 3\n4 5 7 8 9 10 14\n6\n5 7\n1 2 8 9 10 11\n"], "outputs": ["Yes\nMultan\nNo\n"]}, "772": {"inputs": ["2\n11010\n101001011\n"], "outputs": ["9\n18\n"]}, "773": {"inputs": ["4\n2\n3\n5\n6\n"], "outputs": ["2 1\n2 3 1\n2 1 4 5 3\n2 1 4 3 6 5\n"]}, "774": {"inputs": ["5 3 3\n0 3 8 5 12\n1 2\n1 3\n2 5\n"], "outputs": ["Yes\nYes\nNo\n"]}, "775": {"inputs": ["2\n4 3 5 3\n2 1 5\n3 2 8 2\n3 8\n"], "outputs": ["12\n-1\n"]}, "776": {"inputs": ["4\n2\n5\n200\n13\n"], "outputs": ["3\n3 3 2 \n5\n2 8 5 1 10 \n7\n12 10 15 11 19 13 15\n4\n5 4 4 10"]}, "777": {"inputs": ["2\n1.00 1.00 1.00 1.00\n3.02 7.23 5.20 6.00\n"], "outputs": ["3.141592654 3.141592654\n126.739919445 509.691992118"]}, "778": {"inputs": ["4\n12345\n31203\n2123\n2300\n"], "outputs": ["54321\n30213\n3212\n32"]}, "779": {"inputs": ["2\n2\n9 3\n3\n3 2 9\n"], "outputs": ["6.00000000\n4.00000000\n"]}, "780": {"inputs": ["2\n4 4\n6 5\n"], "outputs": ["EVEN\nODD"]}, "781": {"inputs": ["7 5\n1 0 0 1 1 1 1\n"], "outputs": ["1\n"]}, "782": null, "783": {"inputs": ["1\n3 0 0 -10 -10 0 0 10 0 0 -3 0 3\n"], "outputs": ["1.0000000000"]}, "784": {"inputs": ["4 4 6\n2 2\n3 2 \n3 2 \n4 3\n4 4\n4 3\n"], "outputs": ["3\n3\n-1\n4\n"]}, "785": {"inputs": ["4\n5\n8\n9\n1000000000\n"], "outputs": ["4 3\n5 3\n5 4\n35 30"]}, "786": {"inputs": ["2\n3\n5\n"], "outputs": ["7\n37\n"]}, "787": {"inputs": ["4\n10100\n1100001\n000000000111\n001110100011010\n"], "outputs": ["8\n10\n0\n48\n"]}, "788": {"inputs": ["3 \n1234\n124894\n242323\n"], "outputs": ["5\n5\n5"]}, "789": null, "790": null, "791": {"inputs": ["3\n5 2\n1 4 5 2 3\n3 1\n1 4 1\n4 2\n3 4 3 5\n"], "outputs": ["3\n2\n-1\n"]}, "792": {"inputs": ["2\n"], "outputs": ["1326\n"]}, "793": {"inputs": ["3 1\n3 5 11\n"], "outputs": ["2\n"]}, "794": {"inputs": ["3\n4 3\n1 2 1\n4 6\n1 2 1\n3 2\n2 2\n"], "outputs": ["2\n0\n0\n"]}, "795": {"inputs": ["2\n4 3 2\n5 4 1\n"], "outputs": ["1 2 3 2\n-1\n"]}, "796": {"inputs": ["3\n4\n1 2 3 4\n4\n1 -5 1 -5\n6\n-5 -1 -1 2 -2 -3\n"], "outputs": ["1 1 1 1\n4 3 2 1\n1 1 3 2 1 1\n"]}, "797": {"inputs": ["3\nsaturday sunday 2 4\nmonday wednesday 1 20\nsaturday sunday 3 5\n"], "outputs": ["2\nmany\nimpossible"]}, "798": {"inputs": ["5 3\n3 3 2 4 3 \n2 1 -1 -2 2  \n-1 2 4 3 -3  \n-2 2 3 2 1  \n3 -1 2 -1 2  \n1 2 2\n4 5 2\n4 2 1\n"], "outputs": ["YES\n19\n"]}, "799": {"inputs": ["3\n"], "outputs": ["2  \n"]}, "800": {"inputs": ["5\n3 2 7 9 4\n"], "outputs": ["9 2\n"]}, "801": {"inputs": ["3\n1\n1\n2\n2\n1 2\n2 1\n2\n1 1\n2 2\n"], "outputs": ["-1\n0\n1\n"]}, "802": {"inputs": ["2\n1 2 3\n369 428 797\n"], "outputs": ["2\n56\n"]}, "803": {"inputs": ["3\nAH KH QH TH JH\nKH 5S 3C 5C 7D\nQH QD 2S QC 2C\n"], "outputs": ["royal flush\npair\nfull house"]}, "804": {"inputs": ["2\n5\n12 34 45 5\n10\n5\n10 15 43 20\n5\n"], "outputs": ["possible\n4 100\nimpossible\n"]}, "805": {"inputs": ["2\n3\n4 6 8\n2 6 6\n1 4 3\n1\n7 7 4\n"], "outputs": ["12\n0\n"]}, "806": {"inputs": ["1\n56\n3 5 7\n4\n0\n1\n2\n3\n"], "outputs": ["56\n6\n2\n2\n"]}, "807": {"inputs": ["1\n4 2\n3 1 2 4\n1\n5\n"], "outputs": ["4\n3"]}, "808": {"inputs": ["2\n9\n7\n"], "outputs": ["504\n210\n"]}, "809": null, "810": {"inputs": ["----------\n1\n10 5\n1 3 5 4 5 6 7 8  4 5\n1 7\n1 3\n1 1\n0 2 7\n1 3\n"], "outputs": ["----------\n-1\n6\n5\n5"]}, "811": {"inputs": ["5 2\n5 3 -2 1 1\n"], "outputs": ["11\n"]}, "812": {"inputs": ["3\n2\n5 -5\n2\n-5 5\n3\n1 2 -3\n"], "outputs": ["5\n5\n4\n"]}, "813": null, "814": {"inputs": ["4\n7\n1 1 0 0 0 1 1\n8\n1 0 1 1 1 0 0 1\n4\n1 1 0 1\n4\n1 1 1 1\n"], "outputs": ["Yes\nNo\nYes\nNo\n"]}, "815": {"inputs": ["2\n"], "outputs": ["6\n-1\nThe possible 6 steps in the first test case are described in the following figure:"]}, "816": {"inputs": ["5\n26 1 42 15 3 \n2\n3\n4\n"], "outputs": ["42\n3"]}, "817": {"inputs": ["3\n5\n8 4 1 5 0\n5\n1 2 4 0 8\n2\n10 10\n"], "outputs": ["8\n15\n0\n"]}, "818": {"inputs": ["1\n5\n1 3 2 4 5\n3\n1 2 \n1 5\n3 4\n"], "outputs": ["ODD\nEVEN\nEVEN\n"]}, "819": {"inputs": ["2\n1 2\n2 3\n"], "outputs": ["YES\nYES"]}, "820": {"inputs": ["2\n2 2\n1 4\n2 7\n2 1\n1 4\n2 7\n"], "outputs": ["11.000000000\n7.333333333"]}, "821": {"inputs": ["1\n3\n3 7\n2 5\n6 9\n"], "outputs": ["100\n"]}, "822": null, "823": {"inputs": ["3\n1 2 0 3\n1 2 4 -1\n1 2 3 4\n"], "outputs": ["Yes\nYes\nNo\n"]}, "824": {"inputs": ["7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"], "outputs": ["2\n"]}, "825": {"inputs": ["1\n4\n"], "outputs": ["5"]}, "826": {"inputs": ["3\n1 1\n2 2\n2 3\n"], "outputs": ["2\n25\n273\n"]}, "827": {"inputs": ["3\n4 2\nabcb\n7 1\naayzbaa\n12 80123123\nabzbabzbazab\n"], "outputs": ["6\n2\n64197148392731290\n"]}, "828": {"inputs": ["4\n2\n1 1\n2\n0 0\n3\n0 1 0\n2\n0 1\n"], "outputs": ["0\n2200\n2300\n1200\n"]}, "829": {"inputs": ["4\n3 10 3 5\n"], "outputs": ["23\n"]}, "830": {"inputs": ["3\n5\nabcab\naabab\n3\naaa\naab\n2\nde\ncd\n"], "outputs": ["2\n3 1 2 4\n3 0 1 3\n-1\n-1\n"]}, "831": {"inputs": ["4\n2 3\n1 2\n3 5\n2 4 3\n3 100\n1 3 5\n4 3\n1 2 3 4\n"], "outputs": ["2 1\n4 2\n9 1\n2 2\n"]}, "832": {"inputs": ["1\n4 2\n1 2 3 4\n"], "outputs": ["1\n"]}, "833": null, "834": {"inputs": ["1\n3 2 \na b a \na c d \nb a b\n1 3\n3 3 \n"], "outputs": ["1 \n2\n"]}, "835": {"inputs": ["1\n2 2\n"], "outputs": ["Yes\n"]}, "836": {"inputs": ["2\n2\n1 2\n2 1\n4\n2 1 4 1\n2 4 1 4\n"], "outputs": ["1\n2\n"]}, "837": {"inputs": ["1\n10\n"], "outputs": ["10\n"]}, "838": null, "839": {"inputs": ["2\n20\n5\n8 7 2 10 5\n11\n4\n6 8 2 10\n"], "outputs": ["1\n0"]}, "840": {"inputs": ["4\n1\n3\n5\n7\n"], "outputs": ["*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n"]}, "841": {"inputs": ["1\n123\n"], "outputs": ["123231312"]}, "842": {"inputs": ["3\n5\n3\n4\n"], "outputs": ["1   1\n2 2\n3\n4 4\n5   5\n1 1\n2\n3 3\n1  1\n22\n33\n4  4\n"]}, "843": null, "844": {"inputs": ["3 6\nCLICK 1\nCLICK 2\nCLICK 3\nCLICK 2\nCLOSEALL\nCLICK 1\n"], "outputs": ["1\n2\n3\n2\n0\n1\n"]}, "845": null, "846": {"inputs": ["4 2 6\n"], "outputs": ["7\n"]}, "847": {"inputs": ["4\n2\n4\n5\n6\n"], "outputs": ["Arjuna\nArjuna\nBhima\nArjuna\n"]}, "848": {"inputs": ["1\n"], "outputs": ["100"]}, "849": {"inputs": ["4\n2 4 8 3\n"], "outputs": ["1\n"]}, "850": {"inputs": ["1              \n4                    \n4 4 7 6                    \n"], "outputs": ["9\n"]}, "851": {"inputs": ["2\n3 1\n3 2\n"], "outputs": ["2.0\n4.0\n"]}, "852": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["0\n01\n10\n010\n101\n010\n0101\n1010\n0101\n1010\n"]}, "853": {"inputs": ["2\n"], "outputs": ["Hamilton\n"]}, "854": {"inputs": ["2\n4\n1 2 3 4\n6\n1 2 3 5 1 4\n"], "outputs": ["prekrasnyy\nne krasivo\n"]}, "855": {"inputs": ["1\nTracy\n"], "outputs": ["ycarT"]}, "856": {"inputs": ["3\n3\nabc 0\nabc 1\nefg 1\n7\nfck 1\nfck 0\nfck 1\nbody 0\nbody 0\nbody 0\nram 0\n5\nvv 1\nvv 0\nvv 0\nvv 1\nvv 1\n"], "outputs": ["2\n6\n3\n"]}, "857": null, "858": {"inputs": ["3\n1\n5\n8\n"], "outputs": ["1\n4\n8\n"]}, "859": {"inputs": ["2\n4 2\n5 5\n"], "outputs": ["2\n0\n"]}, "860": null, "861": null, "862": {"inputs": ["1\n3 3 3\n15 8 10\n"], "outputs": ["9"]}, "863": {"inputs": ["6\n10\n20\n25\n40\n30\n30\n4 5\n1 3\n3 4\n2 3\n6 4\n"], "outputs": ["90"]}, "864": null, "865": {"inputs": ["2\n2\n3\n"], "outputs": ["0\n2\n"]}, "866": {"inputs": ["3\n3\n1 1 1\n3\n3 0 0\n3\n2 2 0\n"], "outputs": ["2 3 1\n-1\n-1\n"]}, "867": null, "868": {"inputs": ["1\n3 3\n1 2 3\n"], "outputs": ["3\n"]}, "869": {"inputs": ["techtrishna online event\nonlin\n"], "outputs": ["Y"]}, "870": {"inputs": ["4\n010111101\n1011100001011101\n0110\n111111\n"], "outputs": ["2\n3\n0\n0\n"]}, "871": {"inputs": ["10\n3 3\nR--\n---\n--U\n1 4\nR--R\n2 2\n--\n--\n1 4\nR--L\n1 4\n-R-L\n1 4\n-R#L\n3 3\nR-D\n-#-\nR-U\n3 3\nR-D\n---\nR#U\n3 3\n-D-\nR-L\n-U-\n1 7\nRLLLLLL\n"], "outputs": ["1\n0\n0\n0\n1\n0\n3\n2\n6\n3"]}, "872": {"inputs": ["1\n6 2 3 3\n"], "outputs": ["Win\n"]}, "873": {"inputs": ["2\nAAB\nAABE\n"], "outputs": ["501\n-1"]}, "874": {"inputs": ["2\n5 4 10\n10 24 30 19 40\n5 4 16\n7 16 35 10 15\n"], "outputs": ["2\n4\n"]}, "875": {"inputs": ["3\n2 6 4\n-4 10\n1 1 -1\n2\n2 0 7\n3 4\n"], "outputs": ["1\n0\n2\n"]}, "876": {"inputs": ["2\n"], "outputs": ["NO\n"]}, "877": {"inputs": ["5\n0 1 1 1\n1 4 1 5\n4 2 1 7\n3 7 2 10\n8 2 3 15\n"], "outputs": ["No\nNo\nYes\nYes\nYes\n"]}, "878": {"inputs": ["1\n4 3\n2 4 8 16\n"], "outputs": ["3"]}, "879": {"inputs": ["2\n10 3\n"], "outputs": ["18 \n"]}, "880": {"inputs": ["2\n5 \n12\n"], "outputs": ["78.5\n"]}, "881": {"inputs": ["2\n4\n1 4 2 3\n1\n5\n"], "outputs": ["6\n1\n"]}, "882": {"inputs": ["4\nabcd\nxyz\nabcd\nbcda\naabc\nacaa\nCodechef\nelfedcc\n"], "outputs": ["0\n4\n3\n5\n"]}, "883": {"inputs": ["1\n4\n3 2 2 2\n"], "outputs": ["1\n"]}, "884": {"inputs": ["1\n8 6\n"], "outputs": ["266304 88\n"]}, "885": {"inputs": ["2\n2\n4\n"], "outputs": ["1\n2\n"]}, "886": {"inputs": ["1\n10\n5 15 1 66 55 32 40 22 34 11\n38\n"], "outputs": ["35 41\n"]}, "887": {"inputs": ["2\n3\n0 1 1\n1 1 0\n3\n0 1 5\n5 1 0\n"], "outputs": ["Yes\nNo"]}, "888": {"inputs": ["codechef\nchefcode\n3\n4\n12\n1455\n"], "outputs": ["0\n1\n181\n"]}, "889": {"inputs": ["1\n9\nPAAPPAPPP\n"], "outputs": ["1\n"]}, "890": {"inputs": ["3\n2\n**\n**\n3\n***\n*..\n3\n*..\n.*.\n"], "outputs": ["2\n3\n1\n"]}, "891": {"inputs": ["3 5\n6\n2\n9\n7\n5\n"], "outputs": ["2\n0\n1\n3\n1"]}, "892": {"inputs": ["1\n2 2\n3 4\n"], "outputs": ["2 \n"]}, "893": {"inputs": ["4 10 2\n"], "outputs": ["138\n"]}, "894": {"inputs": ["2\n3\n0 1 0\n1 0 0\n0 0 0\n0 0 1\n0 0 1\n1 1 0\n4\n0 0 1 0\n0 0 0 0\n1 0 0 1\n0 0 1 0\n0 0 1 1\n0 0 0 0\n1 0 0 0\n1 0 0 0\n"], "outputs": ["1 2 3\n1 2 3\n1 4 2 3\n2 4 1 3\n"]}, "895": {"inputs": ["5\n1 2 1 2 2\n"], "outputs": ["4"]}, "896": {"inputs": ["4\n3\n-1 0\n0 1\n3 5\n1\n0 1\n3\n-2 -1\n-2 -1\n-2 0\n4\n4 6\n3 5\n-1 1\n1 2\n"], "outputs": ["9\nR+L+R+L+R+L+R+L+R+\n0\n"]}, "897": null, "898": {"inputs": ["1\n1 9\n"], "outputs": ["1 1\n"]}, "899": {"inputs": ["2 \n5 \n1 2 3 4 5 \n5\n5 4 3 2 1\n"], "outputs": ["3 \n5  \n"]}, "900": {"inputs": ["1\n1\n"], "outputs": ["10"]}, "901": {"inputs": ["2\n3 2 4\n3 4 1\n4 4 1\n1 1 1 1\n"], "outputs": ["2 1 3\n4 3 2 1\n"]}, "902": {"inputs": ["2\n2 Dee\n101\n010\n2 Dum\n101\n010\n"], "outputs": ["Dum\nDee"]}, "903": {"inputs": ["1\n1 1\n"], "outputs": ["1.60"]}, "904": {"inputs": ["3\n4 8\n5 1 4 2\n3 4\n3 1 2\n2 7\n5 5\n"], "outputs": ["YES\nYES\nNO\n"]}, "905": {"inputs": ["9\n"], "outputs": ["3"]}, "906": {"inputs": ["2\n3\n1 1\n2 1\n3 3\n4\n1 1\n2 2\n2 1\n3 3\n"], "outputs": ["1.0\n2.0\n"]}, "907": {"inputs": ["6\n18\n..H..T...HTH....T.\n3\n...\n10\nH..H..T..T\n2\nHT\n11\n.T...H..H.T\n7\nH..T..H\n"], "outputs": ["Valid\nValid\nInvalid\nValid\nInvalid\nInvalid\n"]}, "908": {"inputs": ["3\n5\n7\n"], "outputs": ["2\n3\n"]}, "909": {"inputs": ["1\n2\n1 3\n2 4\n"], "outputs": ["YES\n"]}, "910": {"inputs": ["2 \nTTTT\n1\nTTSTTTS\n3\n"], "outputs": ["4\n36\n"]}, "911": {"inputs": ["3\n1 5\n2 4\n100 100\n"], "outputs": ["27\n17\n441\n"]}, "912": {"inputs": ["1\n"], "outputs": ["1  \n"]}, "913": {"inputs": ["5 4 3\n2 3 4 1\n1 4 5 2\n3 3 5 3\n", "10 2 3\n1 2 10 2\n2 1 9 1\n4 1 7 1\n"], "outputs": ["16\n", "23\n"]}, "914": {"inputs": ["1\n3 4\n1 3 7 10\n9 2 4 11\n8 12 5 6 \n"], "outputs": ["1111\n1001\n0100"]}, "915": {"inputs": ["2\n2\n3 2\n2\n1 1\n"], "outputs": ["2\n1\n"]}, "916": {"inputs": ["1\n2 3\n"], "outputs": ["6"]}, "917": {"inputs": ["1   \n4 9\n4 4 2 6\n"], "outputs": ["1 4\n"]}, "918": null, "919": {"inputs": ["2\n4\n1 1 2 1\n11\n2 2 2 10 2 10 1 1 5 3 5\n"], "outputs": ["2\n3\n"]}, "920": {"inputs": ["3\ngb\nbgg\nbbgg\n"], "outputs": ["1\n2\n6\n"]}, "921": {"inputs": ["1\n7 3\n10 3 7 9 1 19 2\n1 4 6\n"], "outputs": ["43\n"]}, "922": {"inputs": ["1\n4 5\n1 2 3 4\n2 3 4 5 6\n"], "outputs": ["1 5 6"]}, "923": {"inputs": ["2\n2\n4\n"], "outputs": ["2\n3\n"]}, "924": {"inputs": ["20 5\n"], "outputs": ["0\n"]}, "925": {"inputs": ["1\n5\n-1 -1 1 2 1\n"], "outputs": ["1.5\n"]}, "926": {"inputs": ["1\n6 5\n"], "outputs": ["3\n"]}, "927": {"inputs": ["5 4\n7\n12 \n10 \n1  \n"], "outputs": ["17\n22  \n20\n20"]}, "928": {"inputs": ["2\n2\n20\n"], "outputs": ["1\n"]}, "929": {"inputs": ["3\n3\n0 1 1\n1 2\n1 3\n3\n0 1 2\n1 2\n1 3\n4\n2 2 2 2\n1 2\n1 3\n3 4\n"], "outputs": ["1\n1\n0\n"]}, "930": {"inputs": ["1\n4\n"], "outputs": ["1 2 4 7\n3 5 8 11\n6 9 12 14\n10 13 15 16\n"]}, "931": {"inputs": ["1\n5\n"], "outputs": ["6\n"]}, "932": {"inputs": ["2\n2\n1 2\n3\n1 2 3\n"], "outputs": ["1.500000000000000\n4.000000000000000\n"]}, "933": {"inputs": ["4\na1-b3\nd2-h8\na3 c4\nErrorError\n"], "outputs": ["Yes\nNo\nError\nError"]}, "934": null, "935": {"inputs": ["3\n10\n25\n1\n"], "outputs": ["0\n1\n-1"]}, "936": {"inputs": ["1\n4\n1 2 9 13\n5 6 10 14\n3 7 11 15\n4 8 12 16\n"], "outputs": ["2\n"]}, "937": {"inputs": ["5\nCES\nCS\nCCC\nSC\nECCC\n"], "outputs": ["yes\nyes\nyes\nno\nno\n"]}, "938": {"inputs": ["2\n3\n1 2 3\n4\n1 2 1 2\n"], "outputs": ["5\n4\n"]}, "939": {"inputs": ["4\n1 100\n1 10000\n1 100000\n4444 4447\n"], "outputs": ["0\n16\n640\n2\n"]}, "940": {"inputs": ["2\n"], "outputs": ["50\n"]}, "941": {"inputs": ["4\n1 1\n2 3\n4 6\n8 9\n"], "outputs": ["1\n3\n12\n36"]}, "942": {"inputs": ["1\n6 3\n2 4 1 12 3 5\n"], "outputs": ["3\n"]}, "943": null, "944": {"inputs": ["1\n10\n1 2 3 2 1 5 1 2 8 2\n"], "outputs": ["7\n"]}, "945": {"inputs": ["2\n2\n5\n"], "outputs": ["2\n3\n"]}, "946": {"inputs": ["2 2\n0 1\n1 1\n"], "outputs": ["0.333333 0.666667\n"]}, "947": {"inputs": ["11\nabacd\nbcdada\ndd\nabcd\nbcdd\nadcd\naddd\naa\nccd\nadd\nad\n"], "outputs": ["7"]}, "948": {"inputs": ["4 4\n"], "outputs": ["1\n"]}, "949": {"inputs": ["3\n8\n6 3 6 4 5 4 3 6\n9\n5 5 4 5 2 1 3 4 2\n6\n1 2 3 4 5 6\n"], "outputs": ["1\n2\n0\n"]}, "950": {"inputs": ["99\n"], "outputs": ["123"]}, "951": null, "952": {"inputs": ["2\naeiou\ndbcc  \n"], "outputs": ["0\n6\n"]}, "953": {"inputs": ["1\n"], "outputs": ["2\n"]}, "954": {"inputs": ["2\n1\n3\n"], "outputs": ["1\n45\n"]}, "955": {"inputs": ["3\n2\n7\n11\n"], "outputs": ["0\n1\n2\n"]}, "956": {"inputs": ["3\n0 0\n1 0\n0 1\n"], "outputs": ["0.1250000000"]}, "957": {"inputs": ["2\n"], "outputs": ["5\n"]}, "958": {"inputs": ["5\n1\n2\n3\n4\n5\n"], "outputs": ["*\n*\n***\n*\n* *\n*****\n*\n* *\n*   *\n*******\n*\n* *\n*   *\n*     *\n*********   \n"]}, "959": {"inputs": ["1\n4\n1 -3 2 -3\n"], "outputs": ["9\n"]}, "960": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1 \n1 10 \n11 100 \n1 10 11 \n100 101 110 \n111 1000 1001 \n1 10 11 100 \n101 110 111 1000 \n1001 1010 1011 1100 \n1101 1110 1111 10000 \n"]}, "961": {"inputs": ["1\n5\n5 4 1 3 2\n"], "outputs": ["8"]}, "962": {"inputs": ["3\n2\n3\n4\n"], "outputs": ["21\n1\n123\n21\n1\n4321\n123\n21\n1\n"]}, "963": {"inputs": ["1\n6\n4 16 32 6 8 2\n"], "outputs": ["2    \n"]}, "964": {"inputs": ["2\n"], "outputs": ["3\n"]}, "965": null, "966": null, "967": null, "968": {"inputs": ["8\n1 1 1 1 5 8 6\n1 2 3 4 5 15 70 10\n"], "outputs": ["1 3 4 5 6 21 96 26\n"]}, "969": {"inputs": ["2\n4 INDIAN\nCONTEST_WON 1\nTOP_CONTRIBUTOR\nBUG_FOUND 100\nCONTEST_HOSTED\n4 NON_INDIAN\nCONTEST_WON 1\nTOP_CONTRIBUTOR\nBUG_FOUND 100\nCONTEST_HOSTED\n"], "outputs": ["3\n1\n"]}, "970": {"inputs": ["1\n2\n1 3\n5\n0 0\n2 0\n0 4\n1 1\n1 2\n"], "outputs": ["0\n1\n2\n1\n-1\n"]}, "971": {"inputs": ["3\n5\n1 1 1 1 1\n4\n9 8 1 8\n2\n1 9\n"], "outputs": ["0\n2\n1\n"]}, "972": null, "973": {"inputs": ["2\n"], "outputs": ["10\n"]}, "974": {"inputs": ["2\n3 4 1 2\n10 20 3 7\n"], "outputs": ["YES\nNO\n"]}, "975": {"inputs": ["3\n5 3 0 1\n4\n10 2 4 6\n3 1 7 6\n4 3 1 5 9 7\n10 4 4 6\n3 1 7 6\n4 3 1 5 9 7\n"], "outputs": ["3\n2\n3\n"]}, "976": {"inputs": ["14\n1 1 3 4 2 2 3 3 3 1 2 4 4 4\n"], "outputs": ["2 6 8"]}, "977": {"inputs": ["2\n9\nsharechat\n4\nchef\n"], "outputs": ["shizxvzsg\nsxuv\n"]}, "978": {"inputs": ["1\n3\n"], "outputs": ["8\n"]}, "979": {"inputs": ["1 3 1\n"], "outputs": ["6"]}, "980": {"inputs": ["2\n9 1 2\n123456 123456 123456\n"], "outputs": ["45\n131351258112\n"]}, "981": null, "982": null, "983": {"inputs": ["5\nCODING\n2\n1 C\n2 D\n"], "outputs": ["1\n1"]}, "984": {"inputs": ["2\n4\n1 2 1 3\n5\n5 4 1 2 3\n"], "outputs": ["2\n3\n"]}, "985": {"inputs": ["9\n2 \n3 \n7 \n8 \n14 \n39 \n145 \n76 \n320\n", "14\n2\n11 \n16 \n12 \n36 \n60 \n71 \n17 \n29 \n144 \n288 \n129 \n432 \n993\n"], "outputs": ["3\n", "5"]}, "986": null, "987": {"inputs": ["2\n10 100 10 10\n100 10 5 10\n"], "outputs": ["Bolt\nTiger"]}, "988": {"inputs": ["3\n5\n2 3 4 5 6\n4\n7 7 7 7\n3\n1 1 3\n"], "outputs": ["14\n0\n2\n"]}, "989": {"inputs": ["3\n1 3 3\n5 7 2\n38657 76322 564\n"], "outputs": ["Paja\nChef\nPaja\n"]}, "990": null, "991": {"inputs": ["4 2 1\n1 1 1 1 1 1 1 1 1 100 1 \n1 1 1 3 1 1 1 2\n"], "outputs": ["13 13\n"]}, "992": {"inputs": ["1\n4\n0 0\n1000 0\n1000 2000\n0 2000\n2\n1000 10\n2000 15\n"], "outputs": ["50\n"]}, "993": null, "994": {"inputs": ["2\n5 36\n1 2 3 1 12\n4 54\n3 3 3 3\n"], "outputs": ["6\n4"]}, "995": {"inputs": ["7\n1 2 3 4 5 6 1\n3\n"], "outputs": ["12\n"]}, "996": null, "997": {"inputs": ["1\n5 3\n1 3 5\n2 5 2\n3 4 7\n"], "outputs": ["202\n"]}, "998": {"inputs": ["2 4\nRowAdd 1 3\nColAdd 2 1\nColAdd 1 4\nRowAdd 2 1\n"], "outputs": ["7\n"]}, "999": {"inputs": ["2\n2\n4\n"], "outputs": ["A\n12\nA\n12\nABC\n1234\n"]}, "1000": {"inputs": ["2\n4\n2 4 6 3\n5\n2 3 4 6 5\n"], "outputs": ["2\n"]}, "1001": {"inputs": ["1\n7\n375 750 723 662 647 656 619\n"], "outputs": ["2\n"]}, "1002": {"inputs": ["2\n5 3\n3 2 1 4 5\n5 4\n10 1 3 2 9\n"], "outputs": ["YES\nNO"]}, "1003": {"inputs": ["2\n2 3\n10 1\n20 2\n5 2\n5 2\n18 1\n5 5\n73 87\n69 13\n36 36\n77 46\n43 93\n49 46\n74 93\n78 87\n99 13\n59 36\n"], "outputs": ["8\n89\n"]}, "1004": {"inputs": ["3\n"], "outputs": ["6\n1 1 1 1 1 2\n"]}, "1005": {"inputs": ["5\n1 2 7 4 5\n1 2\n2 3\n2 4\n2 5\n7\nC 1 5\nF 1 5\nC 2 4\nC 1 2\nF 1 3\nF 3 4\nF 2 4\n"], "outputs": ["1\n4\n2\n1\n6\n5\n2\n"]}, "1006": {"inputs": ["3\n35 4\n42 4\n24 9\n"], "outputs": ["34\n24\n24\n"]}, "1007": {"inputs": ["2\n2\n7 2\n3\n2 2 4\n"], "outputs": ["2\n-1\n"]}, "1008": {"inputs": ["3\n2\n3 4\n3\n1 2 2\n5\n1 1 2 2 2\n"], "outputs": ["1\n3\n18\n"]}, "1009": {"inputs": ["3\n4\n2 3 5 7\n4\n3 4 8 16\n3\n6 10 15\n"], "outputs": ["11\n7\n1\n"]}, "1010": {"inputs": ["3\n5 1\n1 5 10 12 14\n5\n5 2\n5 8 13 16 21\n3 5\n5 3\n2 6 8 11 16\n2 3 5\n"], "outputs": ["1\n2\n1\n"]}, "1011": null, "1012": {"inputs": ["1\nabc\n"], "outputs": ["10"]}, "1013": {"inputs": ["5 3\n1 2                                                   \n3 4\n1 5\n"], "outputs": ["6\n"]}, "1014": {"inputs": ["2\n35566\n"], "outputs": ["65536\n"]}, "1015": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["2\n24\n68\n246\n81012\n141618\n2468\n10121416\n18202224\n26283032\n"]}, "1016": {"inputs": ["1\n5\n1 3\n4 4\n4 10\n1 11\n2 7\n"], "outputs": ["2\n"]}, "1017": {"inputs": ["2\n14 10 12 6 18 2\n10 10 10 10 10 3\n"], "outputs": ["No\nYes\n"]}, "1018": {"inputs": ["1\n3\n8 4 2\n"], "outputs": ["2\n"]}, "1019": {"inputs": ["7\n5\n1 2 3 2 1\n7\n2 3 4 5 4 3 2\n5\n1 2 3 4 3\n5\n1 3 5 3 1\n7\n1 2 3 4 3 2 1\n4\n1 2 3 2\n4\n1 2 2 1\n"], "outputs": ["yes\nno\nno\nno\nyes\nno\nno\n"]}, "1020": {"inputs": ["2\n2 1\n1 0\n3 5\n0 1 0\n"], "outputs": ["1\n2\n"]}, "1021": {"inputs": ["6\n4 8 6 3 12 9\n"], "outputs": ["9 3 6 12 4 8 \n"]}, "1022": {"inputs": ["4\n4\n1 1 1 1\n4\n1 1 1 2\n4\n1 -1 -1 4\n4\n1 -1 2 -1\n"], "outputs": ["YES\n1 1 1 1\nNO\nYES\n1 4 1 4\nNO"]}, "1023": {"inputs": ["5\n1\n2\n3\n4\n5\n"], "outputs": ["1\n1\n23\n1\n23\n456\n1\n23\n4 5\n6789\n1\n23\n4 5\n6  7\n89101112\n"]}, "1024": {"inputs": ["5\n100 4 2 2\n100 4 3 2\n100 4 3 3\n200 4 4 2\n10 3 2 2\n"], "outputs": ["POSSIBLE 70\nPOSSIBLE 55\nIMPOSSIBLE 20\nPOSSIBLE 140\nIMPOSSIBLE 4\nPOSSIBLE\n"]}, "1025": {"inputs": ["1\n4 3\n6 2 7 3\n1 2\n2 3\n3 4\n3\n2\n1\n"], "outputs": ["13 5 0 0\n"]}, "1026": {"inputs": ["5\n3 3 3\n2 4 2\n1 2 3\n25 12 2012\n1 1 2013\n"], "outputs": ["6\n4\n1\n578880\n0\n"]}, "1027": {"inputs": ["5\n3 1\n2 2\n3 3\n4 4\n6 3\n"], "outputs": ["impossible\nimpossible\naba\nabba\nabaaba\n"]}, "1028": {"inputs": ["3\n153\n11\n1634\n"], "outputs": ["FEELS GOOD\nFEELS BAD\nFEELS GOOD\n"]}, "1029": {"inputs": ["3\n6 3\n2 4 1\n3 2\n3 2\n8 2\n3 8\n"], "outputs": ["3 6\n5\n1\n"]}, "1030": {"inputs": ["3\n11 9 11\n10 2 2\n8 1 8\n"], "outputs": ["2\n10\n1\n"]}, "1031": {"inputs": ["4\n5 6\n6 10\n258303 89837245228\n616153 77878145466\n"], "outputs": ["3.00000 4.00000 5.00000\n-1\n-1\n285168.817674 546189.769984 616153.000000"]}, "1032": {"inputs": ["2\n1 2\n2 1\n"], "outputs": ["2\n2\n"]}, "1033": null, "1034": {"inputs": ["2\n2 3\n2 6\n"], "outputs": ["4\n5\n"]}, "1035": {"inputs": ["3\n5 5 2\n2 2\n1 2\n2 1\n10 11 62 14 15\n57 23 34 75 21\n17 12 14 11 53\n84 61 24 85 22\n43 89 14 15 43\n3 3 2\n0 0\n1 1\n1 1\n9 8 7\n5 6 4\n1 3 2\n2 2 1\n1 1\n2\n2\n5 6\n8 3\n"], "outputs": ["188\n24\n3\n"]}, "1036": {"inputs": ["4\n2 1 8 1\n11 1 7 1\n2 1 8 1\n11 1 9 1\n2 1 8 1\n3 1 3 -2\n2 1 8 1\n2 1 2 -2\n"], "outputs": ["yes\nno\nno\nyes\n"]}, "1037": {"inputs": ["1\n..P.P\n"], "outputs": ["Yes\n"]}, "1038": null, "1039": {"inputs": ["3\n0 5\n4 -5\n0 10000001\n"], "outputs": ["1\n2\n1\n"]}, "1040": {"inputs": ["1\n10 2\nhelloworld\n1 3\n1 10\n"], "outputs": ["NO\nYES"]}, "1041": {"inputs": ["1\n3\n"], "outputs": ["6 1 2\n"]}, "1042": null, "1043": {"inputs": ["2\n3 2\npiygu ezyfo rzotm\n1 piygu\n6 tefwz tefwz piygu ezyfo tefwz piygu\n4 1\nkssdy tjzhy ljzym kegqz\n4 kegqz kegqz kegqz vxvyj\n"], "outputs": ["YES YES NO \nNO NO NO YES"]}, "1044": {"inputs": ["3 \n12345\n31203\n2123\n"], "outputs": ["15\n9\n8"]}, "1045": {"inputs": ["1\ncodechef\n"], "outputs": ["173\n"]}, "1046": {"inputs": ["10\n3 2\n4 2\n1 1\n1 2\n1 3\n9 3\n9 11\n9 12\n9 1000\n8 11\n"], "outputs": ["Bob\nLimak\nLimak\nBob\nBob\nLimak\nLimak\nBob\nBob\nBob\n"]}, "1047": {"inputs": ["2\n3\n0 0\n0 1\n0 -1\n3\n0 1\n1 0\n-1 0\n"], "outputs": ["0.5\n0\n"]}, "1048": {"inputs": ["3\n1 0\n1 2 3\n1 1\n1 2 3\n1 1\n1 4 6\n"], "outputs": ["0.000000\n1.0000\n0.0\n"]}, "1049": null, "1050": {"inputs": ["3\n<<>>\n><\n<>>>\n"], "outputs": ["4\n0\n2"]}, "1051": {"inputs": ["3\n2\n3\n4\n"], "outputs": ["0\n*1\n**2\n0\n*1\n**2\n***3\n0\n*1\n**2\n***3\n****4\n"]}, "1052": {"inputs": ["3\n2 1\n9 3\n11 13\n"], "outputs": ["1 9\n3 2\n1 4\n"]}, "1053": {"inputs": ["1\n5\n0 1 0 0 1\n"], "outputs": ["3\n"]}, "1054": null, "1055": {"inputs": ["5 10\n1 2 3 4 5\n"], "outputs": ["31\n"]}, "1056": null, "1057": {"inputs": ["2\n4\n47\n"], "outputs": ["7\n74"]}, "1058": {"inputs": ["2\n3527\n47269\n"], "outputs": ["1305\n25047"]}, "1059": {"inputs": ["2\n1\n2\n"], "outputs": ["1\n"]}, "1060": {"inputs": ["1\n4\n"], "outputs": ["4\n"]}, "1061": {"inputs": ["2\n3^40|10^2\n"], "outputs": ["43\n"]}, "1062": {"inputs": ["4\n"], "outputs": ["4 4 4 4 4 4 4\n4 3 3 3 3 3 4\n4 3 2 2 2 3 4\n4 3 2 1 2 3 4\n4 3 2 2 2 3 4 \n4 3 3 3 3 3 4\n4 4 4 4 4 4 4"]}, "1063": {"inputs": ["3 \n1 2\n100 200\n40 15\n"], "outputs": ["1\n100\n10"]}, "1064": {"inputs": ["5\n????CIELIS???E?\n????CIELISOUR???F\nT?KEITE?SY\n????????\n???C???\n"], "outputs": ["CHEFCIELISACHEF\nCHEFCIELISOURCHEF\nTAKEITEASY\nCHEFCHEF\nAAACHEF\n"]}, "1065": {"inputs": ["1\n3 4\n0011\n0000\n0100\n"], "outputs": ["1 0 1 1 0"]}, "1066": null, "1067": {"inputs": ["1\n2\n"], "outputs": ["6\n"]}, "1068": {"inputs": ["2\n3 3\n4 4\n"], "outputs": ["NO\nYES\n"]}, "1069": {"inputs": ["3 \n1 2\n100 200\n10 40\n"], "outputs": ["3\n300\n50"]}, "1070": {"inputs": ["2\n8 7\n2 5 1\n1 4 1\n9 14 10\n20 7 9\n102 99 1\n199 202 1\n302 299 3\n399 402 3\n6 3 1\n10 15 10\n100 101 1\n201 200 1\n300 301 5\n401 400 5\n1000 1010 1020\n8 8\n2 8 2\n12 18 2\n22 28 4\n32 38 4\n48 42 2\n58 52 3\n68 62 1\n78 72 3\n3 6 3\n13 19 3\n21 25 3\n31 39 3\n46 43 4\n59 53 2\n65 61 4\n79 71 2\n"], "outputs": ["1\n4\n5\n6\n7\n8\n-1\n1\n2\n3\n4\n5\n6\n7\n8"]}, "1071": {"inputs": ["1\n2 2\n2 \n1\n1 \n1\n"], "outputs": ["ON\n"]}, "1072": {"inputs": ["1\n9\n"], "outputs": ["XXXDDD\n"]}, "1073": {"inputs": ["2 \n2 2\n3 4\n"], "outputs": ["4\n60"]}, "1074": null, "1075": {"inputs": ["2\n2\n3 4\n3\n1 3 5\n"], "outputs": ["henry\nDerek\n"]}, "1076": {"inputs": ["1\n5 3\n1 2\n2 3\n3 4\n3 5\n2 1 4 1\n2 2 4 2\n1 1 2 1\n"], "outputs": ["3\n5\n-1"]}, "1077": {"inputs": ["2\n4\nBegin on Road A\nRight on Road B\nRight on Road C\nLeft on Road D\n6\nBegin on Old Madras Road\nLeft on Domlur Flyover\nLeft on 100 Feet Road\nRight on Sarjapur Road\nRight on Hosur Road\nRight on Ganapathi Temple Road\n"], "outputs": ["Begin on Road D\nRight on Road C\nLeft on Road B\nLeft on Road A\n"]}, "1078": {"inputs": ["3\n3 1 2 2\n2 1 1 1\n3 2 2 1\n"], "outputs": ["2\n2\n2\n"]}, "1079": {"inputs": ["5\n447474\n228\n6664\n40\n81\n"], "outputs": ["4\n0\n1\n1\n0"]}, "1080": {"inputs": ["2\nABABAB\nABC\n"], "outputs": ["YES\nNO"]}, "1081": {"inputs": ["2\nHELLO\nHELL\n"], "outputs": ["BJQEI\nBJQE\n"]}, "1082": {"inputs": ["10\n10 12 6 8 1 19 0 5 13 17\n1 2\n1 3\n1 4\n3 10\n4 8\n8 9\n4 5\n5 7\n5 6\n3\n1 1\n2 3 20\n1 8\n"], "outputs": ["10\n23\n"]}, "1083": {"inputs": ["2\n2 2 3 2 1 1\n3 3 1 2 0 9\n"], "outputs": ["4\n8\n"]}, "1084": {"inputs": ["01001001\n"], "outputs": ["6\n"]}, "1085": {"inputs": ["0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"], "outputs": ["1\n"]}, "1086": {"inputs": ["3\n3 3\n1 1 -1\n4 8\n1 -1 -1 3\n3 10\n-1 -1 -1\n"], "outputs": ["3\n23\n150\n"]}, "1087": {"inputs": ["3 2\n1 2\n2 3\n"], "outputs": ["YES"]}, "1088": {"inputs": ["2\n1 0.5\n2 0.5\n"], "outputs": ["1000000000.0 0.0\n500000000.0 500000000.0\n"]}, "1089": {"inputs": ["1\n"], "outputs": ["4\n"]}, "1090": null, "1091": {"inputs": ["2\n5\n3\n"], "outputs": ["yes\nNO\n"]}, "1092": {"inputs": ["1\n4 2 3 10\n7 7 7\n4 6 10\n7 10 9\n9 9\n"], "outputs": ["4\n"]}, "1093": {"inputs": ["5\n1 2 3 4 5\n4\n1 2 3\n2 3 4\n1 1 1\n1 5 1000000000\n"], "outputs": ["2\n2\n0\n120"]}, "1094": {"inputs": ["3\n3\nnope qwerty hope\n5 \nbrain drain request grain nest\n4\nthese words dont rhyme\n"], "outputs": ["Case : 1\nhope nope\nqwerty\nCase : 2\nbrain drain grain\nnest request\nCase : 3\nthese\ndont\nwords\nrhyme\n"]}, "1095": {"inputs": ["5\n2 1 4 5 3 \n"], "outputs": ["2"]}, "1096": {"inputs": ["3 4 2\n15 21\n5 10\n7 25\n4 14 25 2\n13 21\n"], "outputs": ["8"]}, "1097": {"inputs": ["3\n2\n5 3\n4\n4 8\n1\n1 2\n"], "outputs": ["Yes 2\nNo\nYes 1\n"]}, "1098": {"inputs": ["2\n3\n1 2 3\n3\n1 2 1\n"], "outputs": ["4\n3"]}, "1099": {"inputs": ["3\n4\ntilak +\ntilak +\ntilak -\ntilak +\n3\nratna +\nshashi -\nratna -\n3\nbhavani -\nbhavani +\nbhavani -\n"], "outputs": ["1\n-2\n-1\n"]}, "1100": {"inputs": ["- $2 \\leq |p|,|q|,|r|,|a|,|b|,|c| \\leq 10^9$ \n\t1\n"], "outputs": ["\t3\n"]}, "1101": {"inputs": ["2\n7 2 13\n1 10 1\n1 14 2\n6 4 1\n2 2 1\n0 12 2\n2 11 2\n0 6 1\n8 10\n6 1 20\n1 5 1\n2 11 1\n4 0 1\n6 8 1\n0 11 1\n3 3 1\n9\n"], "outputs": ["2\n4\n"]}, "1102": {"inputs": ["2\n"], "outputs": ["3\n"]}, "1103": {"inputs": ["1\n3\n21 11 6\n"], "outputs": ["3\n"]}, "1104": {"inputs": ["4\n"], "outputs": ["0\n1\n5\n46\n"]}, "1105": {"inputs": ["3\n3\n2 2 2\n3\n1 2 3\n4\n2 3 4 5\n"], "outputs": ["4\n3\n7\n"]}, "1106": {"inputs": ["2\n5 5 4\n2 1 5 50\n1 2 4 20\n2 3 4 40\n2 4 5 50\n3 4 5 80\n10 10 5\n2 5 10 17300\n2 1 8 31300\n5 4 10 27600\n4 8 10 7000\n5 9 10 95900\n2 7 10 14000\n3 6 10 63800\n1 7 10 19300\n3 8 10 21400\n2 2 10 7000\n"], "outputs": ["140\n127200\n"]}, "1107": {"inputs": ["1\n9 12\n"], "outputs": ["75\n"]}, "1108": {"inputs": ["4 8 4\n1 2 1 2 5\n3 5 1 3 4\n1 2 4 5 11\n1 1 1 3 12\n"], "outputs": ["1\n"]}, "1109": {"inputs": ["2\n4\n5\n"], "outputs": ["YES\nNO"]}, "1110": {"inputs": ["2\n5\n1 4 1 2 2\n4\n2 3 2 3\n"], "outputs": ["1\n2"]}, "1111": {"inputs": ["3\n4\n3 5 3 4\n2\n5 7\n1\n4\n"], "outputs": ["3\n0\n0\n"]}, "1112": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n12\n3\n123\n45\n6\n1234\n567\n89\n10\n"]}, "1113": {"inputs": ["2\n5\n1 2 3 2 5\n6\n1 2 2 1 1 2\n"], "outputs": ["2 2\n1 3\n"]}, "1114": {"inputs": ["3\n4\n3 3 3 3\n6\n1 1 1 2 2 2\n4\n1 2 2 3\n"], "outputs": ["1.00000000\n0.20000000\n0.33333333"]}, "1115": {"inputs": ["2\n4\n1 2 3 4\n1 2\n2 3\n2 4\n5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n"], "outputs": ["24\n15\n"]}, "1116": {"inputs": ["6\n1 3 -4 2 2 -2\n"], "outputs": ["3\n"]}, "1117": {"inputs": ["1\n5 3 4\n1 1 3\n1 2 -4\n4 5 2\n1 2\n1 3\n1 1\n2 3\n"], "outputs": ["3 0 0 4 4\n"]}, "1118": {"inputs": ["1\n4\n1011\n"], "outputs": ["1"]}, "1119": {"inputs": ["6    5\n0    -2    -7    0    -1\n9    2    -6    2    0\n-4    1    -4    1    0\n-1    8    0    -2    1\n-10    1    1    -5    6\n-15    -1    1    5    -4\n"], "outputs": ["9    2\n-4    1\n-1    8"]}, "1120": {"inputs": ["2\n4 5\n2 1\n3 4\n1 1\n"], "outputs": ["5\n3\n"]}, "1121": {"inputs": ["3\n14:20\n02:10\n09:30\n"], "outputs": ["50 degree \n5 degree  \n105 degree\n"]}, "1122": {"inputs": ["2\n"], "outputs": ["Jhon       \nRavi       \n"]}, "1123": {"inputs": ["1\n4 2\n0 1\n1 2\n3\n0 2\n0 3\n2 1\n"], "outputs": ["YO\nNO\nYO\n"]}, "1124": {"inputs": ["3\n3 3 0\n1 2 2\n3 2 1\n1 2 1\n4 5 4\n2 3 4 5\n"], "outputs": ["2\n3\n3\n"]}, "1125": {"inputs": ["1\n5 10\n"], "outputs": ["50"]}, "1126": {"inputs": ["2\n1\n2\n"], "outputs": ["2\n7\n"]}, "1127": {"inputs": ["3\ngandhi\nmahatma gandhI\nMohndas KaramChand gandhi\n"], "outputs": ["Gandhi \nM. Gandhi \nM. K. Gandhi \n"]}, "1128": {"inputs": ["2\n7\n7 8 9 1 9 8 7\n6\n1 100 50 -51 1 1\n"], "outputs": ["3\n1\n"]}, "1129": {"inputs": ["1\n"], "outputs": ["2   \n"]}, "1130": {"inputs": ["2\n10 1\n10 20 30 40 50 60 90 80 100 1\n5 2\n9 80 27 72 79\n"], "outputs": ["10\n3\n"]}, "1131": {"inputs": ["1\n5 1\n5 2 1 2 5\n"], "outputs": ["2 5"]}, "1132": {"inputs": ["3\n1\n2\n3\n"], "outputs": ["1\n6\n90\n"]}, "1133": {"inputs": ["1\n3\n2 4 8\n"], "outputs": ["2 7"]}, "1134": null, "1135": {"inputs": ["1\n5 2\n"], "outputs": ["2 3 1 5 4"]}, "1136": {"inputs": ["2\n1 2\n4 3\n"], "outputs": ["2\n6\n"]}, "1137": {"inputs": ["1\n5\n10 2 1000 50 1000\n"], "outputs": ["Accepted\n"]}, "1138": {"inputs": ["3\n1\n0\n3\n0 0 0\n5\n0 1 2 1 4\n"], "outputs": ["0\n0\n3\n"]}, "1139": {"inputs": ["2\n"], "outputs": ["YES\n"]}, "1140": {"inputs": ["2\n3 3\n3 7\n"], "outputs": ["6\n7\n"]}, "1141": {"inputs": ["5 qwertyuiopasdfghjklzxcvbnm\nPh\nPcssi\nBpke_kdc_epclc_jcijsc_mihyo?\nEpcf_kdc_liswhyo_EIED_hy_Vimcvpcn_Zkdvp_siyo_viyecle.\nIpp!\n"], "outputs": ["Hi\nHello\nWhat are these people doing?\nThey are solving TOTR in Codechef March long contest.\nOhh!\n"]}, "1142": {"inputs": ["6\n78\n24\n68\n40\n39\n89\n"], "outputs": ["1\n2\n2\n3\n4\n1"]}, "1143": {"inputs": ["1\n"], "outputs": ["1929"]}, "1144": {"inputs": ["3\n2 1\n11\n2 2\n11\n4 1\n1001\n"], "outputs": ["1\n10\n0\n11\n2\n1010\n"]}, "1145": {"inputs": ["2\n17\n10\n"], "outputs": ["2111\n0\n"]}, "1146": null, "1147": {"inputs": ["3\n1\na\n9\nabbbcbddd\n6\nabcdef\n"], "outputs": ["0\n2\n5\n"]}, "1148": {"inputs": ["3\n1 2 3\n2 3 4\n2 3 5\n1 2 3\n2 3 4\n2 3 4\n5 6 5\n1 2 3\n2 3 4\n"], "outputs": ["yes\nno\nyes\n"]}, "1149": {"inputs": ["5\n?\n??\nab?\na?c\naba\n"], "outputs": ["26\n26\n1\n0\n1\n"]}, "1150": {"inputs": ["2\n"], "outputs": ["2\n"]}, "1151": {"inputs": ["1\n5 3\n0 1\n2 3\n3 4\n"], "outputs": ["2"]}, "1152": {"inputs": ["4\nflour-with-eggs 100\nchicken-ham -10\nflour-without-eggs 200\nfish-with-pepper 1100\n6\nf\nflour-with\nflour-with-\nc\nfl\nchik\n"], "outputs": ["fish-with-pepper\nflour-without-eggs\nflour-with-eggs\nchicken-ham\nflour-without-eggs\nNO"]}, "1153": {"inputs": ["3\n1 1 1 1\n2 2 1 1\n2 3 1 1\n"], "outputs": ["0\n2\n4"]}, "1154": null, "1155": {"inputs": ["1\n4\n0 4 0 4\n1 3 1 2\n2 3 1 3\n3 4 1 3\n"], "outputs": ["2"]}, "1156": {"inputs": ["3 \n1\n12\n-5\n"], "outputs": ["Thanks for helping Chef!\n-1\nThanks for helping Chef!"]}, "1157": {"inputs": ["1\n2 2 2\n1 2\n"], "outputs": ["0.8888888888888888\n"]}, "1158": {"inputs": ["6\nmilk 58\nCiel's Drink 80\nThe curry 2nd edition 888888\nrice omelet 85855\nunagi 1\nThe first    and last letters can be a space    358\n"], "outputs": ["3\n"]}, "1159": {"inputs": ["3\ngoogle\nbreakraekb\naman\n"], "outputs": ["SHANKY\nPANDEY\nANKU\n"]}, "1160": {"inputs": ["3\n3\n0 1\n2 2\n0 3\n2\n2 1\n1 2\n3\n1 1\n2 2\n3 3\n"], "outputs": ["1\n0 1\n2\n0 0\n2 Inf\n0\n"]}, "1161": {"inputs": ["4\nsm\nssm\nsms\nssmmmssss\n"], "outputs": ["mongooses\ntie\ntie\nsnakes\n"]}, "1162": {"inputs": ["5\n7\n4\n11\n1\n15\n"], "outputs": ["7\n0\n7\n-1\n7\n"]}, "1163": null, "1164": {"inputs": ["3 3\n16 24 60\n498 861 589\n14 24 62\n72 557 819\n16 15 69\n435 779 232\n"], "outputs": ["2\n1\n3"]}, "1165": {"inputs": ["3\n15 january\n31 august\n10 october\n"], "outputs": ["16 july\n1 march\n10 april"]}, "1166": {"inputs": ["5\n4 1 2 3 4\n4\n3\n4\n6\n1\n"], "outputs": ["2\n2\n0\n8\n"]}, "1167": {"inputs": ["$CodeSprInT$\n"], "outputs": [".c.d.s.p.r.n.t \n"]}, "1168": null, "1169": {"inputs": ["The no. of test cases (<100)\ntwo names (may include spaces) for each test case.\n", "2\nSHILPA\nAAMIR\nMATT\nDENISE\n"], "outputs": ["FLAMES result (Friends/Love/...etc) for each test case\n", "ENEMIES\nLOVE\n"]}, "1170": {"inputs": ["1\n5 3\n12 13 18 20 27216\n"], "outputs": ["10101\n"]}, "1171": {"inputs": ["5 3 11\n1 3\n1 10\n2 4\n2 7\n2 0\n3\n8\n100\n"], "outputs": ["4\n10\n110"]}, "1172": {"inputs": ["2\n47\n4477\n"], "outputs": ["1\n4"]}, "1173": {"inputs": ["1\n3\n5 2 7\n"], "outputs": ["2\n"]}, "1174": {"inputs": ["1\n4\n1 1 2 3\n"], "outputs": ["1"]}, "1175": {"inputs": ["1\n111\n"], "outputs": ["YESS(sunglass emo)"]}, "1176": {"inputs": ["1\n100\n"], "outputs": ["NO\n"]}, "1177": {"inputs": ["3\n2 1\n3 3\n10 5\n"], "outputs": ["2\n1\n252"]}, "1178": {"inputs": ["3\n2\n0 0\n6\n3 1 0 0 5 5\n3\n1 2 3\n"], "outputs": ["2\n4\n0\n"]}, "1179": {"inputs": ["5\n1\n2\n3\n4\n7\n"], "outputs": ["0\n0\n2\n2\n3"]}, "1180": {"inputs": ["2\n5 5 4 4\n5 2 3 1\n"], "outputs": ["5 5\n3 5\n"]}, "1181": {"inputs": ["2\n16\n27\n"], "outputs": ["No\nYes"]}, "1182": {"inputs": ["2\n3\n6\n"], "outputs": ["2\n4\n6\n5\n7\n8\n9\n10\n12\n"]}, "1183": {"inputs": ["1\n10\n1 2 3 1 2 3 1 2 3 1\n3\n5\n2\n4\n6\n8\n2\n"], "outputs": ["3 8 9\n2 6 1\n1 4 1\n1 2 1\n3 8 1\n"]}, "1184": {"inputs": ["5\n12\nA 3\nB 12\nC 6\nA 9\nB 12\nC 12\nD 3\nB 9\nD 3\nB 12\nB 9\nC 6\n7\nA 9\nA 9\nB 6\nC 3\nD 12\nA 9\nB 6\n2\nA 9\nB 6\n1\nD 12\n0 \n"], "outputs": ["575\n525\n-25 \n-200 \n-400\n475\n"]}, "1185": {"inputs": ["2\n10\n2 1 2\n2\n10\n1 8\n0\n"], "outputs": ["31.2000\n47.0000"]}, "1186": {"inputs": ["4\n3 2 1 4\n2\n0\n2\n"], "outputs": ["10\n3\n"]}, "1187": {"inputs": ["3\n5 2\n10 2\n100 3\n"], "outputs": ["4 1\n6 12\n76 49152\n"]}, "1188": {"inputs": ["6\n0 1 1 2 2 3\n"], "outputs": ["4 5 6\n"]}, "1189": {"inputs": ["2\n6\n1 2 1 1 3 1\n3\n4 1 4\n"], "outputs": ["6\n2"]}, "1190": {"inputs": ["4\n10\n256\n255\n4096\n"], "outputs": ["2\n1\n8\n2\n"]}, "1191": {"inputs": ["1\n5 2\nszhbdvrngk\nqzhxibnuec\njfsalpwfkospl\nlevjehdkjy\nwdfhzgatuh\nszhbdvcngk\nqzhxbnuec\n"], "outputs": ["szhbdvrngk\nqzhxibnuec\n"]}, "1192": {"inputs": ["1\n5\n3 6 4 5 9\n"], "outputs": ["3 1 1 0"]}, "1193": {"inputs": ["1\n5\n4\n0 3\n1 2\n4 4\n0 4\n"], "outputs": ["4\n"]}, "1194": {"inputs": ["3\n"], "outputs": ["2\n"]}, "1195": {"inputs": ["1\n4 1 3 2 4 3 2 4\n1 2 3 4\n"], "outputs": ["6\n"]}, "1196": {"inputs": ["1\n4 4 3 \n1 4 5 7 \n2 3 8 6\n1 4 8 9 \n5 1 5 6 \n"], "outputs": ["22\n"]}, "1197": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n1\n1 2\n3\n1 2 4\n7\n1 2 4 8\n15\n"]}, "1198": {"inputs": ["2\n2 4\n3\n1\n2\n8\n"], "outputs": ["0\n2\n3\n"]}, "1199": {"inputs": ["4\n2 2\n1 14\n30 10\n31 4\n"], "outputs": ["1\n1\n3\n9\n"]}, "1200": {"inputs": ["4\nAB\nABBA\nABAABB\nAA\n"], "outputs": ["yes\nyes\nno\nno\n"]}, "1201": {"inputs": ["1\n5 5 3\n4 3 9 7 2\n8 6 5 2 8\n1 7 3 4 3\n2 2 4 5 6\n9 9 9 9 9\n3 4 6\n3 2 5\n1 4 9\n"], "outputs": ["10\n0\n19\n"]}, "1202": {"inputs": ["DDTM\n"], "outputs": ["17\n1\n6\n"]}, "1203": null, "1204": {"inputs": ["1\nadefb\nbdefa\n"], "outputs": ["4\n"]}, "1205": {"inputs": ["1\n001\n"], "outputs": ["6\n"]}, "1206": null, "1207": {"inputs": ["2\n2\n5 10\n4\n15 10 7 13\n"], "outputs": ["50\n266"]}, "1208": {"inputs": ["1\n3\n"], "outputs": ["12"]}, "1209": {"inputs": ["3\n5 10 5 20 8 15\n5 10 5 20 1 30\n5 10 5 20 5 20\n"], "outputs": ["YES\nNO\nYES\n"]}, "1210": {"inputs": ["2\n15 5\nL H\n20 14\nR E\n"], "outputs": ["5 H\n7 E\n"]}, "1211": {"inputs": ["2\naabcc\nbababccc\n"], "outputs": ["ac\nbc\n"]}, "1212": {"inputs": ["2\nABCB\nBBC\n"], "outputs": ["1\n1\n"]}, "1213": {"inputs": ["3\n1 3 2 1 2\n1 5 2 1 2\n1 5 3 2 2\n"], "outputs": ["Kefa\nChef\nDraw\n"]}, "1214": {"inputs": ["2\n20 20\n4 5\n13\nLLUUUUURRRRRR\n10 10\n3 4\n7\nUDUDDRR\n"], "outputs": ["Case 1: REACHED\nCase 2: DANGER"]}, "1215": {"inputs": ["3\n"], "outputs": ["true\n"]}, "1216": {"inputs": ["3\n5 100\n11 22 33 44 55\n5 50\n10 20 30 40 50\n5 45\n12 24 36 48 60\n"], "outputs": ["NO\nYES\nYES"]}, "1217": {"inputs": ["3\n3\n2 3 1\n2\n2 2\n3\n1 2 3\n"], "outputs": ["9\n4\n9\n"]}, "1218": {"inputs": ["1\n3 10\n"], "outputs": ["18"]}, "1219": {"inputs": ["2\n1 10\n5 2\n"], "outputs": ["1\n64"]}, "1220": {"inputs": ["4 2\n4 5 6 7 \n1 2 3 4 \n3 3\n1 2 3\n3 4\n4 5 6 \n"], "outputs": ["4\n"]}, "1221": {"inputs": ["3\n3\n8\n9\n"], "outputs": ["3\n5\n6\n"]}, "1222": {"inputs": ["3\nrama\nabba\nabcd\n"], "outputs": ["2\n4\n0\n"]}, "1223": {"inputs": ["2\n3 4 11 23\n10 11 30\n3 4 11 40\n10 11 30\n"], "outputs": ["16\n16\n"]}, "1224": {"inputs": ["- The first line of the input contains an integer T denoting the number of test cases.\n- Each test case is described in one line containing four integers: A1 denoting the first element of the arithmetic progression A, D denoting the common difference between successive members of A, and L and R as described in the problem statement.\n", "2\n1 1 1 3\n14 7 2 4\n"], "outputs": ["- For each test case, output a single line containing one integer denoting sum of F(Ai).\n", "6\n12\n"]}, "1225": {"inputs": ["2\n3 3\n1 2 3\n2 3 6\n1 3 7\n3 3\n1 2 3\n2 3 6\n1 3 9\n"], "outputs": ["1\n2\n"]}, "1226": {"inputs": ["2\n3 9\n001000001\n111111010\n100100100\n7 9\n010101110\n110110111\n010011111\n100100000\n000010100\n011011000\n000100101\n"], "outputs": ["9\n10\n"]}, "1227": {"inputs": ["2\nblue yellow green orange black green\ngreen yellow green orange black green\n"], "outputs": ["NO\nYES\n"]}, "1228": {"inputs": ["1\n2\n1 1\n1 2\n4 6\n2 1\n9 6\n9 3\n4 3\n"], "outputs": ["2 2\n"]}, "1229": {"inputs": ["2\n6 0\n1 1 1 1 1 1\n5 1\n2 4 6 3 4\n"], "outputs": ["NO\nYES\n"]}, "1230": null, "1231": {"inputs": ["3\n5\n10\n4\n"], "outputs": ["5\n7\n7\n"]}, "1232": null, "1233": {"inputs": ["1\n", "1\n", "2\n"], "outputs": ["3\n", "5\n", "4\n"]}, "1234": {"inputs": ["3\n3\n5\n12345678\n"], "outputs": ["win 6\nwin 12\nlose"]}, "1235": {"inputs": ["2\n"], "outputs": ["25"]}, "1236": {"inputs": ["2\n5\nRBBRG\n5\nRBGOV\n"], "outputs": ["1\n0\n"]}, "1237": {"inputs": ["2\n9 77 69\n98 99 69\n"], "outputs": ["4\n0\n"]}, "1238": {"inputs": ["4\n65\n566\n11\n1623455078\n"], "outputs": ["A\nAB\n"]}, "1239": {"inputs": ["2\n2\n4\n"], "outputs": ["2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n"]}, "1240": {"inputs": ["1\n6\n6 7 9 11 4 16\n"], "outputs": ["23\n"]}, "1241": {"inputs": ["2\n5 3\n4 4 4 3 4\n7 4\n3 3 1 1 1 2 4\n"], "outputs": ["Jesse\nWalter\n"]}, "1242": {"inputs": ["2\n2\n3 4\n3\n4 2 5\n"], "outputs": ["3\n4\n"]}, "1243": {"inputs": ["2\n19\n385\n"], "outputs": ["0\n1"]}, "1244": {"inputs": ["3\n"], "outputs": ["12    \n"]}, "1245": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n13\n57\n135\n7911\n131517\n1357\n9111315\n17192123\n25272931\n"]}, "1246": {"inputs": ["1\n5\n1 2 3 4 5\n2 7 8 9 9\n"], "outputs": ["YES\n"]}, "1247": {"inputs": ["2\n5 2   \n3 4 5 2 1\n5 2    \n4 3 2 1 5  \n"], "outputs": ["3\n-1\n"]}, "1248": {"inputs": ["4\n6\n9\n11\n24\n"], "outputs": ["4\n7\n8\n14\n"]}, "1249": {"inputs": ["3\n4 12\n2 2\n5 14\n"], "outputs": ["-1\n1 2\n5 4 3 2 1\n"]}, "1250": {"inputs": ["2\n1\n2\n"], "outputs": ["6\n25"]}, "1251": {"inputs": ["5\nDonetsk Kiev New-York Miami Hollywood\n9\nDonetsk Kiev 560\nKiev New-York 7507\nNew-York Miami 1764\nMiami Hollywood 28\nHollywood Miami 30\nMiami New-York 1764\nKiev Donetsk 550\nHollywood New-York 1736\nNew-York Hollywood 1738\n13\n5 Donetsk Kiev New-York Miami Hollywood\n5 Hollywood Miami New-York Kiev Donetsk\n3 Donetsk Kiev Donetsk\n2 Kyiv New-York\n3 New-York Hollywood Miami\n2 New-York Miami\n3 Hollywood New-York Miami\n4 Donetsk Kiev Miami Hollywood\n2 Donetsk Hollywood\n1 Donetsk\n2 Mumbai Deli\n6 Donetsk Kiev New-York Miami Hollywood New-York\n2 Miami Miami\n"], "outputs": ["9859\nERROR\nERROR\nERROR\n1768\n1764\n3500\nERROR\nERROR\n0\nERROR\nERROR\nERROR\n"]}, "1252": {"inputs": ["1\n10\n"], "outputs": ["7"]}, "1253": {"inputs": ["2\n9\n000010000\n3\n2 5 8\n5\n00001\n1\n5\n"], "outputs": ["6\n1\n"]}, "1254": {"inputs": ["6\n3 100\n10 1 100\n3 100\n11 1 100\n3 100\n10 1 10\n3 100\n10 1 50\n4 100\n50 50 50 50\n4 100\n1 1 1 1\n"], "outputs": ["yes\nno\nno\nyes\nno\nno\n"]}, "1255": {"inputs": ["4\nhelowrd 0\nbackground 0\nabcdefghijklmnopqrstuvwxyz 0\nb 1\n"], "outputs": ["abcfgij\nefhijlmpqs\nNOPE\na"]}, "1256": {"inputs": ["2\n3\n3 4 5\n4\n1 1 1 1\n"], "outputs": ["3\n0\n"]}, "1257": {"inputs": ["3\n5\n4\n6\n"], "outputs": ["120\n24\n720"]}, "1258": {"inputs": ["4\n1989\n86236\n90210\n99999999999999999999999999999999999999988\n"], "outputs": ["0\n2\n3\n2\n"]}, "1259": {"inputs": ["2\n1 10\n11 33\n"], "outputs": ["3\n8\n"]}, "1260": {"inputs": ["3\n10 10 3\n1 3\n3 5\n5 1\n1 6\n6 2\n5 6\n2 5\n7 10\n4 7\n10 9\n20 0 15 20 25 30 30 150 35 20\n10 10 2\n1 3\n3 5\n5 1\n1 6\n6 2\n5 6\n2 5\n7 10\n4 7\n10 9\n20 0 15 20 25 30 30 150 35 20\n10 10 5\n1 3\n3 5\n5 1\n1 6\n6 2\n5 6\n2 5\n7 10\n4 7\n10 9\n20 0 15 20 25 30 30 150 35 20\n"], "outputs": ["345\n240\n-1\n"]}, "1261": {"inputs": ["2\n10 1\n5 5\n"], "outputs": ["-1 -1\n1 2\n2 3\n3 4\n4 5\n5 1\n"]}, "1262": {"inputs": ["1\n3 3\n2\n1 1\n1 3\n2\n2 1\n2 2\n"], "outputs": ["0 1 0 \nX X 1\n4 3 2\n"]}, "1263": {"inputs": ["2\n4 1\n38 2\n"], "outputs": ["2\n1\n"]}, "1264": {"inputs": ["4 2\n"], "outputs": ["2"]}, "1265": {"inputs": ["2\n2\n5\n"], "outputs": ["2\n8\n"]}, "1266": null, "1267": {"inputs": ["2 5 17\n7 9\n13 18\n10 12\n4 18\n3 9\n"], "outputs": ["aaaba"]}, "1268": {"inputs": ["1 100 9\n11 2 10\n12 2 11\n0 0 0\n"], "outputs": ["9\n15\n16\n"]}, "1269": {"inputs": ["2\n4\n8 8 10 12\n15 20 3 5\n3\n20 20 20\n10 10 10\n"], "outputs": ["30\n30\n"]}, "1270": {"inputs": ["2\n8 38\n7 8 19 7 8 7 10 20\n4 5\n2 10 4 9\n"], "outputs": ["7\n2\n"]}, "1271": {"inputs": ["1\n3\n4\n2\n7\n"], "outputs": ["0 1\n1 2\n3 4\n"]}, "1272": {"inputs": ["2\n1\n8\n"], "outputs": ["0 1\n5 3"]}, "1273": {"inputs": ["2\n2 2\n*...\n3 4\n.*..***..*..\n"], "outputs": ["1\n2\n"]}, "1274": {"inputs": ["3\n2\n3\n4\n"], "outputs": ["1121\n1222\n112131\n122232\n132333\n11213141\n12223242\n13233343\n14243444\n"]}, "1275": {"inputs": ["2\n4 1\n1\n6 2\n2 3\n"], "outputs": ["1 0 1 2\n3 2 1 1 2 3"]}, "1276": {"inputs": ["1\n2 2\n3 1\n", "1\n7 3\n3 7 5 4 6 2 1\n"], "outputs": ["1\n", "0\n"]}, "1277": null, "1278": {"inputs": ["4\n"], "outputs": ["3\n"]}, "1279": {"inputs": ["2\n3\n1 3\n3 1\n1 2\n5\n1 3\n2 4\n1 2\n3 2\n3 4\n"], "outputs": ["0\n11\n"]}, "1280": {"inputs": ["4 \nabc \nabcba \nabcd \ncba\n"], "outputs": ["2 \n0\n4\n2\n"]}, "1281": {"inputs": ["3\n19\n1 2 3 4 4 5 6 6 6 7 6 6 6 5 4 4 3 2 1\n14\n1 2 3 4 5 6 7 6 5 4 3 2 1 1\n13\n1 2 3 4 5 6 8 6 5 4 3 2 1\n"], "outputs": ["yes\nno\nno\n"]}, "1282": {"inputs": ["2\n1 4\n4 10\n"], "outputs": ["1\n16\n"]}, "1283": {"inputs": ["3\n30\n45\n62\n"], "outputs": ["YES\nYES\nNO\n"]}, "1284": {"inputs": ["6\n4\n90 25 60 75\n8\n27 29 92 92 67 67 85 92\n4\n0 1 2 3\n4\n100 100 100 100\n4\n30 30 40 50\n4\n30 40 40 50\n"], "outputs": ["60 75 90\n-1\n1 2 3\n-1\n-1\n-1\n"]}, "1285": {"inputs": ["1\n3\n1 2 5\n6 3 4\n2 7 1\n"], "outputs": ["13\n"]}, "1286": {"inputs": ["1 1 5\n4 5\n"], "outputs": ["0.28125\n"]}, "1287": {"inputs": ["1\nhello\n"], "outputs": ["9"]}, "1288": {"inputs": ["2\n3 3\n1 2\n2 3\n1 3\n4 3\n1 2\n2 3\n3 4\n"], "outputs": ["1\n2\n"]}, "1289": {"inputs": ["3\n2\n5\n18\n"], "outputs": ["3\n945\n221643095476699771875"]}, "1290": {"inputs": ["9\n"], "outputs": ["1"]}, "1291": {"inputs": ["3\n0 0 R\n2\n1 -2 U\n2 2 D\n1 1 U\n1\n1 0 U\n0 0 R\n1\n3 0 L\n"], "outputs": ["2.0\nSAFE\n1.5\n"]}, "1292": {"inputs": ["4 4 5 2 1 3 2 1 3 2 3 3 4 3 1 4 2 3\n"], "outputs": ["22\n"]}, "1293": {"inputs": ["3 2\n0 1 2\n1 0 1\n2 1 0\n1\n0 4 3\n2\n4 0 7\n"], "outputs": ["0 -1 -2\n0 -4 -3\n0 -4 3\n"]}, "1294": {"inputs": ["1\n6 85\n1 2\n2 3\n2 4\n4 5\n3 6\n3 5 4 7 1 9\n"], "outputs": ["YES\n"]}, "1295": {"inputs": ["1\n1 1\n"], "outputs": ["1"]}, "1296": {"inputs": ["2\n3\n1 2\n1 3\n1\n5\n1 2\n1 3\n2 4\n2 5\n1\n"], "outputs": ["2\n4\n"]}, "1297": {"inputs": ["3\n10 20\n20 10\n10 10\n"], "outputs": ["<\n>\n=\n"]}, "1298": {"inputs": ["2\n4\n1 2 3 4 5\n5\n1 10 100 1000 10000 100000\n"], "outputs": ["4\n5"]}, "1299": {"inputs": ["----------\n- The first line contains $T$, the number of test cases. Then the test cases follow.\n- For each test case, the first line contains a single integer $N$.\n- The second line contains $N$ integers $A_1, A_2, \\ldots, A_N$. \n", "3\n5\n1 2 2 1 2\n6\n1 1 1 1 1 1\n8\n1 2 2 2 3 4 2 1\n"], "outputs": ["----------\nFor each test case, print a single line containing one integer \u2015 the type of the dish that Chef should choose from. If there are multiple answers, print the smallest one.\n", "1\n1\n2\n"]}, "1300": {"inputs": ["1\n4 2\n5 6 3 2\n"], "outputs": ["6\n"]}, "1301": {"inputs": ["2\n2\n212\n"], "outputs": ["2\n221"]}, "1302": {"inputs": ["1\n16\n"], "outputs": ["4\n"]}, "1303": {"inputs": ["1\n12 4 3\n4 5 6 7 1 4 6 9 0 0 10 2\n"], "outputs": ["8\n"]}, "1304": {"inputs": ["3 2\n3 1 2\n2 3 1\n"], "outputs": ["3 2 1\n3 1 2"]}, "1305": {"inputs": ["----------\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Next line contains $N$.\n- Next $N$ lines will contain $N$ number of space-separated integers $Ai$ which make denote the beds in the area.\n", "2\n4\n1 0 1 0\n0 0 0 1\n0 1 0 0\n1 0 0 1\n4\n1 0 1 0\n0 0 0 0\n1 0 1 1\n0 1 0 0\n"], "outputs": ["----------\nFor each test case, output in a single line whether the total arrangement is \"SAFE\" or \"UNSAFE\". Even if there's a single unsafe bed in the whole area, report the whole area as \"UNSAFE\".\n", "SAFE\nUNSAFE\n"]}, "1306": {"inputs": ["3\nLTIMEAZAZAITLME\nLLLTTTIIIMMMEEEAHA\nLTIMEM\n"], "outputs": ["yes\nYES\nNO\n"]}, "1307": {"inputs": ["2\n2 4\n4 2\n"], "outputs": ["4\n6\n"]}, "1308": {"inputs": ["absdbads\nasdjenfef\ntyerbet\nabc564\n"], "outputs": ["Invalid\nInvalid\nInvalid\nValid"]}, "1309": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n21\n*1\n321\n*21\n**1\n4321\n*321\n**21\n***1\n"]}, "1310": {"inputs": ["3\nMLM\nMMLLMMLL\nMMMMMMML\n"], "outputs": ["10\n24\n22\n"]}, "1311": {"inputs": ["1\n3 3\n"], "outputs": ["1 2 3"]}, "1312": {"inputs": ["3\n3 6\nabDefb\nbSpoon\nNIKHil\n6 6\naaaaaa\nssssss\nxuisdP\noooooo\nioowoo\nbdylan\n6 5\nbdfhj\ncacac\nopqrs\nddddd\nindia\nyucky\n"], "outputs": ["There is a spoon!\nThere is a spoon!\nThere is indeed no spoon!\n"]}, "1313": {"inputs": ["2\n3\n2 4 8\n3\n4 7 5\n"], "outputs": ["2\n-1\n"]}, "1314": {"inputs": ["3 5\n1 2 3\n> 1 D\n< 2 C\n= 3 D\n> 4 C\n< 5 D\n"], "outputs": ["DCDDC\n"]}, "1315": null, "1316": {"inputs": ["3 3\n1 2 1\n2 3 2\n3 1 3\n3\n1\n2\n3\n"], "outputs": ["2\n10\n36\n"]}, "1317": {"inputs": ["2 4 5 5 3\n1 2 1 3\n1 2 2 2\n1 3 2 3\n1 4 2 4\n2 1 2 2\n1 1 30 12\n1 3 10 15\n2 3 11 22\n"], "outputs": ["48\n"]}, "1318": {"inputs": ["2\n4 3\n4 4\n"], "outputs": ["Case 1: 3\nCase 2: 1\n"]}, "1319": {"inputs": ["10 3\n1 \n3 \n7 \n6 \n-1 \n5 \n-1 \n18 \n9 \n11\n2\n-1\n4\n"], "outputs": ["7\n6\n18"]}, "1320": {"inputs": ["3\n1 \n3\n7 \n"], "outputs": ["B\nA\nB"]}, "1321": {"inputs": ["3\n1\n7\n8\n"], "outputs": ["0\n91\n140"]}, "1322": {"inputs": ["2\n5 1\n3 5 2 4 5\n6 4\n6 5 4 3 2 1\n"], "outputs": ["2\n4"]}, "1323": {"inputs": ["8\n-20\n90\n-30\n-20\n80\n-70\n-60\n125\n"], "outputs": ["-5\n6 8"]}, "1324": {"inputs": ["1\n6 3\n"], "outputs": ["1\n"]}, "1325": {"inputs": ["2\n"], "outputs": ["3 4 5\n"]}, "1326": {"inputs": ["3\n5\n3 0 0 0 0\n5\n1 1 1 1 1\n5\n5 4 3 2 1\n"], "outputs": ["3\n5\n15"]}, "1327": {"inputs": ["2\n4 2\n4 2 5 7\n2 3\n3 4\n2 1\n1 1\n2 1\n"], "outputs": ["4 3\n3 2\n-1 2\n"]}, "1328": {"inputs": ["3\n25\n46\n99\n"], "outputs": ["2\n1\n2"]}, "1329": {"inputs": ["1\n3 3\n3 5 6\n11 3 1 2 3\n5 2 1 2\n5 2 1 3\n"], "outputs": ["10\n"]}, "1330": {"inputs": ["3\n1 3\n4 2 9\n5 6 7\n1 3\n4 2 9\n5 10 7\n3 3\n7 14 11 4 15 5 20 1 17\n2 13 16 9 19 6 12 8 10\n"], "outputs": ["1\n0\n3\n"]}, "1331": {"inputs": ["4\n10 1\n10 2\n10 3\n1000000000 1234567\n"], "outputs": ["5.0000\n2.5000\n7.5000\n177375316.6198730500000000\n"]}, "1332": {"inputs": ["3\n1 2\n2 3\n4 3\n"], "outputs": ["1\n2\n3\n"]}, "1333": {"inputs": ["2\n2\n2 3\n4\n2 6 7 7\n"], "outputs": ["2\n64\n"]}, "1334": {"inputs": ["10\n3 2 1 1 2 3 1 3 2 1\n", "8\n3 2 3 2 3 5 1 3\n"], "outputs": ["4\n", "5\n"]}, "1335": {"inputs": ["3\n1 2 2\n"], "outputs": ["2"]}, "1336": null, "1337": {"inputs": ["1\n2\n2 3\n1\n"], "outputs": ["7"]}, "1338": {"inputs": ["4 4.296 3 3.8 -2 1.8 2 2.8678 1\n"], "outputs": ["4296.00\n0.04\n180.00\n28.68"]}, "1339": {"inputs": ["3\n2\n3\n100\n"], "outputs": ["9\n10\n170"]}, "1340": {"inputs": ["2\n5\n-4 2 -4 3 -5\n3\n-3 -2 -1\n"], "outputs": ["5\n2 2 3\n0\n0"]}, "1341": {"inputs": ["2\n3\n1 1 2\n4\n2 4 3 5\n"], "outputs": ["4\n7"]}, "1342": {"inputs": ["3\n5 5\n1 2 3 4 5\n5 1\n40 30 20 10 50\n3 10\n20 1 110\n"], "outputs": ["5\n9\n6"]}, "1343": {"inputs": ["3\naba\nabac\nabcd\n"], "outputs": ["YES\nNO\nNO\n"]}, "1344": {"inputs": ["1\n4\n5 1 3 4\n"], "outputs": ["4\n"]}, "1345": {"inputs": ["2\n721011081081113287111114108100\n871011089911110910132116111327311010010597\n"], "outputs": ["Hello World\nWelcome to India"]}, "1346": null, "1347": {"inputs": ["2 4\n1 2\n1 1 WhoDoesntLoveChefBook\n2 2 WinterIsComing\n3 10 TheseViolentDelightsHaveViolentEnds\n4 3 ComeAtTheKingBestNotMiss\n"], "outputs": ["WinterIsComing\nWhoDoesntLoveChefBook\nTheseViolentDelightsHaveViolentEnds\nComeAtTheKingBestNotMiss\n"]}, "1348": {"inputs": ["2\n3 3\n1 2 1\n2 3 2\n3 2 3\n1 3\n3 3\n1 2 10\n2 3 1\n3 2 1\n1 3\n"], "outputs": ["1.5\n1.0\n"]}, "1349": {"inputs": ["2\n18\n308\n"], "outputs": ["1\n0"]}, "1350": {"inputs": ["3 5\n1 2 3\nQ 1 2\nQ 2 3\nC 1 2\nQ 1 2\nQ 1 3\n"], "outputs": ["4\n8\n5\n30\n"]}, "1351": {"inputs": ["2\n2\n1 1\n4\n1 1 2 1\n"], "outputs": ["0 1\n0 1 2 0\n"]}, "1352": null, "1353": {"inputs": ["2\n3\n1 1 1 2 2\n2 2 1 2 2\n4 2 2 2 3\n1\n1 1 3 2 2\n"], "outputs": ["yes\nno"]}, "1354": {"inputs": ["3\n3 2\n1 2\n2 3\n3 1\n1 2\n2 3\n4 3\n1 2\n2 3\n2 4\n"], "outputs": ["6\n1\n39\n"]}, "1355": {"inputs": ["2\n"], "outputs": ["6 11 14 4 2\n"]}, "1356": null, "1357": {"inputs": ["3\n2\n5 10\n2\n10 5\n2\n5 15\n"], "outputs": ["YES\nNO\nNO\n"]}, "1358": {"inputs": ["4\nglaciological 1\nteammate 0\npossessions 3\ndefenselessness 3\n"], "outputs": ["0\n0\n1\n2\n"]}, "1359": {"inputs": ["3\n"], "outputs": ["5\n"]}, "1360": {"inputs": ["2\nABCDE\nXXBCZQ\nBBB\nBBBBBB\n"], "outputs": ["2\n6\n"]}, "1361": {"inputs": ["$4$ $2$\n$3$ $4$ $1$ $5$\n"], "outputs": ["$3$ $10$ $18$ $31$\n"]}, "1362": {"inputs": ["4\n4\n4 3 1 2\n6\n1 2 2 1 3 1\n5\n10 1 2 10 5\n4\n1 2 1 2\n"], "outputs": ["4 3 -1 2\n-1 2 2 -1 3 -1\n10 -1 2 10 -5\n1 2 -1 2\n"]}, "1363": {"inputs": ["3\n1 4\n3 6\n3 5\n"], "outputs": ["139\n40079781\n32745632\n"]}, "1364": {"inputs": ["1\n3 1\n1 1\n1 0\n3 2\n"], "outputs": ["2 2\n"]}, "1365": {"inputs": ["thing\nggdffn\nfff\ncat\n"], "outputs": ["1\n4\n3\n0\n"]}, "1366": {"inputs": ["2\n4\n1 2 3 4\n5\n3 2 0 3 0\n"], "outputs": ["4\n4"]}, "1367": {"inputs": ["3\n1 2 3\n1 3 2\n"], "outputs": ["2.333333\n"]}, "1368": {"inputs": ["2\n120 100\n90 100\n"], "outputs": ["Yes\nNo\n"]}, "1369": {"inputs": ["3\n22\n13\n10\n"], "outputs": ["77\n41\n17"]}, "1370": {"inputs": ["1\n"], "outputs": ["27"]}, "1371": {"inputs": ["1\n5 10\n2 4 1 35 1\n"], "outputs": ["1\n"]}, "1372": {"inputs": ["4\n3 -2 -5 -3\n0 6 1 2\n-7 8 4 -1\n3 3 -2 2\n"], "outputs": ["A IS CLOSER\nB IS CLOSER\nB IS CLOSER\nB IS CLOSER"]}, "1373": {"inputs": ["2\n6 2\n1 1 1 2 2 1\n5 3\n1 1 2 2 1\n"], "outputs": ["3\n5"]}, "1374": {"inputs": ["2\n30 50 70 10 40 30\n0.25 0.10 0.30 0.05\n50 36 80 38 65 32\n0.55 0.12 0.33 0.54\n"], "outputs": ["FIRST\nSECOND\n"]}, "1375": {"inputs": ["3\n1234\n4567\n1\n"], "outputs": ["4321\n7654\n1\n"]}, "1376": {"inputs": ["1\n2 4\n3 4 1\n"], "outputs": ["2 1 1 3\n1 1 0 3\n"]}, "1377": {"inputs": ["3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n"], "outputs": ["1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL"]}, "1378": {"inputs": ["3 1 3\n"], "outputs": ["1 1 0\nExplanation\nTotal of 3 particles are bombarded. After particle 1 is bombarded, the chambers have particle distribution as\n\"1 0 0\". After second particle is bombarded, number of particles in chamber 0 becomes 2 which is greater\nthan 1. So, num of particles in chamber 0 becomes 0 and in chamber 1 becomes 1. So now distribution is\n\"0 1 0\". After the 3rd particle is bombarded, chamber 0 gets 1 particle and so distribution is \"1 1 0\" after all\nparticles are bombarded one by one."]}, "1379": {"inputs": ["information\n"], "outputs": ["i2n2f1o2r1m1a1t1"]}, "1380": {"inputs": ["1\n7\n"], "outputs": ["21"]}, "1381": {"inputs": ["4\n2 10 20\n4 7\n1 2\n4 15 20\n4 6 9 13\n1 2 2 1\n5 10 1\n1 3 5 7 9\n1 2 1 2 1\n2 10 2\n4 5\n1 2\n"], "outputs": ["10\n13\n10\n5\n"]}, "1382": {"inputs": ["3\n-1 -2 -3\n2\n"], "outputs": ["5\n"]}, "1383": {"inputs": ["1\n4 1 4\n2 2 2 2\n"], "outputs": ["8\n"]}, "1384": {"inputs": ["2\n13 2\n0101110000101\n6 3\n100001\n"], "outputs": ["5\n4\n"]}, "1385": {"inputs": ["1\n3 3\nbba\n"], "outputs": ["aab\n"]}, "1386": {"inputs": ["2\n2 2\n1 6\n"], "outputs": ["3.000000\n6.000000\n"]}, "1387": {"inputs": ["4\n1 0 0 0\n1\n1 0 0 0\n3\n0 1 0 0\n2\n2 3 1 4\n10\n"], "outputs": ["1\n3\n3\n213986343\n"]}, "1388": {"inputs": ["2\n600000\n250000\n"], "outputs": ["577500\n250000\n"]}, "1389": {"inputs": ["2\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n"], "outputs": ["right this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This"]}, "1390": {"inputs": ["1\n2 2\n"], "outputs": ["3.3333333333\n"]}, "1391": {"inputs": ["2\n3 3\n1 3 1\n4 6 2\n7 10 3\n4 2\n10 100 1\n100 200 2\n150 500 2\n200 300 2\n"], "outputs": ["3\n3\n"]}, "1392": {"inputs": ["6 70\n"], "outputs": ["76"]}, "1393": {"inputs": ["3\n1\n10\n3\n8 3 6\n5\n4 5 1 2 3\n"], "outputs": ["1\n2\n2\n"]}, "1394": {"inputs": ["2\n4\n10000000000\n"], "outputs": ["23\n227374950"]}, "1395": {"inputs": ["1\n2 6\n"], "outputs": ["3\n"]}, "1396": {"inputs": ["5\n2 2 1 2\n11 10 5 9\n11 11 5 9\n12 11 5 9\n1 2 1 100\n"], "outputs": ["Chefirnemo\nChefirnemo\nPofik\nChefirnemo\nPofik\n"]}, "1397": {"inputs": ["3\n2\n2 1\n2\n1 2\n5\n1 3 2 1 2\n"], "outputs": ["2\n1\n2\n"]}, "1398": {"inputs": ["2\nabc\naba\n"], "outputs": ["3\n2\n"]}, "1399": null, "1400": {"inputs": ["2\n"], "outputs": ["5 7\n"]}, "1401": null, "1402": {"inputs": ["3\n100010\n0\n0\n100010\n11100\n1010\n"], "outputs": ["0\n1\n3\n"]}, "1403": {"inputs": ["2\n12\n"], "outputs": ["2\n"]}, "1404": {"inputs": ["2\n3 3 3\n1\n3 3 3\n2\n"], "outputs": ["1\n4\n"]}, "1405": {"inputs": ["1\n6\n"], "outputs": ["0\n"]}, "1406": {"inputs": ["1\n6 1\n4 2 15 9 8 8\n3\n"], "outputs": ["2 4\n"]}, "1407": {"inputs": ["2\n1 1\n2 3\n"], "outputs": ["1\n1\n3\n1 1 2\n2 3 3\n"]}, "1408": {"inputs": ["2\n1111\n2211\n222\n111\n"], "outputs": ["8\n0\n"]}, "1409": {"inputs": ["2\n2\n5\n"], "outputs": ["1\n2\n"]}, "1410": null, "1411": {"inputs": ["2\n3 10 2 5\n2 20 5 10\n"], "outputs": ["1\n0"]}, "1412": {"inputs": ["4\n2\n5 3\n3 1\n5\n0\n01800.00\n0\n0.00100\n3\nx 0\nd 3\n# .\n0xd21#dd098x\n"], "outputs": ["3\n1800\n.001\n321.33098"]}, "1413": {"inputs": ["2\n2 4\n1 1\n1111\n0111\n2 4\n1 1\n1111\n0011\n"], "outputs": ["0 -1 -1 2\n-1 -1 -1 3\n0 -1 -1 2\n-1 -1 -1 -1\n"]}, "1414": {"inputs": ["4 3 3\nMMF\nMMM\nFFM\nFFM\n2 F\n3 M\n1 M\n"], "outputs": ["yes\nno\nyes"]}, "1415": {"inputs": ["4\naaa\nabc\nabdbca\nabba\n"], "outputs": ["YES\nNO\nYES\nYES\n"]}, "1416": {"inputs": ["7\n1 2 3 4 5 6 7\n"], "outputs": ["1 2 4 7\n3 5 6\n"]}, "1417": null, "1418": {"inputs": ["2\n4\n2 1 4 3\n4\n7 6 3 2\n"], "outputs": ["30\n39\n"]}, "1419": null, "1420": {"inputs": ["5\n2 2 4\n1 3\n3 4\n2 2 3\n1 3\n3 4\n2 2 2\n1 3\n3 4\n2 2 4\n4 7\n8 5\n2 2 2\n4 7\n8 5\n"], "outputs": ["4\n2\n0\n6\n0\n"]}, "1421": {"inputs": ["2\n1\n2\n"], "outputs": ["9\n99"]}, "1422": {"inputs": ["3\n3\n010\n5\n10001\n7\n0000000\n"], "outputs": ["0\n1\n7"]}, "1423": {"inputs": ["3\n4\n1 3 4 2\n2\n5\n1 2 3 9 4\n5\n5\n1 2 3 9 4 \n1\n"], "outputs": ["3\n4\n1\n"]}, "1424": {"inputs": ["1001 2\n5 2\n"], "outputs": ["100\n3\n"]}, "1425": {"inputs": ["4\n001 100 011 4\n1000 1101 100 3\n1010 001 101 4\n010 101 000 4\n"], "outputs": ["6\n12\n8\n10"]}, "1426": {"inputs": ["1\n5 3\n1 2 3\n2 6 3\n2 10 7\n2 50 3\n1 10 5\n1 7 4\n"], "outputs": ["33\n2 2 3 1 3"]}, "1427": {"inputs": ["2 3\n1 2\n0 1\nRDL\n"], "outputs": ["4\n6\n6\n"]}, "1428": {"inputs": ["3\n3 10 15 5 10 100\n12 15 18\n3 10 15 5 10 100\n5 5 10\n4 40 80 30 30 100\n100 100 100 100\n"], "outputs": ["4\nRIP\n1\n"]}, "1429": {"inputs": ["2\n3\n5 6 2\n1.0 0.0 0.5\n4\n2 2 2 2\n0.5 0.5 0.5 0.5\n"], "outputs": ["6.000000000000000\n1.000000000000000\n"]}, "1430": {"inputs": ["1 \n2 1\n"], "outputs": ["3\n"]}, "1431": {"inputs": ["2    \n"], "outputs": ["200000002     \n"]}, "1432": {"inputs": ["6\n2\n0 0\n0 0\n2\n1 0\n0 1\n2\n1 0\n1 0\n2\n1 0\n1 1\n3\n1 0 0\n0 1 1\n1 1 0\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n"], "outputs": ["0\n0\n0\n1\n1\n3\n"]}, "1433": {"inputs": ["4\n4\n7\n435\n479\n7\n8\n1675475\n9756417\n"], "outputs": ["7\n74\n"]}, "1434": {"inputs": ["7 1 5\n"], "outputs": ["6\n"]}, "1435": {"inputs": ["7\n3 8 4 23 9 11 28  \n2 3 22 26 8 16 12 \n"], "outputs": ["4\n3 4 23 9\n2 3 22 8"]}, "1436": {"inputs": ["1\nabbabaab\n"], "outputs": ["2\n"]}, "1437": {"inputs": ["3\n2\n2 3\n2\n4 2\n3\n12 3 2\n"], "outputs": ["6\n8\n-1\n"]}, "1438": {"inputs": ["1\n5\n2 30 2 4 3\n"], "outputs": ["6\n"]}, "1439": {"inputs": ["2\n2 3 2 3\n2 2 5 5\n"], "outputs": ["0.500000\n1.000000"]}, "1440": {"inputs": ["1\n2\n7 12\n"], "outputs": ["7\n"]}, "1441": {"inputs": ["1\n3 2\n5 7 1\n1 2\n"], "outputs": ["Chef\n"]}, "1442": {"inputs": ["1\n"], "outputs": ["3\n"]}, "1443": {"inputs": ["2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n"], "outputs": ["4\n0\n"]}, "1444": {"inputs": ["3\n4\n1 1 1 1\n3\n2 2 2\n4\n1 2 1 1\n"], "outputs": ["4\n5\n6\n"]}, "1445": {"inputs": ["2\n5\n0 0\n1 0\n2 0\n0 -1\n0 -2\n4\n5 0\n-5 0\n0 5\n0 -5\n"], "outputs": ["1\n3 SW\n2\n4 NE\n2 NE\n"]}, "1446": {"inputs": ["1\n3\n"], "outputs": ["1\n"]}, "1447": {"inputs": ["3\n6\n1 1 4 2 2 2\n8\n1 1 4 3 4 7 7 7\n8\n1 7 7 3 3 4 4 4\n"], "outputs": ["YES\nNO\nNO\n"]}, "1448": {"inputs": ["1\n1 4 3 8 2\n"], "outputs": ["43\n"]}, "1449": {"inputs": ["4\n47\n74\n477\n4747477\n"], "outputs": ["2\n2\n3\n23\n"]}, "1450": {"inputs": ["2\n4\n4 1 6 3\n5\n4 5 1 6 3\n"], "outputs": ["3 1 6 4\n3 1 5 4 6"]}, "1451": {"inputs": ["2\n4 4\n1 2\n1 3\n2 4\n3 4\n3 3\n1 2\n2 3\n1 3\n"], "outputs": ["0 0 1 1\n-1"]}, "1452": {"inputs": ["3\n2 0\n2 1\n4 2\n"], "outputs": ["No 1\nYes\nNo 2\n"]}, "1453": {"inputs": ["5 5 3\n1 1 0 1 1\n?!?!?    \n"], "outputs": ["2\n3\n3\n"]}, "1454": null, "1455": {"inputs": ["5\n1 3 2 4 5\n5\n1 5\n1 4\n2 4\n3 3\n3 5\n"], "outputs": ["4\n3\n2\n0\n5\n"]}, "1456": {"inputs": ["5\n1 10\n3 6\n4 10\n10 17\n100 159\n"], "outputs": ["28\n9\n28\n79\n7485"]}, "1457": {"inputs": ["7 3\n1\n51\n966369\n7\n9\n999996\n11\n"], "outputs": ["4"]}, "1458": {"inputs": ["2\n3\n8\n"], "outputs": ["10\n120"]}, "1459": {"inputs": ["4 1\n0 1\n0 -1\n1 0\n-1 0\n"], "outputs": ["5.656854249492380\n"]}, "1460": {"inputs": ["9 17 5\n1 3 2 4 5 6 1 2 2\n"], "outputs": ["NO\n"]}, "1461": {"inputs": ["5\n3 7 8\n3 5 8\n4 5 8\n6 7 8\n1 5 8\n"], "outputs": ["2 5\n4 7\n3 4\n5 6\n1 6"]}, "1462": null, "1463": {"inputs": ["1\n5\n"], "outputs": ["2\n3 1 2 5\n2 3 4\n"]}, "1464": {"inputs": ["1\n2019:03:31\n"], "outputs": ["1\n"]}, "1465": {"inputs": ["3\n3 2\n1 2\n1 3\n1 2 0\n1 3 0\n3 0\n1 2\n2 3\n3 1\n1 2\n2 3\n1 2 1\n"], "outputs": ["1\n4\n2\n"]}, "1466": {"inputs": ["3 4\n0 1 2\n7\n2\n5\n1000000000\n"], "outputs": ["3\n1\n0\n0"]}, "1467": {"inputs": ["3\n2\n< 100 No\n> 100 No\n3\n< 2 Yes\n> 4 Yes\n= 3 No\n6\n< 2 Yes\n> 1 Yes\n= 1 Yes\n= 1 Yes\n> 1 Yes\n= 1 Yes\n"], "outputs": ["0\n1\n2\n"]}, "1468": null, "1469": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["2\n23\n34\n234\n345\n456\n2345\n3456\n4567\n5678\n"]}, "1470": {"inputs": ["2\na\nabba\n"], "outputs": ["0\n2\n"]}, "1471": {"inputs": ["2\n4 4 1 1\n0 1 1 0\n0 1 1 0\n0 1 1 0\n0 0 0 0\n4 4 1 1\n0 1 1 0\n0 1 1 0\n0 1 1 0\n1 0 0 1\n"], "outputs": ["5\n-1\n"]}, "1472": {"inputs": ["3\n"], "outputs": ["1 20\n"]}, "1473": {"inputs": ["4\n4 5 10 4 6\n4 5 6 10 4\n4 5 4 6 10\n2 2 2 2 2\n"], "outputs": ["yes\nYes\nYes\nNo\n"]}, "1474": {"inputs": ["2\n5\n345 1323 165 98 456\n3\n5\n335 876 98 1323 349\n3\n"], "outputs": ["1323\n335\n"]}, "1475": {"inputs": ["cat is the act of tac\ncat\n"], "outputs": ["The antidote is found in 46."]}, "1476": {"inputs": ["4\nab\naa\naA\nAAbaz\n"], "outputs": ["2\n1\n2\n60\nDescription:\nIn first case \"ab\" & \"ba\" are two different words. In third case, note that A & a are different alphabets and hence \"Aa\" & \"aA\" are different words."]}, "1477": {"inputs": ["2\n4\nDCBA\n7\nXYZZYZZ\n"], "outputs": ["ADCB\nXYYZZZZ\n"]}, "1478": {"inputs": ["3\n3\n-1 -1 -1\n5\n1 -1 -1 4 1\n4\n4 6 7 -1\n"], "outputs": ["inf\n4\nimpossible"]}, "1479": {"inputs": ["2\n5\n2 45\n9 100\n8 0\n2 15\n8 90\n1\n11 1\n"], "outputs": ["135\n0\n"]}, "1480": null, "1481": {"inputs": ["3\n001101\n1101\n110\n"], "outputs": ["0\n1\n-1\n"]}, "1482": {"inputs": ["1\n1\n"], "outputs": ["1 1\n"]}, "1483": {"inputs": ["20 3\n3\n2\n5\n"], "outputs": ["6\n"]}, "1484": {"inputs": ["2\n(xy)2\nx(x2y)3(z)2\n"], "outputs": ["12\n46"]}, "1485": {"inputs": ["2\n6\n100000\n100000\n100000\n100000\n010010\n001100\n4\n0011\n1100\n1110\n0001\n"], "outputs": ["2\n0\n"]}, "1486": null, "1487": {"inputs": ["1\n5\n2 8 8 2 9\n2\n"], "outputs": ["4 1\n"]}, "1488": {"inputs": ["1\n3 1\n2 0 0\n"], "outputs": ["2\n"]}, "1489": {"inputs": ["4483 2\n"], "outputs": ["9983\n"]}, "1490": {"inputs": ["1\n10\n178 184 178 177 171 173 171 183 171 175\n"], "outputs": ["5"]}, "1491": {"inputs": ["1 2 4 2\n"], "outputs": ["Possible\n"]}, "1492": {"inputs": ["3\n2\nab\nba\n2\naa\nbb\n3\naabb\nabab\nbaab\n"], "outputs": ["1\n0\n2\n"]}, "1493": {"inputs": ["8\n0\nBB\n0\nBG\n0\nBBGG\n1\nBGG\n1\nBGGB\n1\nBBBGG\n2\nBBGG\n2\nBGB\n"], "outputs": ["-1\n0\n1\n1\n1\n3\n1\n0\n"]}, "1494": {"inputs": ["5\n16\n1\n4\n8\n2\n"], "outputs": ["3"]}, "1495": {"inputs": ["2\n12\n3 1 2 3 2 0 2 2 2 0 2 3\n11\n3 9 9 6 4 3 6 4 9 6 0\n"], "outputs": ["33322222200\n999666330"]}, "1496": {"inputs": ["The first line contains single integer T number of test cases.\nEach of next T lines contain a string S consisting only of the symbols l and r.\n", "4\nlrl\nrll\nr\nlllr\n"], "outputs": ["Per each line output the number of the last node in the path, described by S, modulo 109+7.\n", "10\n14\n4\n13\n"]}, "1497": {"inputs": ["2\n3\n12:28:26\n07:26:04\n11:23:17\n2\n07:43:25\n06:23:34\n"], "outputs": ["3\n1"]}, "1498": {"inputs": ["2\n"], "outputs": ["6\n"]}, "1499": {"inputs": ["2\n3 3\n1 0 1\n0 1 1\n1 1 0\n10111\n10 5\n3 3 \n0 0 1\n0 1 1\n0 1 1\n00011\n2 9\n"], "outputs": ["5\n4\n"]}, "1500": {"inputs": ["1\n()((()()))\n"], "outputs": ["((()))"]}, "1501": {"inputs": ["2 3\n1 1\n1 4\n2\n"], "outputs": ["38\n"]}, "1502": {"inputs": ["3\nabcd\n4\na b c d\naabbbcccdddd\n4\na b c d\nacd\n3\na b d\n"], "outputs": ["1\n1\n0"]}, "1503": null, "1504": {"inputs": ["1\n3\nxxx\n"], "outputs": ["3\n"]}, "1505": {"inputs": ["20\n1 2 1 1 2 2 1 2 1 1 2 1 2 2 1 1 2 1 2 2\n"], "outputs": ["2 4 6 9"]}, "1506": {"inputs": ["2 2\n00\n00\n3\n1 1 1 1\n2 2 2 2\n1 1 2 2 \n"], "outputs": ["01\n10\n"]}, "1507": {"inputs": ["1\n3 3 1 1 1 2\n"], "outputs": ["5"]}, "1508": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["0\n01\n10\n012\n101\n210\n0123\n1012\n2101\n3210\n"]}, "1509": {"inputs": ["2 4\nG Y B R\nB G R Y\nG Y B R\nG R B Y\nB Y G R\nG B R Y\nB R G Y\nB R G Y\n"], "outputs": ["2"]}, "1510": {"inputs": ["1\nABCDEFGHIJ\n"], "outputs": ["10"]}, "1511": {"inputs": ["2\n4 5\nI::M\n9 10\nMIM_XII:M\n"], "outputs": ["1\n2\n"]}, "1512": {"inputs": ["2\n4 4\n2 2\n"], "outputs": ["Tuzik\nVanya\n"]}, "1513": {"inputs": ["9 5\n1 2 8\n1 3 -9\n2 4 1\n2 5 -6\n3 6 7\n3 7 6\n6 8 3\n6 9 4\n1 2\n2 7\n4 3\n3 2\n8 9\n"], "outputs": ["10\n5\n0\n-1\n21\n"]}, "1514": {"inputs": ["2\n1 1 1 2 2 2\n1 2 3 2 4 2\n"], "outputs": ["0\n1\n"]}, "1515": {"inputs": ["$2$$cab$\n$sdef$\n"], "outputs": ["$903$\n$7630$\n"]}, "1516": {"inputs": ["2\n2 1\n3 3\n"], "outputs": ["0\n2\n"]}, "1517": null, "1518": {"inputs": ["2\n12 2\n11 2\n"], "outputs": ["1\n0"]}, "1519": {"inputs": ["2\n"], "outputs": ["4\n"]}, "1520": {"inputs": ["8\n1 200 3 0 400 4 1 7\n"], "outputs": ["6\n"]}, "1521": {"inputs": ["2\n3\n10 20\n13 18\n15 19\n3\n10 22\n13 21\n15 20\n"], "outputs": ["4 1 1\n4 2 0\n"]}, "1522": {"inputs": ["3\naaaaa#bb#cc#dddd\nacb#aab#bab#accba\nabc#dda#bb#bb#aca\n"], "outputs": ["16\n10\n11\n"]}, "1523": {"inputs": ["5 \n10 3 5 7 3 \n", "8\n3 2 3 2 3 5 1 3\n"], "outputs": ["23\n", "17\n"]}, "1524": {"inputs": ["2\n2 2\n3 3\n"], "outputs": ["2\n12\n"]}, "1525": {"inputs": ["3\n3\n01000010\n11000001\n00000000\n00011000\n00011000\n00010100\n00001000\n00000000\n4\n01000010\n11000001\n00000000\n00011000\n00011000\n00010100\n00001000\n00000000\n1000000000\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n"], "outputs": ["6\n22\n1\n"]}, "1526": {"inputs": ["2\n4\naba\nabc\nbab\naac\n3\naba\nbaab\nabc\n"], "outputs": ["1.1250000\n0.0277778\n"]}, "1527": {"inputs": ["2\n101\n010\n1111\n1010\n"], "outputs": ["Lucky Chef\n2\nUnlucky Chef\n"]}, "1528": {"inputs": ["3\n5 3\nH T T H T\n7 4\nH H T T T H H\n6 1\nT H T H T T\n"], "outputs": ["1\n2\n2"]}, "1529": {"inputs": ["1\n3\n2 3 5\n"], "outputs": ["2220\n"]}, "1530": {"inputs": ["5\n1\n2\n3\n4\n5\n"], "outputs": ["1\n1\n32\n1\n32\n654\n1\n32\n654\n10987\n1\n32\n654\n10987\n1514131211\n"]}, "1531": {"inputs": ["5\n"], "outputs": ["0\n"]}, "1532": {"inputs": ["3\n1\n4\n2\n10 5\n4\n2 3 1 3\n"], "outputs": ["4\n45\n0\n"]}, "1533": {"inputs": ["5 5 3\n1 3 5\n1 2 3\n2 3 4\n3 4 1\n4 5 8\n1 5 19\n"], "outputs": ["7\n"]}, "1534": {"inputs": ["3\n21\n5\n10\n202\n13\n1\n202\n13\n2\n"], "outputs": ["3\n3\n13"]}, "1535": {"inputs": ["2\n5\n1 2\n1 3\n2 4\n3 5\n3\n1 2\n2 3\n"], "outputs": ["1 2\n2 1\n"]}, "1536": {"inputs": ["3\n4\n1 3 10 7\n5\n-10 -5 0 5 10\n4\n2 2 2 10\n"], "outputs": ["1 3 5 7\n-10 -5 0 5 10\n2 2 2 2\n"]}, "1537": {"inputs": ["2\n"], "outputs": ["3\n8\n"]}, "1538": null, "1539": {"inputs": ["4\nabc\nabcdef\naA\nabAZ\naaa\na\nwhat\nnone\n"], "outputs": ["3\n2\n1\n0"]}, "1540": {"inputs": ["2\n10\n20\n12\n5\n"], "outputs": ["YES\nNO\n"]}, "1541": {"inputs": ["2\n2\n3 4\n0 2\n2 -2\n2 2\n3\n10 10 10\n0 0 0\n1 1 1\n5 5 5\n"], "outputs": ["2.0000\n0.0000\n"]}, "1542": {"inputs": ["2\n"], "outputs": ["270\n"]}, "1543": {"inputs": ["2\n5 2\n3 0 1 2\n3 2 3 4\n4 3\n2 0 1\n2 1 2\n2 2 3\n"], "outputs": ["3\n4"]}, "1544": {"inputs": ["5\n1\n2\n3\n4\n5\n"], "outputs": ["*\n*\n**\n*\n**\n***\n*\n**\n* *\n****\n*\n**\n* *\n*  *\n*****\n"]}, "1545": null, "1546": {"inputs": ["2\n3 4 5\n1 3 4\n"], "outputs": ["YES\nNO\n"]}, "1547": {"inputs": ["1 2 1 3 14\n", "5 4 2 10 100\n"], "outputs": ["3\n", "9\n"]}, "1548": {"inputs": ["2\n5\n6 5 5 5 2\n5\n1 2 3 4 5\n"], "outputs": ["6 5 4 3 2\n1 2 3 4 5\n"]}, "1549": {"inputs": ["2\n2\n4\n"], "outputs": ["2\n12\n012\n12\n2\n"]}, "1550": {"inputs": ["1\n3 4 2 \n"], "outputs": ["4\n"]}, "1551": {"inputs": ["2\ni do not have any fancy quotes\nwhen nothing goes right go left\n"], "outputs": ["Real Fancy\nregularly fancy\n"]}, "1552": {"inputs": ["3\n1 1 1\n1 2 1\n4 5 2\n"], "outputs": ["0\n1\n3\n"]}, "1553": {"inputs": ["4 4 \n3 4 15 23 \n14 20 12 9\n3 8 12 15\n12 20 7 5\n2\n2 2 3 4 \n4 2 4 2\n"], "outputs": ["76\n20"]}, "1554": {"inputs": ["3\n"], "outputs": ["2\n"]}, "1555": {"inputs": ["2\n"], "outputs": ["561\n"]}, "1556": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n10\n10\n101\n101\n101\n1010\n1010\n1010\n1010\n"]}, "1557": {"inputs": ["2\n5\n11000\n01001\n3\n110\n001\n"], "outputs": ["YES\nNO\n"]}, "1558": {"inputs": ["1\n2 3\n"], "outputs": ["6 4 3 3 2 1\n"]}, "1559": {"inputs": ["3\n2\n3\n5\n"], "outputs": ["12\n24\n240\n"]}, "1560": {"inputs": ["3\n1 3\n100\n3 1\n1 2 1\n3 2\n1 2 1\n"], "outputs": ["1\n3\n4\n"]}, "1561": {"inputs": ["3\n1\n2\n3\n"], "outputs": ["1\n1 2\n1 2 3\n"]}, "1562": {"inputs": ["1\n1\n5\n"], "outputs": ["2\n"]}, "1563": {"inputs": ["1\n24 1\n"], "outputs": ["34"]}, "1564": {"inputs": ["2\nINBY\nBYBY\n"], "outputs": ["3\n2\n"]}, "1565": {"inputs": ["2\n3 1 1\n1 \n8 \n22 \n1 2 3\n0 9 13 \n18 45 51 \n"], "outputs": ["1 \n7 \n14 \n0 9 4 \n18 18 2"]}, "1566": {"inputs": ["4\n2 2\n1 1 0\n1 2 1\n2 3\n1 1 0\n1 2 1\n2 1 0\n3 2\n2 2 0\n2 3 1\n3 3\n1 2 1\n2 3 1\n1 3 1\n"], "outputs": ["yes\nno\nyes\nno\n"]}, "1567": {"inputs": ["1\n8\nabbacddc\n"], "outputs": ["YES\n"]}, "1568": {"inputs": ["1\n4 \n1 2 3 4\n"], "outputs": ["3"]}, "1569": {"inputs": ["6\n"], "outputs": ["1234678\n"]}, "1570": {"inputs": ["2\n1\n2 \n"], "outputs": ["1\n5\n"]}, "1571": {"inputs": ["1\n3 30 2\n"], "outputs": ["60 1"]}, "1572": {"inputs": ["4 5 10 6 12 2 -1 4 2\n"], "outputs": ["6"]}, "1573": {"inputs": ["2\n3\n2\n"], "outputs": ["YES\n010\n001\n100\nNO\n"]}, "1574": {"inputs": ["5\n1 2 3 2 3\n"], "outputs": ["3\n"]}, "1575": null, "1576": {"inputs": ["3\n2\n3\n4\n"], "outputs": ["12\n21\n123\n231\n312\n1234\n2341\n3412\n4123\n"]}, "1577": {"inputs": ["4 10\n6 8 10 13\n3 1 2 2\n2 1 2\n3 1 2 3\n2 2 3\n1 1 7\n3 1 3 10\n2 3 1\n3 1 3 2\n2 1 4\n3 1 4 6\n"], "outputs": ["0\n-9/4\n7/1\n0\n0\n"]}, "1578": {"inputs": ["1\nab1231da\n"], "outputs": ["7\n"]}, "1579": {"inputs": ["4\n3\n1 2 7\n2\n1 2\n3\n6 5 8\n5\n12 32 45 23 47\n"], "outputs": ["NO\nYES\nYES\nNO\n"]}, "1580": {"inputs": ["2\nThis is a sample piece of text to illustrate this \nproblem. \n"], "outputs": ["10\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto"]}, "1581": {"inputs": ["1\n5 3 96\n1 3\n"], "outputs": ["48"]}, "1582": {"inputs": ["5\nRGGBG\n5\nRRRRR\n2\nBB\n"], "outputs": ["1\n4\n1"]}, "1583": {"inputs": ["2\n2 1 1 2 2 1 2\n3 1 1 1 3 1 2\n"], "outputs": ["2\n4\n"]}, "1584": {"inputs": ["2 3 3\n1 1\n0 0\n0 2\n"], "outputs": ["3\n"]}, "1585": {"inputs": ["1\n19 17\n"], "outputs": ["19 36"]}, "1586": {"inputs": ["4\n7 1 6 2\n"], "outputs": ["9 10 10 11\n"]}, "1587": {"inputs": ["2\n"], "outputs": ["5\n5 12 13\n6 8 10\n6 25 29\n7 15 20\n9 10 17"]}, "1588": {"inputs": ["2\n5\nKouta 1\nYuka 1\nMayu 3\nLucy 2\nNana 5\n2\nLucy 2\nNana 2\n"], "outputs": ["Lucy\nNobody wins.\n"]}, "1589": {"inputs": ["1\n33 100 77 42 12 -1\n"], "outputs": ["4 38.91\n"]}, "1590": {"inputs": ["1\n1 2 1\n"], "outputs": ["Yes\n"]}, "1591": {"inputs": ["4\n1\n2\n3\n4\n"], "outputs": ["1\n2\n6\n24"]}, "1592": {"inputs": ["1\n2\n4 5 2 3 4\n2 1 6\n"], "outputs": ["8\n"]}, "1593": {"inputs": ["3 \n1200\n500\n242\n"], "outputs": ["12\n5\n7"]}, "1594": {"inputs": ["2\n2\n10\n01\n4\n1000\n0010\n0100\n0001\n"], "outputs": ["3\n8\n"]}, "1595": {"inputs": ["- The first line of input contains a single integer T \u2014 the number of test cases.\n- First line of each test case contains a string S. Each symbol is either 'b' or 'w'. This is Chef's photo.\n- Second line of each test case contains a single integer N \u2014 the number of Chefgram\u2122 filters.\n- Each of the next N lines contains a single string Fi, each symbol of which is either '+' or '-'. This string is the ith Chefgram\u2122 filter.\n", "3\nwwwwwwwwww\n3\n+-+-+-+-+-\n----------\n+---------\nwbwbwbwbwb\n3\n+-+-+-+-+-\n+-+-------\n----+-+-+-\nbbbbbbbbbb\n2\n----------\n----------\n"], "outputs": ["- For each test case, output a single line containing a single integer \u2014 answer to Chef's question modulo 109+7.\n", "0\n2\n4\n"]}, "1596": {"inputs": ["2\n4 5\n3 5\n"], "outputs": ["0 0\n1 1\n"]}, "1597": {"inputs": ["3\n3 35\n5 50\n4 65\n"], "outputs": ["1\n10\n0\n"]}, "1598": {"inputs": ["2  \n3\nRahul 1345964789 47\nRupendra 1457856987 58\nPriya 1478569820 45\n2\nTanuja 4310779415 97\nAkash 3689781245 43\n"], "outputs": ["Priya 1478569820 45\nRahul 1345964789 47\nAkash 3689781245 43\n"]}, "1599": {"inputs": ["1\n3\n1 2\n1 3\n1 2 3\n"], "outputs": ["2\n"]}, "1600": null, "1601": {"inputs": ["2\n4 4\n3 4\n"], "outputs": ["9\n13\n"]}, "1602": {"inputs": ["3\n"], "outputs": ["Impossible\n"]}, "1603": {"inputs": ["10\nhttp://abacaba.ru/test\nhttp://abacaba.ru/\nhttp://abacaba.com\nhttp://abacaba.com/test\nhttp://abacaba.de/\nhttp://abacaba.ru/test\nhttp://abacaba.de/test\nhttp://abacaba.com/\nhttp://abacaba.com/t\nhttp://abacaba.com/test\n", "14\nhttp://c\nhttp://ccc.bbbb/aba..b\nhttp://cba.com\nhttp://a.c/aba..b/a\nhttp://abc/\nhttp://a.c/\nhttp://ccc.bbbb\nhttp://ab.ac.bc.aa/\nhttp://a.a.a/\nhttp://ccc.bbbb/\nhttp://cba.com/\nhttp://cba.com/aba..b\nhttp://a.a.a/aba..b/a\nhttp://abc/aba..b/a\n"], "outputs": ["1\nhttp://abacaba.de http://abacaba.ru \n", "2\nhttp://cba.com http://ccc.bbbb \nhttp://a.a.a http://a.c http://abc"]}, "1604": {"inputs": ["1 1\n.\n", "2 3\n...\n..R\n", "4 4\n...R\n.RR.\n.RR.\nR...\n"], "outputs": ["1\n", "0\n", "4\n"]}, "1605": {"inputs": ["1 1\n", "2 2\n"], "outputs": ["0\n", "8\n"]}, "1606": {"inputs": ["19 29\n", "3 6\n"], "outputs": ["2\n", "3\n"]}, "1607": {"inputs": ["QAQAQYSYIOIWIN\n", "QAQQQZZYNOIWIN\n"], "outputs": ["4\n", "3\n"]}, "1608": null, "1609": null, "1610": null, "1611": null, "1612": null, "1613": null, "1614": null, "1615": null, "1616": null, "1617": null, "1618": null, "1619": null, "1620": null, "1621": null, "1622": null, "1623": null, "1624": null, "1625": null, "1626": null, "1627": null, "1628": null, "1629": null, "1630": null, "1631": null, "1632": null, "1633": null, "1634": null, "1635": null, "1636": null, "1637": null, "1638": null, "1639": null, "1640": null, "1641": null, "1642": null, "1643": null, "1644": null, "1645": null, "1646": null, "1647": null, "1648": null, "1649": null, "1650": null, "1651": null, "1652": null, "1653": null, "1654": null, "1655": null, "1656": null, "1657": null, "1658": null, "1659": null, "1660": null, "1661": null, "1662": null, "1663": null, "1664": null, "1665": null, "1666": null, "1667": null, "1668": null, "1669": {"inputs": [" hand = [1,2,3,6,2,3,4,7,8], w = 3\n", " hand = [1,2,3,4,5], w = 4\n"], "outputs": [" true\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8].\n", " false\nExplanation: Alice's hand can't be rearranged into groups of 4.\n"]}, "1670": {"inputs": ["Happy Joy Joy!\nhttp://synapse.daiict.ac.in/\nplain_vanilla\n(**)\n?\nthe 7% solution\n#\n"], "outputs": ["Happy%20Joy%20Joy%21\nhttp://synapse.daiict.ac.in/\nplain_vanilla\n%28%2a%2a%29\n?\nthe%207%25%20solution"]}, "1671": {"inputs": ["3\n1\n2\n4\n"], "outputs": ["24\n19 33\n7 37 79 49\n"]}, "1672": {"inputs": ["0\n1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n10\n"], "outputs": ["f(10) = MAGNA NIMIS!\nf(-9) = -3642.00\nf(-8) = -2557.17\nf(-7) = -1712.35\nf(-6) = -1077.55\nf(-5) = -622.76\nf(-4) = -318.00\nf(-3) = -133.27\nf(-2) = -38.59\nf(1) = 6.00\nf(0) = 0.00"]}, "1673": {"inputs": [" arr = [[1,2,3],[4,5,6],[7,8,9]]\n"], "outputs": [" 13\nExplanation: \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\u00a0[1,5,7], so the answer is\u00a013.\n"]}, "1674": {"inputs": [" piles = [2,7,9,4,4]\n"], "outputs": [" 10\nExplanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes 2 piles again. Alex can get 2 + 4 + 4 = 10 piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get 2 + 7 = 9 piles in total. So we return 10 since it's larger. \n"]}, "1675": {"inputs": ["3\n"], "outputs": ["1.00\n2.83\n18.21\n"]}, "1676": {"inputs": ["8 3 11\n6 14 12\n5 10 11\n5 7 11\n16 19 1\n-1 -1 -1\n"], "outputs": ["3 6 5 2 2 2 1 10 8\n1 4 8 2 6 1 3 7 2\n1 5 8 3 4 8 2 6 8\n3 9 8 2 10 7 1 1 6\n3 10 8 2 8 3 -1 -1 -1\n"]}, "1677": {"inputs": ["5\n2 3 2 3 1\n3 4 4 6 3\n"], "outputs": ["18\n"]}, "1678": {"inputs": ["3 2\n10 1 100\n4 3\n"], "outputs": ["2 1\n0 0\n1 0\n0 1\n"]}, "1679": {"inputs": ["3\n5 1 4\n5 2 4\n5 3 4\n"], "outputs": ["4 4 4 4 4\n3 7 3 7 3\n11 6 9 11 6\n"]}, "1680": {"inputs": ["3\n24 1\n4358 754\n305 794\n"], "outputs": ["34\n1998\n1"]}, "1681": {"inputs": ["2\n3 3\n4 2\n"], "outputs": ["9 1 0\n1 0 2\n7 5 8\n2 2\n3 0\n1 1\n0 1\n"]}, "1682": null, "1683": null, "1684": {"inputs": ["2\n1\n6\n"], "outputs": ["4\n5 10 5 10 5 5"]}, "1685": null, "1686": {"inputs": ["3 4 2\n1 1 1 1\n0 1 1 1\n1 1 1 1\n"], "outputs": ["5\n"]}, "1687": {"inputs": ["2\n3 7\n4 6\n"], "outputs": ["5 3\n1 7\n0 4\n2 5\n3 1\n4 2 \n7 0\n1 10\n10 14\n15 1\n14 13\n5 15\n13 5\n"]}, "1688": {"inputs": ["5\n1 \n1\n2 \n1 2\n2 \n1 1\n4\n1 2 2 1\n7 \n1 2 2 1 3 2 4\n"], "outputs": ["7\n36\n54\n1531\n1730418\n"]}, "1689": {"inputs": ["2\n3 3\nxab\na#z\ncaa\n5 4\npyqs\nvcot\nqbiu\nlihj\nuvmz\n"], "outputs": ["xabza\npvcbihjz\n"]}, "1690": {"inputs": ["4 2\n4 4 6 7 8\n4 8 3 0 4\n2 0 10\n6 1 2 3 0 5 8\n"], "outputs": ["3\n"]}, "1691": {"inputs": ["3 3 10\n4\n0\n3\n1\n6\n"], "outputs": ["1 1 2 1 2 1 3\n1 3 3 1 3 1 1\n1 3 3 1 3 2 2\n1 1 2 3 3 1 1\n2 3 3 1 3\n3\n2 2 1\n2 2 1\n2 2 2\n"]}, "1692": null, "1693": {"inputs": ["2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\n"], "outputs": ["poisson\nuniform\n"]}, "1694": null, "1695": {"inputs": ["\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430.\nThis problem doesn't have sample input and output.\n"], "outputs": ["\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043d\u0438\u0436\u0435.\nSee the note below.\n"]}, "1696": null, "1697": null, "1698": null, "1699": null, "1700": null, "1701": null, "1702": null, "1703": {"inputs": ["+++++[>++++.<-]\n"], "outputs": ["*p += 5;\nif (*p) do {\n  p += 1;\n  *p += 4;\n  putchar(*p);\n  p -= 1;\n  *p -= 1;\n} while (*p);"]}, "1704": null, "1705": null, "1706": null, "1707": null, "1708": null, "1709": null, "1710": null, "1711": null, "1712": null, "1713": null, "1714": null, "1715": null, "1716": null, "1717": null, "1718": null, "1719": null, "1720": null, "1721": null, "1722": null, "1723": null, "1724": null, "1725": null, "1726": null, "1727": null, "1728": null, "1729": null, "1730": null, "1731": null, "1732": null, "1733": null, "1734": null, "1735": null, "1736": null, "1737": null, "1738": null, "1739": null, "1740": null, "1741": null, "1742": null, "1743": null, "1744": null, "1745": null, "1746": null, "1747": null, "1748": null, "1749": null, "1750": null, "1751": null, "1752": null, "1753": null, "1754": null, "1755": null, "1756": null, "1757": null, "1758": null, "1759": null, "1760": null, "1761": null, "1762": null, "1763": null, "1764": null, "1765": null, "1766": null, "1767": null, "1768": null, "1769": null, "1770": null, "1771": null, "1772": null, "1773": null, "1774": null, "1775": null, "1776": null, "1777": null, "1778": null, "1779": null, "1780": null, "1781": null, "1782": null, "1783": null, "1784": null, "1785": null, "1786": null, "1787": null, "1788": null, "1789": null, "1790": null, "1791": null, "1792": null, "1793": null, "1794": null, "1795": null, "1796": null, "1797": null, "1798": null, "1799": null, "1800": null, "1801": null, "1802": null, "1803": null, "1804": null, "1805": {"inputs": [" watchedvideos = [[\"a\",\"b\"],[\"c\"],[\"b\",\"c\"],[\"d\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\n", " watchedvideos = [[\"a\",\"b\"],[\"c\"],[\"b\",\"c\"],[\"d\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\n"], "outputs": [" [\"b\",\"c\"] \nExplanation: \nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -> watchedVideos = [\"C\"]\u00a0\nPerson with id = 2 -> watchedVideos = [\"B\",\"C\"]\u00a0\nThe frequencies of watchedVideos by your friends are:\u00a0\nB -> 1\u00a0\nC -> 2\n", " [\"d\"]\nExplanation: \nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).\n"]}, "1806": null, "1807": {"inputs": [" n = 2\n", " n = 3\n", " n = 4\n", " n = 1\n"], "outputs": [" [\"1/2\"]\nExplanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.\n", " [\"1/2\",\"1/3\",\"2/3\"]\n", " [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\nExplanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\".\n", " []\n"]}, "1808": {"inputs": [" [ [1,2], [2,3], [3,4], [1,3] ]\n", " [ [1,2], [1,2], [1,2] ]\n", " [ [1,2], [2,3] ]\n"], "outputs": [" 1\n", " 2\n", " 0\n"]}, "1809": {"inputs": ["  [1,2,3,4]\n"], "outputs": [" [24,12,8,6]\n"]}, "1810": {"inputs": [" names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\n", " names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\n", " names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\n", " names = [\"wano\",\"wano\",\"wano\",\"wano\"]\n", " names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]\n"], "outputs": [" [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\nExplanation: Let's see how the file system creates folder names:\n\"pes\" --> not assigned before, remains \"pes\"\n\"fifa\" --> not assigned before, remains \"fifa\"\n\"gta\" --> not assigned before, remains \"gta\"\n\"pes(2019)\" --> not assigned before, remains \"pes(2019)\"\n", " [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\nExplanation: Let's see how the file system creates folder names:\n\"gta\" --> not assigned before, remains \"gta\"\n\"gta(1)\" --> not assigned before, remains \"gta(1)\"\n\"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\n\"avalon\" --> not assigned before, remains \"avalon\"\n", " [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\nExplanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\".\n", " [\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]\nExplanation: Just increase the value of k each time you create folder \"wano\".\n", " [\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]\nExplanation: Please note that system adds the suffix (k) to current name even it contained the same suffix before.\n"]}, "1811": {"inputs": [" [\"stockspanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"], [[],[100],[80],[60],[70],[60],[75],[85]]\n"], "outputs": [" [null,1,1,1,2,1,4,6]\nExplanation: \nFirst, S = StockSpanner() is initialized.  Then:\nS.next(100) is called and returns 1,\nS.next(80) is called and returns 1,\nS.next(60) is called and returns 1,\nS.next(70) is called and returns 2,\nS.next(60) is called and returns 1,\nS.next(75) is called and returns 4,\nS.next(85) is called and returns 6.\n"]}, "1812": null, "1813": {"inputs": [" books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4\n"], "outputs": [" 6\nExplanation:\nThe sum of the heights of the 3 shelves are 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf.\n"]}, "1814": null, "1815": {"inputs": [" s = \"abc\", shifts = [3,5,9]\n"], "outputs": [" \"rpl\"\nExplanation: \nWe start with \"abc\".\nAfter shifting the first 1 letters of S by 3, we have \"dbc\".\nAfter shifting the first 2 letters of S by 5, we have \"igc\".\nAfter shifting the first 3 letters of S by 9, we have \"rpl\", the answer.\n"]}, "1816": {"inputs": [" keyname = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keytime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]\n", " keyname = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keytime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]\n", " keyname = [\"john\",\"john\",\"john\"], keytime = [\"23:58\",\"23:59\",\"00:01\"]\n", " keyname = [\"leslie\",\"leslie\",\"leslie\",\"clare\",\"clare\",\"clare\",\"clare\"], keytime = [\"13:00\",\"13:20\",\"14:00\",\"18:00\",\"18:51\",\"19:30\",\"19:49\"]\n"], "outputs": [" [\"daniel\"]\nExplanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\").\n", " [\"bob\"]\nExplanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").\n", " []\n", " [\"clare\",\"leslie\"]\n"]}, "1817": {"inputs": [" [[0,2],[1,3]]\n", " [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n"], "outputs": [" 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\n", " 16\nExplanation:\n 0  1  2  3  4\n24 23 22 21  5\n12 13 14 15 16\n11 17 18 19 20\n10  9  8  7  6\n"]}, "1818": {"inputs": [" [0,1,2,3,4,3,4]\n", " [25,1,3,1,3,0,2]\n", " [2,2,1,null,1,0,null,0]\n"], "outputs": [" \"dba\"\n", " \"adz\"\n", " \"abc\"\n"]}, "1819": null, "1820": null, "1821": {"inputs": [" nums = [5,2,3,1]\n", " nums = [5,1,1,2,0,0]\n"], "outputs": [" [1,2,3,5]\n", " [0,0,1,1,2,5]\n"]}, "1822": {"inputs": [" [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\n", " [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\n"], "outputs": [" [\"i\", \"love\"]\nExplanation: \"i\" and \"love\" are the two most frequent words.\n    Note that \"i\" comes before \"love\" due to a lower alphabetical order.\n", " [\"the\", \"is\", \"sunny\", \"day\"]\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words,\n    with the number of occurrence being 4, 3, 2 and 1 respectively.\n"]}, "1823": null, "1824": {"inputs": [" [1,3,5,4,7]\n", " [2,2,2,2,2]\n"], "outputs": [" 2\nExplanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].\n", " 5\nExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.\n"]}, "1825": {"inputs": [" root = [1,2,3]\n", " root = [1,2,3,4]\n", " root = [1,2,3,4,5]\n"], "outputs": [" [1,2,3]\nExplanation: \nThe deepest leaves are the nodes with values 2 and 3.\nThe lowest common ancestor of these leaves is the node with value 1.\nThe answer returned is a TreeNode object (not an array) with serialization \"[1,2,3]\".\n", " [4]\n", " [2,4,5]\n"]}, "1826": {"inputs": [" mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n", " mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\n"], "outputs": [" [[12,21,16],[27,45,33],[24,39,28]]\n", " [[45,45,45],[45,45,45],[45,45,45]]\n"]}, "1827": {"inputs": [" \"13\"\n", " \"4681\"\n", " \"1000000000000000000\"\n"], "outputs": [" \"3\"\nExplanation: 13 base 3 is 111.\n", " \"8\"\nExplanation: 4681 base 8 is 11111.\n", " \"999999999999999999\"\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\n"]}, "1828": {"inputs": [" [1,1,1,2,2,2]\n", " [1,1,1,1,2,2,3,3]\n"], "outputs": [" [2,1,2,1,2,1]\n", " [1,3,1,3,2,1,2,1]\n"]}, "1829": {"inputs": [" root = [3,1,4,3,null,1,5]\n", " root = [3,3,null,4,2]\n", " root = [1]\n"], "outputs": [" 4\nExplanation: Nodes in blue are good.\nRoot Node (3) is always a good node.\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\nNode 5 -> (3,4,5) is the maximum value in the path\nNode 3 -> (3,1,3) is the maximum value in the path.\n", " 3\nExplanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it.\nExample 3:\n", " 1\nExplanation: Root is considered as good.\n"]}, "1830": {"inputs": [" rains = [1,2,3,4]\n", " rains = [1,2,0,0,2,1]\n", " rains = [1,2,0,1,2]\n", " rains = [69,0,0,0,69]\n", " rains = [10,20,20]\n"], "outputs": [" [-1,-1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake.\n", " [-1,-1,2,1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.\n", " []\nExplanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.\n", " [-1,69,1,1,-1]\nExplanation: Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9\n", " []\nExplanation: It will rain over lake 20 two consecutive days. There is no chance to dry any lake.\n"]}, "1831": {"inputs": [" [2, 3, 1, 4, 0]\n", " [1, 3, 0, 2, 4]\n"], "outputs": [" 3\nExplanation:  \nScores for each K are listed below: \nK = 0,  A = [2,3,1,4,0],    score 2\nK = 1,  A = [3,1,4,0,2],    score 3\nK = 2,  A = [1,4,0,2,3],    score 3\nK = 3,  A = [4,0,2,3,1],    score 4\nK = 4,  A = [0,2,3,1,4],    score 3\n", " 0\nExplanation:  A will always have 3 points no matter how it shifts.\nSo we will choose the smallest K, which is 0.\n"]}, "1832": {"inputs": [" edges = [[0,1,10],[0,2,1],[1,2,2]], m = 6, n = 3\n", " edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], m = 10, n = 4\n"], "outputs": [" 13\nExplanation: \nThe nodes that are reachable in the final graph after M = 6 moves are indicated below.\n", " 23\n"]}, "1833": {"inputs": [" root = [3,5,1,6,2,0,8,null,null,7,4]\n", " root = [1]\n", " root = [0,1,3,null,2]\n"], "outputs": [" [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\n", " [1]\nExplanation: The root is the deepest node in the tree.\n", " [2]\nExplanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\n"]}, "1834": {"inputs": [" [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n"], "outputs": [" 39\nExplanation:\nToggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n"]}, "1835": {"inputs": [" n = 3, k = 7\n", " n = 2, k = 1\n", " n = 2, k = 0\n", " n = 2, k = 1\n", " n = 2, k = 2\n"], "outputs": [" [181,292,707,818,929]\nExplanation: Note that 070 is not a valid number, because it has leading zeroes.\n", " [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n", " [11,22,33,44,55,66,77,88,99]\n", " [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n", " [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]\n"]}, "1836": null, "1837": {"inputs": [" orders = [[\"david\",\"3\",\"ceviche\"],[\"corina\",\"10\",\"beef burrito\"],[\"david\",\"3\",\"fried chicken\"],[\"carla\",\"5\",\"water\"],[\"carla\",\"5\",\"ceviche\"],[\"rous\",\"3\",\"ceviche\"]]\n", " orders = [[\"james\",\"12\",\"fried chicken\"],[\"ratesh\",\"12\",\"fried chicken\"],[\"amadeus\",\"12\",\"fried chicken\"],[\"adam\",\"1\",\"canadian waffles\"],[\"brianna\",\"1\",\"canadian waffles\"]]\n", " orders = [[\"laura\",\"2\",\"bean burrito\"],[\"jhon\",\"2\",\"beef burrito\"],[\"melissa\",\"2\",\"soda\"]]\n"], "outputs": [" [[\"table\",\"beef burrito\",\"ceviche\",\"fried chicken\",\"water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \nExplanation:\nThe displaying table looks like:\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3    ,0           ,2      ,1            ,0\n5    ,0           ,1      ,0            ,1\n10   ,1           ,0      ,0            ,0\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\nFor the table 10: Corina orders \"Beef Burrito\". \n", " [[\"table\",\"canadian waffles\",\"fried chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \nExplanation: \nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\".\n", " [[\"table\",\"bean burrito\",\"beef burrito\",\"soda\"],[\"2\",\"1\",\"1\",\"1\"]]\n"]}, "1838": null, "1839": {"inputs": [" board = [\"o\u00a0 \", \"\u00a0 \u00a0\", \"\u00a0 \u00a0\"]\n", " board = [\"xox\", \" x \", \"   \"]\n", " board = [\"xxx\", \"   \", \"ooo\"]\n", " board = [\"xox\", \"o o\", \"xox\"]\n"], "outputs": [" false\nExplanation: The first player always plays \"X\".\n", " false\nExplanation: Players take turns making moves.\n", " false\n", " true\n"]}, "1840": {"inputs": [" root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\n", " root = [1,1,1,null,1,null,null,1,1,null,1]\n", " root = [1]\n"], "outputs": [" 3\nExplanation: Longest ZigZag path in blue nodes (right -> left -> right).\n", " 4\nExplanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).\n", " 0\n"]}, "1841": {"inputs": [" arr = [1,2,3,4,5], k = 2\n", " arr = [1,1,3,5,5], k = 2\n", " arr = [6,7,11,7,6,8], k = 5\n", " arr = [6,-3,7,2,11], k = 3\n", " arr = [-7,22,17,3], k = 2\n"], "outputs": [" [5,1]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.\n", " [5,5]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].\n", " [11,8,6,6,7]\nExplanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is accepted.\n", " [-3,11,2]\n", " [22,17]\n"]}, "1842": {"inputs": [" n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\n", " n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\n", " n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6\n"], "outputs": [" 0.16666666666666666 \nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. \n", " 0.3333333333333333\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. \n", " 0.16666666666666666\n"]}, "1843": {"inputs": ["[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]\n"], "outputs": ["[null,null,null,null,[2],[2,1],null,[4]]\n"]}, "1844": {"inputs": [" [\"23:59\",\"00:00\"]\n"], "outputs": [" 1\n"]}, "1845": null, "1846": {"inputs": [" [1,null,0,0,1]\n", " [1,0,1,0,0,0,1]\n", " [1,1,0,1,1,0,1,0]\n"], "outputs": [" [1,null,0,null,1]\n", " [1,null,1,null,1]\n", " [1,1,0,1,1,null,1]\n"]}, "1847": {"inputs": ["[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\n", "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\n"], "outputs": ["[null,1,null,5,5,null,10,5]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5\n", "[null,1,null,100,100,null,20]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20\n"]}, "1848": null, "1849": null, "1850": {"inputs": [" n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n"], "outputs": [" [8,12,6,10,10,10]\nExplanation: \nHere is a diagram of the given tree:\n  0\n / \\\n1   2\n   /|\\\n  3 4 5\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.\n"]}, "1851": {"inputs": [" clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], t = 10\n", " clips = [[0,1],[1,2]], t = 5\n", " clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], t = 9\n", " clips = [[0,4],[2,8]], t = 5\n"], "outputs": [" 3\nExplanation: \nWe take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n", " -1\nExplanation: \nWe can't cover [0,5] with only [0,1] and [1,2].\n", " 3\nExplanation: \nWe can take clips [0,4], [4,7], and [6,9].\n", " 2\nExplanation: \nNotice you can have extra video after the event ends.\n"]}, "1852": {"inputs": [" 3\n"], "outputs": ["[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\nExplanation:\nThe above output corresponds to the 5 unique BST's shown below:\n"]}, "1853": {"inputs": [" n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distancethreshold = 4\n", " n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distancethreshold = 2\n"], "outputs": [" 3\nExplanation: The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> [City 1, City 2]\u00a0\nCity 1 -> [City 0, City 2, City 3]\u00a0\nCity 2 -> [City 0, City 1, City 3]\u00a0\nCity 3 -> [City 1, City 2]\u00a0\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.\n", " 0\nExplanation: The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -> [City 1]\u00a0\nCity 1 -> [City 0, City 4]\u00a0\nCity 2 -> [City 3, City 4]\u00a0\nCity 3 -> [City 2, City 4]\nCity 4 -> [City 1, City 2, City 3]\u00a0\nThe city 0 has 1 neighboring city at a distanceThreshold = 2.\n"]}, "1854": null, "1855": {"inputs": ["    2\n   / \\\n  1   3\n"], "outputs": [" false\nExplanation: The input is: [5,1,4,null,null,3,6]. The root node's value\nis 5 but its right child's value is 4."]}, "1856": {"inputs": [" grid = [[0,0,0,0,0,1],\n               [1,1,0,0,1,0],\n\u00a0              [0,0,0,0,1,1],\n\u00a0              [0,0,1,0,1,0],\n\u00a0              [0,1,1,0,0,0],\n\u00a0              [0,1,1,0,0,0]]\n", " grid = [[0,0,1,1,1,1],\n\u00a0              [0,0,0,0,1,1],\n\u00a0              [1,1,0,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,0]]\n"], "outputs": [" 11\nExplanation:\nOne possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].\n", " 9\n"]}, "1857": {"inputs": [" n = 3, reservedseats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\n", " n = 2, reservedseats = [[2,1],[1,8],[2,6]]\n", " n = 4, reservedseats = [[4,3],[1,4],[4,6],[1,7]]\n"], "outputs": [" 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n", " 2\n", " 4\n"]}, "1858": {"inputs": ["[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]\n", "[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]\n", "[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]\n"], "outputs": ["[null,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True \n", "[null,true,true,false]\nExplanation\nFindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False\nExample 3:\n", "[null,true,false,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True\n"]}, "1859": {"inputs": [" matrix =\n[\n\u00a0 [0,1,1,1],\n\u00a0 [1,1,1,1],\n\u00a0 [0,1,1,1]\n]\n", " matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\n"], "outputs": [" 15\nExplanation: \nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is  1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15.\n", " 7\nExplanation: \nThere are 6 squares of side 1.  \nThere is 1 square of side 2. \nTotal number of squares = 6 + 1 = 7.\n"]}, "1860": {"inputs": [" [[1, 2], [2, 3], [6, 1]]\n", " [[100, 100], [200, 100]]\n"], "outputs": [" [2, 5, 5]\nExplanation:\n", " [100, 100]\nExplanation: Adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces.\n"]}, "1861": {"inputs": [" [[1,1],[1,3],[3,1],[3,3],[2,2]]\n", " [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n"], "outputs": [" 4\n", " 2\n"]}, "1862": {"inputs": [" arr = [3,2,4,1]\n", " arr = [1,2,3]\n"], "outputs": [" [4,2,4,3]\nExplanation: \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.\nNotice that we return an array of the chosen k values of the pancake flips.\n", " []\nExplanation: The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted.\n"]}, "1863": {"inputs": [" [3,9,20,null,null,15,7]\n", " [1,2,3,4,5,6,7]\n"], "outputs": [" [[9],[3,15],[20],[7]]\nExplanation: \nWithout loss of generality, we can assume the root node is at position (0, 0):\nThen, the node with value 9 occurs at position (-1, -1);\nThe nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);\nThe node with value 20 occurs at position (1, -1);\nThe node with value 7 occurs at position (2, -2).\n", " [[4],[2],[1,5,6],[3],[7]]\nExplanation: \nThe node with value 5 and the node with value 6 have the same position according to the given scheme.\nHowever, in the report \"[1,5,6]\", the node value of 5 comes first since 5 is smaller than 6.\n"]}, "1864": {"inputs": [" \"{a,b}{c,{d,e}}\"\n", " \"{{a,z},a{b,c},{ab,z}}\"\n"], "outputs": [" [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]\n", " [\"a\",\"ab\",\"ac\",\"z\"]\nExplanation: Each distinct word is written only once in the final answer.\n"]}, "1865": {"inputs": [" grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n", " grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n", " grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n\u00a0              [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n", " grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\"S\",\"#\",\".\",\"B\",\"T\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n"], "outputs": [" 3\nExplanation: We return only the number of times the box is pushed.\n", " -1\n", " 5\nExplanation:  push the box down, left, left, up and up.\n", " -1\n"]}, "1866": {"inputs": ["words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\nmaxWidth = 16\n", "words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\nmaxWidth = 16\n", "words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\n\u00a0        \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\nmaxWidth = 20\n"], "outputs": ["[\n\u00a0 \u00a0\"This \u00a0 \u00a0is \u00a0 \u00a0an\",\n\u00a0 \u00a0\"example \u00a0of text\",\n\u00a0 \u00a0\"justification. \u00a0\"\n]\n", "[\n\u00a0 \"What \u00a0 must \u00a0 be\",\n\u00a0 \"acknowledgment \u00a0\",\n\u00a0 \"shall be \u00a0 \u00a0 \u00a0 \u00a0\"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\",\n\u00a0            because the last line must be left-justified instead of fully-justified.\n             Note that the second line is also left-justified becase it contains only one word.\n", "[\n\u00a0 \"Science \u00a0is \u00a0what we\",\n  \"understand \u00a0 \u00a0 \u00a0well\",\n\u00a0 \"enough to explain to\",\n\u00a0 \"a \u00a0computer. \u00a0Art is\",\n\u00a0 \"everything \u00a0else \u00a0we\",\n\u00a0 \"do \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"\n]"]}, "1867": {"inputs": [" root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n\u00a0  2\n", " root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n"], "outputs": [" 1\n", " 3\n"]}, "1868": {"inputs": [" 4\n", " 5\n"], "outputs": [" [2,1,4,3]\n", " [3,1,2,5,4]\n"]}, "1869": {"inputs": [" \"1-2--3--4-5--6--7\"\n", " \"1-2--3---4-5--6---7\"\n", " \"1-401--349---90--88\"\n"], "outputs": [" [1,2,5,3,4,6,7]\n", " [1,2,5,3,null,6,null,4,null,7]\n", " [1,401,null,349,88,90]\n"]}, "1870": {"inputs": [" count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n", " count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n"], "outputs": [" [1.00000,3.00000,2.37500,2.50000,3.00000]\n", " [1.00000,4.00000,2.18182,2.00000,1.00000]\n"]}, "1871": {"inputs": [" [8,3,10,1,6,null,14,null,null,4,7,13]\n"], "outputs": [" 7\nExplanation: \nWe have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\n"]}, "1872": {"inputs": [" root = [1,7,0,7,-8,null,null]\n", " root = [989,null,10250,98693,-89388,null,null,null,-32127]\n"], "outputs": [" 2\nExplanation: \nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2.\n", " 2\n"]}, "1873": {"inputs": [" k = 0\n", " k = 5\n"], "outputs": [" 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.\n", " 0\nExplanation: There is no x such that x! ends in K = 5 zeroes.\n"]}, "1874": {"inputs": [" [[1,2], [3], [3], []] \n"], "outputs": [" [[0,1,3],[0,2,3]] \nExplanation: The graph looks like this:\n0--->1\n|    |\nv    v\n2--->3\nThere are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\n"]}, "1875": null, "1876": {"inputs": [" heights = [2,1,1,2,1,2,2], v = 4, k = 3\n", " heights = [1,2,3,4], v = 2, k = 2\n", " heights = [3,1,3], v = 5, k = 1\n"], "outputs": [" [2,2,2,3,2,2,2]\nExplanation:\n#       #\n#       #\n##  # ###\n#########\n 0123456    \n", " [2,3,3,4]\nExplanation:\nThe last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.\n", " [4,4,4]\n"]}, "1877": {"inputs": [" root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\n", " root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\n", " root = [1,2,-3,-5,null,4,null], limit = -1\n"], "outputs": [" [1,2,3,4,null,null,7,8,9,null,14]\n", " [5,4,8,11,null,17,4,7,null,null,null,5]\n", " [1,null,-3,4]\n"]}, "1878": null, "1879": {"inputs": [" root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\n"], "outputs": [" 15\n"]}, "1880": {"inputs": [" cells = [0,1,0,1,1,0,0,1], n = 7\n", " cells = [1,0,0,1,0,0,1,0], n = 1000000000\n"], "outputs": [" [0,0,1,1,0,0,0,0]\nExplanation: \nThe following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n", " [0,0,1,1,1,1,1,0]\n"]}, "1881": {"inputs": [" schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]\n", " schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]\n"], "outputs": [" [[3,4]]\nExplanation:\nThere are a total of three employees, and all common\nfree time intervals would be [-inf, 1], [3, 4], [10, inf].\nWe discard any intervals that contain inf as they aren't finite.\n", " [[5,6],[7,9]]\n"]}, "1882": null, "1883": {"inputs": [" [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n", " [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n", " [[0,1],[2,0]]\n"], "outputs": [" 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n", " 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n", " 0\nExplanation: \nThere is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\n"]}, "1884": {"inputs": ["beginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n", "beginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n"], "outputs": ["[\n  [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n\u00a0 [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n]\n", " []\n"]}, "1885": null, "1886": null, "1887": {"inputs": ["[[1,1,0],\n [1,1,0],\n [0,0,1]]\n", "[[1,1,0],\n [1,1,1],\n [0,1,1]]\n"], "outputs": [" 2\nExplanation:The 0th and 1st students are direct friends, so they are in a friend circle. The 2nd student himself is in a friend circle. So return 2.\n", " 1\nExplanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.\n"]}, "1888": {"inputs": ["A binary tree as following:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n", "A binary tree as following:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n"], "outputs": ["       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n", "      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n"]}, "1889": {"inputs": ["[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\n"], "outputs": [" [20,24]\nExplanation: \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n"]}, "1890": null, "1891": {"inputs": [" 4\n"], "outputs": [" [\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n"]}, "1892": null, "1893": {"inputs": ["[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\n", "[\n\u00a0 [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n\u00a0 [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n\u00a0 [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n\u00a0 [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n\u00a0 [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n\u00a0 [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n\u00a0 [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n\u00a0 [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n\u00a0 [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\n"], "outputs": [" true\n", " false\nExplanation: Same as Example 1, except with the 5 in the top left corner being \n    modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n"]}, "1894": {"inputs": ["root = [1, 2, 3], k = 5\n", "root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n"], "outputs": [" [[1],[2],[3],[],[]]\nExplanation:\nThe input and each element of the output are ListNodes, not arrays.\nFor example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but it's string representation as a ListNode is [].\n", " [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n"]}, "1895": {"inputs": [" nums = [1, 1, 2]\n"], "outputs": [" false\nExplanation: \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n"]}, "1896": null, "1897": {"inputs": [" arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\n", " arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\n"], "outputs": [" [2,7,14,8] \nExplanation: \nThe binary representation of the elements in the array are:\n1 = 0001 \n3 = 0011 \n4 = 0100 \n8 = 1000 \nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2 \n[1,2] = 3 xor 4 = 7 \n[0,3] = 1 xor 3 xor 4 xor 8 = 14 \n[3,3] = 8\n", " [8,0,4,4]\n"]}, "1898": {"inputs": [" root = [1,2,3,4,5,6,7], to_delete = [3,5]\n"], "outputs": [" [[1,2,null,4],[6],[7]]\n"]}, "1899": {"inputs": [" a = [[0,1],[1,0]]\n", " a = [[0,1,0],[0,0,0],[0,0,1]]\n", " a = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n"], "outputs": [" 1\n", " 2\nExample 3:\n", " 1\n"]}, "1900": null, "1901": {"inputs": [" [[1, 0], [0, 1]]\n", " [[1, 1], [1, 0]]\n", " [[1, 1], [1, 1]]\n"], "outputs": [" 3\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\n", " 4\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\nExample 3:\n", " 4\nExplanation: Can't change any 0 to 1, only one island with area = 4.\n"]}, "1902": {"inputs": [" low = 100, high = 300\n", " low = 1000, high = 13000\n"], "outputs": [" [123,234]\n", " [1234,2345,3456,4567,5678,6789,12345]\n"]}, "1903": {"inputs": [" points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\n", " points = [[3,12],[-2,5],[-4,1]]\n", " points = [[0,0],[1,1],[1,0],[-1,1]]\n", " points = [[-1000000,-1000000],[1000000,1000000]]\n", " points = [[0,0]]\n"], "outputs": [" 20\nExplanation:\n", " 18\n", " 4\n", " 4000000\n", " 0\n"]}, "1904": {"inputs": [" points = [[1,3],[-2,2]], k = 1\n", " points = [[3,3],[5,-1],[-2,4]], k = 2\n"], "outputs": [" [[-2,2]]\nExplanation: \nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].\n", " [[3,3],[-2,4]]\n(The answer [[-2,4],[3,3]] would also be accepted.)\n"]}, "1905": null, "1906": null, "1907": {"inputs": [" tree = [7,4,3,null,null,6,19], target = 3\n", " tree = [7], target =  7\n", " tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4\n", " tree = [1,2,3,4,5,6,7,8,9,10], target = 5\n", " tree = [1,2,null,3], target = 2\n"], "outputs": [" 3\nExplanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.\n", " 7\n", " 4\n", " 5\n", " 2\n"]}, "1908": {"inputs": ["    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n"], "outputs": [" 6"]}, "1909": {"inputs": [" grid = [[1,1,1],[1,0,1],[1,1,1]]\n", " grid = [[1,1,0,0]]\n"], "outputs": [" 9\n", " 1\n"]}, "1910": null, "1911": {"inputs": [" 4->2->1->3\n", " -1->5->3->4->0\n"], "outputs": [" 1->2->3->4\n", " -1->0->3->4->5"]}, "1912": null, "1913": {"inputs": [" [3,2,1]\n", " [1,1,5]\n", " [1,9,4,6,7]\n", " [3,1,1,3]\n"], "outputs": [" [3,1,2]\nExplanation: Swapping 2 and 1.\n", " [1,1,5]\nExplanation: This is already the smallest permutation.\n", " [1,7,4,6,9]\nExplanation: Swapping 9 and 7.\n", " [1,3,1,3]\nExplanation: Swapping 1 and 3.\n"]}, "1914": {"inputs": [" costs = [[10,20],[30,200],[400,50],[30,20]]\n", " costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n", " costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\n"], "outputs": [" 110\nExplanation: \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n", " 1859\n", " 3086\n"]}, "1915": {"inputs": [" stamp = \"abc\", target = \"ababc\"\n", " stamp = \"abca\", target = \"aabcaca\"\n"], "outputs": [" [0,2]\n([1,0,2] would also be accepted as an answer, as well as some other answers.)\n", " [3,0,1]\n"]}, "1916": {"inputs": [" [1,2,3]\n", " [-10,9,20,null,null,15,7]\n"], "outputs": [" 6\n", " 42"]}, "1917": {"inputs": ["formula = \"H2O\"\n", "formula = \"Mg(OH)2\"\n", "formula = \"K4(ON(SO3)2)2\"\n"], "outputs": [" \"h2o\"\nExplanation: \nThe count of elements are {'H': 2, 'O': 1}.\n", " \"h2mgo2\"\nExplanation: \nThe count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\n", " \"k4n2o14s4\"\nExplanation: \nThe count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\n"]}, "1918": {"inputs": [" tickets = [[\"muc\", \"lhr\"], [\"jfk\", \"muc\"], [\"sfo\", \"sjc\"], [\"lhr\", \"sfo\"]]\n", " tickets = [[\"jfk\",\"sfo\"],[\"jfk\",\"atl\"],[\"sfo\",\"atl\"],[\"atl\",\"jfk\"],[\"atl\",\"sfo\"]]\n"], "outputs": [" [\"jfk\", \"muc\", \"lhr\", \"sfo\", \"sjc\"]\n", " [\"jfk\",\"atl\",\"jfk\",\"sfo\",\"atl\",\"sfo\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"]. But it is larger in lexical order.\n"]}, "1919": {"inputs": [" 2, [[1,0]] \n", " 4, [[1,0],[2,0],[3,1],[3,2]]\n"], "outputs": [" [0,1]\nExplanation:\u00a0There are a total of 2 courses to take. To take course 1 you should have finished   \n\u00a0            course 0. So the correct course order is [0,1] .\n", " [0,1,2,3] or [0,2,1,3]\nExplanation:\u00a0There are a total of 4 courses to take. To take course 3 you should have finished both     \n             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. \n\u00a0            So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .\n"]}, "1920": {"inputs": [" inputs = [\"timemap\",\"set\",\"get\",\"get\",\"set\",\"get\",\"get\"], inputs = [[],[\"foo\",\"bar\",1],[\"foo\",1],[\"foo\",3],[\"foo\",\"bar2\",4],[\"foo\",4],[\"foo\",5]]\n", " inputs = [\"timemap\",\"set\",\"set\",\"get\",\"get\",\"get\",\"get\",\"get\"], inputs = [[],[\"love\",\"high\",10],[\"love\",\"low\",20],[\"love\",5],[\"love\",10],[\"love\",15],[\"love\",20],[\"love\",25]]\n"], "outputs": [" [null,null,\"bar\",\"bar\",null,\"bar2\",\"bar2\"]\nExplanation: \u00a0 \nTimeMap kv; \u00a0 \nkv.set(\"foo\", \"bar\", 1); // store the key \"foo\" and value \"bar\" along with timestamp = 1 \u00a0 \nkv.get(\"foo\", 1);  // output \"bar\" \u00a0 \nkv.get(\"foo\", 3); // output \"bar\" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie \"bar\" \u00a0 \nkv.set(\"foo\", \"bar2\", 4); \u00a0 \nkv.get(\"foo\", 4); // output \"bar2\" \u00a0 \nkv.get(\"foo\", 5); //output \"bar2\" \u00a0 \n", " [null,null,null,\"\",\"high\",\"high\",\"low\",\"low\"]\n"]}, "1921": {"inputs": ["[\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\n"], "outputs": ["[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\n"]}, "1922": {"inputs": [" [0,0,null,0,0]\n", " [0,0,null,0,null,0,null,null,0]\n"], "outputs": [" 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.\n", " 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n"]}, "1923": {"inputs": [" [5,2,6,1]\n"], "outputs": [" [2,1,1,0] \nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element."]}, "1924": {"inputs": [" transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n", " transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\n", " transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\n"], "outputs": [" [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.\n", " [\"alice,50,1200,mtv\"]\n", " [\"bob,50,1200,mtv\"]\n"]}, "1925": {"inputs": [" [8,5,1,7,10,12]\n"], "outputs": [" [8,5,10,1,7,null,12]\n"]}, "1926": {"inputs": [" num = 8\n", " num = 123\n", " num = 999\n"], "outputs": [" [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.\n", " [5,25]\n", " [40,25]\n"]}, "1927": {"inputs": ["asteroids = [5, 10, -5]\n", "asteroids = [8, -8]\n", "asteroids = [10, 2, -5]\n", "asteroids = [-2, -1, 1, 2]\n"], "outputs": [" [5, 10]\nExplanation: \nThe 10 and -5 collide resulting in 10.  The 5 and 10 never collide.\n", " []\nExplanation: \nThe 8 and -8 collide exploding each other.\n", " [10]\nExplanation: \nThe 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.\n", " [-2, -1, 1, 2]\nExplanation: \nThe -2 and -1 are moving left, while the 1 and 2 are moving right.\nAsteroids moving the same direction never meet, so no asteroids will meet each other.\n"]}, "1928": null, "1929": null, "1930": {"inputs": ["[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\n"], "outputs": ["[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0\ncashier.getBill([7,3],[10,10]);                      // return 4000.0\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0\n"]}, "1931": {"inputs": [" head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n", " head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n", " head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n"], "outputs": [" true\nExplanation: Nodes in blue form a subpath in the binary Tree.  \n", " true\n", " false\nExplanation: There is no path in the binary tree that contains all the elements of the linked list from head.\n"]}, "1932": {"inputs": [" root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3\n"], "outputs": [" true\nExplanation: The second player can choose the node with value 2.\n"]}, "1933": {"inputs": [" \"1+1i\", \"1+1i\"\n", " \"1+-1i\", \"1+-1i\"\n"], "outputs": [" \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n", " \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n"]}, "1934": null, "1935": {"inputs": [" start = \"rxxlrxrxl\", end = \"xrlxxrrlx\"\n"], "outputs": [" true\nExplanation:\nWe can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX\n"]}, "1936": {"inputs": [" label = 14\n", " label = 26\n"], "outputs": [" [1,3,4,14]\n", " [1,2,6,10,26]\n"]}, "1937": {"inputs": ["[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]\n"], "outputs": ["[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]\n"]}, "1938": {"inputs": [" [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n", " [[0,0,1000000000,1000000000]]\n"], "outputs": [" 6\nExplanation: As illustrated in the picture.\n", " 49\nExplanation: The answer is 10^18 modulo (10^9 + 7), which is (10^9)^2 = (-7)^2 = 49.\n"]}, "1939": {"inputs": [" wordlist = [\"kite\",\"kite\",\"hare\",\"hare\"], queries = [\"kite\",\"kite\",\"kite\",\"hare\",\"hare\",\"hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\n"], "outputs": [" [\"kite\",\"kite\",\"kite\",\"hare\",\"hare\",\"\",\"\",\"kite\",\"\",\"kite\"]\n"]}, "1940": {"inputs": [" [2,1,5]\n", " [2,7,4,3,5]\n", " [1,7,5,1,9,2,5,1]\n"], "outputs": [" [5,5,0]\n", " [7,0,5,5,0]\n", " [7,9,9,9,0,5,0,0]\n"]}, "1941": null, "1942": {"inputs": [" favoritecompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]\n", " favoritecompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]\n", " favoritecompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\n"], "outputs": [" [0,1,4] \nExplanation: \nPerson with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0. \nPerson with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"]. \nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].\n", " [0,1] \nExplanation: In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1].\n", " [0,1,2,3]\n"]}, "1943": {"inputs": [" a = [[0,2],[5,10],[13,23],[24,25]], b = [[1,5],[8,12],[15,24],[25,26]]\n"], "outputs": [" [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n"]}, "1944": {"inputs": [" \"x+5-3+x=6+x-2\"\n", " \"x=x\"\n", " \"2x=x\"\n", " \"2x+3x-6x=x+2\"\n", " \"x=x+2\"\n"], "outputs": [" \"x=2\"\n", " \"infinite solutions\"\n", " \"x=0\"\n", " \"x=-1\"\n", " \"no solution\""]}, "1945": {"inputs": [" [[0,1],[1,1]]\n", " [[0,1],[1,0]]\n", " [[0,0,0],[0,0,1],[1,1,0]]\n"], "outputs": [" 1\nExplanation: After flipping no values, 1 row has all values equal.\n", " 2\nExplanation: After flipping values in the first column, both rows have equal values.\n", " 2\nExplanation: After flipping values in the first two columns, the last two rows have equal values.\n"]}, "1946": null, "1947": {"inputs": [" a = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], b = [\"e\",\"o\"]\n", " a = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], b = [\"l\",\"e\"]\n", " a = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], b = [\"e\",\"oo\"]\n", " a = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], b = [\"lo\",\"eo\"]\n", " a = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], b = [\"ec\",\"oc\",\"ceo\"]\n"], "outputs": [" [\"facebook\",\"google\",\"leetcode\"]\n", " [\"apple\",\"google\",\"leetcode\"]\n", " [\"facebook\",\"google\"]\n", " [\"google\",\"leetcode\"]\n", " [\"facebook\",\"leetcode\"]\n"]}, "1948": {"inputs": [" points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\n", " points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\n", " points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\n", " points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\n"], "outputs": [" 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n", " 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\n", " 1\n", " 4\n"]}, "1949": {"inputs": [" grid = [[0,6,0],[5,8,7],[0,9,0]]\n", " grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\n"], "outputs": [" 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n", " 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n"]}, "1950": {"inputs": [" 1->2->3->3->4->4->5\n", " 1->1->1->2->3\n"], "outputs": [" 1->2->5\n", " 2->3"]}, "1951": {"inputs": [" root = [4,1,3,null,null,2], val = 5\n", " root = [5,2,4,null,1], val = 3\n", " root = [5,2,3,null,1], val = 4\n"], "outputs": [" [5,4,null,1,3,null,null,2]\nExplanation: A = [1,4,2,3], B = [1,4,2,3,5]\n", " [5,2,4,null,1,null,3]\nExplanation: A = [2,1,5,4], B = [2,1,5,4,3]\n", " [5,2,4,null,1,3]\nExplanation: A = [2,1,5,3], B = [2,1,5,3,4]\n"]}, "1952": {"inputs": [" 1->2->3->4->5->null, m = 2, n = 4\n"], "outputs": [" 1->4->3->2->5->null"]}, "1953": null, "1954": {"inputs": [" req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\n", " req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\n"], "outputs": [" [0,2]\n", " [1,2]\n"]}, "1955": {"inputs": [" s = \"dcab\", pairs = [[0,3],[1,2]]\n", " s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\n", " s = \"cba\", pairs = [[0,1],[1,2]]\n"], "outputs": [" \"bacd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"\n", " \"abcd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"\nExample 3:\n", " \"abc\"\nExplaination: \nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"\n"]}, "1956": null, "1957": {"inputs": ["grid = \n[[0,0,0],\n\u00a0[1,1,0],\n [0,0,0],\n\u00a0[0,1,1],\n [0,0,0]], \nk = 1\n", "grid = \n[[0,1,1],\n\u00a0[1,1,1],\n\u00a0[1,0,0]], \nk = 1\n"], "outputs": [" 6\nExplanation: \nThe shortest path without eliminating any obstacle is 10.\u00a0\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).\n", " -1\nExplanation: \nWe need to eliminate at least two obstacles to find such a walk.\n"]}, "1958": {"inputs": [" groupsizes = [3,3,3,3,3,1,3]\n", " groupsizes = [2,1,3,3,3,2]\n"], "outputs": [" [[5],[0,1,2],[3,4,6]]\nExplanation: \nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].\n", " [[1],[0,5],[2,3,4]]\n"]}, "1959": {"inputs": [" poured = 1, query_glass = 1, query_row = 1\n", " poured = 2, query_glass = 1, query_row = 1\n"], "outputs": [" 0.0\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\n", " 0.5\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n"]}, "1960": {"inputs": [" queries = [3,1,2,1], m = 5\n", " queries = [4,1,2,2], m = 4\n", " queries = [7,5,5,8,3], m = 8\n"], "outputs": [" [2,1,2,1] \nExplanation: The queries are processed as follow: \nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \nTherefore, the array containing the result is [2,1,2,1].  \n", " [3,1,2,0]\n", " [6,5,0,7,5]\n"]}, "1961": {"inputs": ["[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\n"], "outputs": ["[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\n"]}, "1962": {"inputs": [" licenseplate = \"1s3 pst\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\n", " licenseplate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\n"], "outputs": [" \"steps\"\nExplanation: The smallest length word that contains the letters \"S\", \"P\", \"S\", and \"T\".\nNote that the answer is not \"step\", because the letter \"s\" must occur in the word twice.\nAlso note that we ignored case for the purposes of comparing whether a letter exists in the word.\n", " \"pest\"\nExplanation: There are 3 smallest length words that contains the letters \"s\".\nWe return the one that occurred first.\n"]}, "1963": {"inputs": [" [2,5], [[3,0,5],[1,2,10]], [3,2]\n", " [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\n"], "outputs": [" 14\nExplanation: \nThere are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n", " 11\nExplanation: \nThe price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n"]}, "1964": null, "1965": {"inputs": [" n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\n", " n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\n", " n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\n"], "outputs": [" 2\nExplanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.\n", " 0\nExplanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.\n", " -1\nExplanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.\n"]}, "1966": {"inputs": [" mat = [[1,0,1],\n\u00a0             [1,1,0],\n\u00a0             [1,1,0]]\n", " mat = [[0,1,1,0],\n\u00a0             [0,1,1,1],\n\u00a0             [1,1,1,0]]\n", " mat = [[1,1,1,1,1,1]]\n", " mat = [[1,0,1],[0,1,0],[1,0,1]]\n"], "outputs": [" 13\nExplanation:\nThere are 6 rectangles of side 1x1.\nThere are 2 rectangles of side 1x2.\nThere are 3 rectangles of side 2x1.\nThere is 1 rectangle of side 2x2. \nThere is 1 rectangle of side 3x1.\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.\n", " 24\nExplanation:\nThere are 8 rectangles of side 1x1.\nThere are 5 rectangles of side 1x2.\nThere are 2 rectangles of side 1x3. \nThere are 4 rectangles of side 2x1.\nThere are 2 rectangles of side 2x2. \nThere are 2 rectangles of side 3x1. \nThere is 1 rectangle of side 3x2. \nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.\n", " 21\n", " 5\n"]}, "1967": {"inputs": [" \"123456579\"\n", " \"11235813\"\n", " \"112358130\"\n", " \"0123\"\n", " \"1101111\"\n"], "outputs": [" [123,456,579]\n", " [1,1,2,3,5,8,13]\n", " []\nExplanation: The task is impossible.\n", " []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n", " [110, 1, 111]\nExplanation: The output [11, 0, 11, 11] would also be accepted.\n"]}, "1968": {"inputs": [" folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]\n", " folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]\n", " folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\n"], "outputs": [" [\"/a\",\"/c/d\",\"/c/f\"]\nExplanation: Folders \"/a/b/\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem.\n", " [\"/a\"]\nExplanation: Folders \"/a/b/c\" and \"/a/b/d/\" will be removed because they are subfolders of \"/a\".\n", " [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\n"]}, "1969": {"inputs": [" [1,2,3]\n    1\n   / \\\n  2   3\n", " [4,9,0,5,1]\n    4\n   / \\\n  9   0\n\u00a0/ \\\n5   1\n"], "outputs": [" 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n", " 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026."]}, "1970": {"inputs": [" \"123\"\n"], "outputs": [" \"121\"\n"]}, "1971": null, "1972": null, "1973": {"inputs": [" 3\n"], "outputs": [" 5\nExplanation: \nThe five different ways are listed below, different letters indicates different tiles:\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY\n"]}, "1974": {"inputs": ["\u00a0[1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n"], "outputs": ["\u00a0[3,2,1]\n"]}, "1975": {"inputs": ["[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n"], "outputs": ["[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack customStack = new CustomStack(3); // Stack is Empty []\ncustomStack.push(1);                          // stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.push(3);                          // stack becomes [1, 2, 3]\ncustomStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4\ncustomStack.increment(5, 100);                // stack becomes [101, 102, 103]\ncustomStack.increment(2, 100);                // stack becomes [201, 202, 103]\ncustomStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\ncustomStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]\ncustomStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []\ncustomStack.pop();                            // return -1 --> Stack is empty return -1.\n"]}, "1976": null, "1977": {"inputs": [" grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\n", " grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\n", " grid = [[1,1,1,1,1,1,1],\n\u00a0              [1,0,0,0,0,0,1],\n\u00a0              [1,0,1,1,1,0,1],\n\u00a0              [1,0,1,0,1,0,1],\n\u00a0              [1,0,1,1,1,0,1],\n\u00a0              [1,0,0,0,0,0,1],\n               [1,1,1,1,1,1,1]]\n"], "outputs": [" 2\nExplanation: \nIslands in gray are closed because they are completely surrounded by water (group of 1s).\n", " 1\n", " 2\n"]}, "1978": {"inputs": [" words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\n"], "outputs": [" [\"mee\",\"aqq\"]\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,\nsince a and b map to the same letter.\n"]}, "1979": {"inputs": [" a = [1,2,3,4]\n", " a = [5,5,5,5]\n", " a = [0,0,0,0]\n", " a = [0,0,1,0]\n"], "outputs": [" \"23:41\"\nExplanation:\u00a0The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.\n", " \"\"\nExplanation:\u00a0There are no valid 24-hour times as \"55:55\" is not valid.\n", " \"00:00\"\n", " \"10:00\"\n"]}, "1980": null, "1981": {"inputs": [" nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\n", " nums = [1,2,3,4,5,6], requests = [[0,1]]\n", " nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\n"], "outputs": [" 19\nExplanation: One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.\n", " 11\nExplanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].\nExample 3:\n", " 47\nExplanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].\n"]}, "1982": {"inputs": [" n = 4, dislikes = [[1,2],[1,3],[2,4]]\n", " n = 3, dislikes = [[1,2],[1,3],[2,3]]\n", " n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n"], "outputs": [" true\nExplanation: group1 [1,4], group2 [2,3]\n", " false\n", " false\n"]}, "1983": {"inputs": ["[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n"], "outputs": ["[null,null,null,null,null,null,20,40,0,null,32]\n"]}, "1984": null, "1985": null, "1986": {"inputs": [" n = 2, start = 3\n", " n = 3, start = 2\n"], "outputs": [" [3,2,0,1]\nExplanation: The binary representation of the permutation is (11,10,00,01). \nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]\n", " [2,6,7,5,4,0,1,3]\nExplanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).\n"]}, "1987": {"inputs": [" bottom = \"xyz\", allowed = [\"xyd\", \"yze\", \"dea\", \"fff\"]\n", " bottom = \"xxyx\", allowed = [\"xxx\", \"xxy\", \"xyx\", \"xyy\", \"yxz\"]\n"], "outputs": [" true\nExplanation:\nWe can stack the pyramid like this:\n    A\n   / \\\n  D   E\n / \\ / \\\nX   Y   Z\n", " false\nExplanation:\nWe can't stack the pyramid to the top.\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\n"]}, "1988": {"inputs": [" n = 3, red_edges = [[0,1],[1,2]], blue_edges = []\n", " n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]\n", " n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]\n", " n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]\n", " n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]\n"], "outputs": [" [0,1,-1]\n", " [0,1,-1]\nExample 3:\n", " [0,-1,-1]\n", " [0,1,2]\n", " [0,1,1]\n"]}, "1989": {"inputs": [" s = \"3242415\"\n", " s = \"12345678\"\n", " s = \"213123\"\n", " s = \"00\"\n"], "outputs": [" 5\nExplanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps.\n", " 1\n", " 6\nExplanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps.\n", " 2\n"]}, "1990": {"inputs": [" [[1,2], [2,3], [3,4]]\n"], "outputs": [" 2\nExplanation: The longest chain is [1,2] -> [3,4]\n"]}, "1991": {"inputs": [" locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\n", " locations = [4,3,1], start = 1, finish = 0, fuel = 6\n", " locations = [5,2,1], start = 0, finish = 2, fuel = 3\n", " locations = [2,1,5], start = 0, finish = 0, fuel = 3\n", " locations = [1,2,3], start = 0, finish = 2, fuel = 40\n"], "outputs": [" 4\nExplanation:\u00a0The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3\n", " 5\nExplanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5\n", " 0\nExplanation: It's impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.\n", " 2\nExplanation:\u00a0There are two possible routes, 0 and 0 -> 1 -> 0.\n", " 615088286\nExplanation: The total number of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives us 615088286.\n"]}, "1992": null, "1993": {"inputs": ["source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\n", "source = [\"a/*comment\", \"line\", \"more_comment*/b\"]\n"], "outputs": [" [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\n", " [\"ab\"]\nExplanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\n"]}, "1994": {"inputs": ["head: 0->1->2->3\nG = [0, 1, 3]\n", "head: 0->1->2->3->4\nG = [0, 3, 1, 4]\n"], "outputs": [" 2\nExplanation: \n0 and 1 are connected, so [0, 1] and [3] are the two connected components.\n", " 2\nExplanation: \n0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\n"]}, "1995": {"inputs": [" trips = [[2,1,5],[3,3,7]], capacity = 4\n", " trips = [[2,1,5],[3,3,7]], capacity = 5\n", " trips = [[2,1,5],[3,5,7]], capacity = 3\n", " trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11\n"], "outputs": [" false\n", " true\n", " true\n", " true\n"]}, "1996": {"inputs": [" graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n"], "outputs": [" [2,4,5,6]\nHere is a diagram of the above graph.\n"]}, "1997": {"inputs": [" intervals = [[1,4],[3,6],[2,8]]\n", " intervals = [[1,4],[2,3]]\n", " intervals = [[0,10],[5,12]]\n", " intervals = [[3,10],[4,10],[5,11]]\n", " intervals = [[1,2],[1,4],[3,4]]\n"], "outputs": [" 2\nExplanation: Interval [3,6] is covered by [2,8], therefore it is removed.\n", " 1\n", " 2\n", " 2\n", " 1\n"]}, "1998": {"inputs": ["n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n", "n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n"], "outputs": [" 200\nExplanation: \nThe graph looks like this:\n", " 500\nExplanation: \nThe graph looks like this:\n"]}, "1999": {"inputs": [" head = [1,2,-3,3,1]\n", " head = [1,2,3,-3,4]\n", " head = [1,2,3,-3,-2]\n"], "outputs": [" [3,1]\nNote: The answer [1,2,1] would also be accepted.\n", " [1,2,4]\n", " [1]\n"]}, "2000": {"inputs": ["5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n", "6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n"], "outputs": ["0 25 60 40 20\n", "0 13 26 39 26 13\n"]}, "2001": {"inputs": ["10 5\n", "4 2\n"], "outputs": ["6\n5 50 7 15 6 100\n", "4\n10 100 1000 10000\n"]}, "2002": {"inputs": ["technocup\n", "tictictactac\n", "bbaabaabbb\n"], "outputs": ["1.000000000000000\n", "0.333333333333333\n", "0.100000000000000\n"]}, "2003": {"inputs": ["15\n1/3 2/1\n3 1\n6 2\n4 2\n2 5\n4 5\n6 6\n3 4\n1 6\n2 1\n7 4\n9 3\n5 3\n1 3\n15 5\n12 4\n"], "outputs": ["4\n"]}, "2004": {"inputs": ["101\n", "110010\n"], "outputs": ["11\n", "11010\n"]}, "2005": {"inputs": ["010101\n", "11001100\n"], "outputs": ["3\n", "0\n"]}, "2006": {"inputs": ["2\n2 3\n", "2\n5 3\n", "3\n5 6 7\n"], "outputs": ["Alice\n", "Alice\n", "Bob\n"]}, "2007": {"inputs": ["3 4\n2 5 6\n1 3 6 8\n", "3 3\n1 2 3\n1 2 3\n", "1 2\n165\n142 200\n"], "outputs": ["2\n", "0\n", "81\n"]}, "2008": {"inputs": ["4\n0 0 1 1\n", "5\n0 1 0 1 0\n"], "outputs": ["0\n0 0 1 1\n", "2\n0 0 0 0 0\n"]}, "2009": {"inputs": ["3\n999999 0\n0 999999\n999999 0\n", "1\n-824590 246031\n", "8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n"], "outputs": ["1 1 -1 \n", "1 \n", "1 1 1 1 1 1 1 -1"]}, "2010": {"inputs": ["6\n2 1 4 6 2 2\n", "7\n3 3 3 1 3 3 3\n"], "outputs": ["3\n", "2\n"]}, "2011": {"inputs": ["21\n", "20\n"], "outputs": ["1\n15\n", "0\n"]}, "2012": {"inputs": ["1\n", "2\n", "4\n", "5\n"], "outputs": ["1 \n", "-1\n", "2 4 1 3 \n", "2 5 3 1 4"]}, "2013": {"inputs": ["codeforces\n", "abacaba\n"], "outputs": ["bncdenqbdr\n", "aaacaba\n"]}, "2014": {"inputs": ["4\n1 1 1 1 1\n3 2 5 4 5\n1 1 5 5 10000\n1 4 2 5 2\n"], "outputs": ["1\n13\n93\n0\n"]}, "2015": {"inputs": ["5\n4 2 2\n4 1 2\n5 2 4\n3 3 5\n5 1 2\n", "5\n4 5 1\n5 3 9\n4 1 2\n2 1 8\n4 1 9\n"], "outputs": ["2\n1 3 \n", "4\n1 2 4 5 \n"]}, "2016": {"inputs": ["5 7\n2 2 8 6 9\n1 2\n1 3\n2 4\n3 2\n4 5\n2 5\n1 5\n2\n", "10 12\n1 7 1 9 3 3 6 30 1 10\n1 2\n1 3\n3 5\n5 7\n2 3\n5 4\n6 9\n4 6\n3 7\n6 8\n9 4\n9 10\n6\n"], "outputs": ["27\n", "61"]}, "2017": {"inputs": ["4\n1 1 2 3 3 2 4 4\n", "3\n1 1 2 2 3 3\n", "3\n3 1 2 3 1 2\n"], "outputs": ["2\n", "0\n", "3\n"]}, "2018": {"inputs": ["3 2\n1 2 3\n", "5 10\n0 1 0 2 1\n"], "outputs": ["1\n1 2 2 \n", "3\n2 2 2 2 2 \n"]}, "2019": {"inputs": ["3\n3 2 2\n", "4\n2 2 2 2\n"], "outputs": ["4\n", "3\n"]}, "2020": {"inputs": ["3\n4 2 1\n", "1\n4\n", "2\n1 1\n"], "outputs": ["1\nabacaba\n", "4\naaaa\n", "0\nab\n"]}, "2021": {"inputs": ["4 2\n1 2\n2 3\n", "3 3\n1 2\n2 3\n1 3\n"], "outputs": ["1\n2 \n2\n1 3 \n", "-1\n"]}, "2022": {"inputs": ["2 4\n", "2 1\n"], "outputs": ["YES\n5 4 7 2 \n3 6 1 8 \n", "NO\n"]}, "2023": {"inputs": ["4\n", "2\n"], "outputs": ["3 4 1 2\n", "2 1\n"]}, "2024": {"inputs": ["3\n0.5 0.5 0.5\n", "4\n0.7 0.2 0.1 0.9\n", "5\n1 1 1 1 1\n"], "outputs": ["2.750000000000000\n", "2.489200000000000\n", "25.000000000000000\n"]}, "2025": {"inputs": ["4\n", "6\n"], "outputs": ["3\n2 4 3 \n", "4\n2 4 3 5 \n"]}, "2026": {"inputs": ["3 1000\n1000\n0 0\n0 1\n0 3\n", "3 1000\n1000\n1 0\n1 1\n1 2\n"], "outputs": ["2000\n", "1000"]}, "2027": {"inputs": ["llrlr\n", "rrlll\n", "lrlrr\n"], "outputs": ["3\n5\n4\n2\n1\n", "1\n2\n5\n4\n3\n", "2\n4\n5\n3\n1\n"]}, "2028": {"inputs": ["nolon\n", "otto\n", "qqqq\n", "kinnikkinnik\n"], "outputs": ["2\n", "1\n", "Impossible\n", "1\n"]}, "2029": {"inputs": ["3\n", "4\n"], "outputs": ["YES\n1 4 5 2 3 6 \n", "NO\n"]}, "2030": {"inputs": ["5 2 3\n1 2\n1 3\n3 4\n5 3\n", "5 3 2\n1 2\n1 3\n3 4\n5 3\n"], "outputs": ["9\n", "8\n"]}, "2031": {"inputs": ["5 3\n3 2 2\n", "10 1\n1\n"], "outputs": ["2 4 1\n", "-1"]}, "2032": {"inputs": ["6\n1 2\n2 3\n2 4\n4 5\n1 6\n", "7\n1 2\n1 3\n3 4\n1 5\n5 6\n6 7\n"], "outputs": ["3\n", "-1\n"]}, "2033": {"inputs": ["2\n1 1 1\n", "2\n1 2 2\n"], "outputs": ["perfect\n", "ambiguous\n0 1 1 3 3\n0 1 1 3 2\n"]}, "2034": {"inputs": ["4\n2 4\n4 3\n3 0\n1 3\n", "3\n0 0\n0 2\n2 0\n"], "outputs": ["12 14 \n", "8 \n"]}, "2035": {"inputs": ["4 4\n3 5 8 14\n", "6 7\n11 45 14 9 19 81\n"], "outputs": ["2 2 6 6 0 \n", "1 2 11 20 15 10 5 0"]}, "2036": {"inputs": ["3 1\n6\n", "3 3\n1 7 8\n", "3 4\n1 3 5 7\n"], "outputs": ["6\n", "11\n", "14\n"]}, "2037": {"inputs": ["2\n3 5\n5 3\n", "2\n5 3\n3 5\n"], "outputs": ["10\n", "12\n"]}, "2038": {"inputs": ["2 1\n1 2\n", "4 3\n1 2\n2 3\n3 1\n", "3 2\n1 3\n2 3\n"], "outputs": ["1\nAE\n", "-1\n", "2\nAAE\n"]}, "2039": {"inputs": ["5 3\n0 0 0 1 2\n", "5 7\n0 6 1 3 2\n"], "outputs": ["0\n", "1\n"]}, "2040": {"inputs": ["3 2\n", "2 100000\n"], "outputs": ["1.154700538379 1.632993161855\n", "70710.678118654752\n"]}, "2041": {"inputs": ["5\n2 8 4 7 7\n", "4\n200 150 100 50\n", "10\n3 2 1 4 1 4 1 4 1 4\n", "9\n1 2 3 4 5 6 7 8 9\n"], "outputs": ["2\n", "1\n", "8\n", "0\n"]}, "2042": {"inputs": ["4 2 3 10\nwwhw\n", "5 2 4 13\nhhwhh\n", "5 2 4 1000\nhhwhh\n", "3 1 100 10\nwhw\n"], "outputs": ["2\n", "4\n", "5\n", "0\n"]}, "2043": {"inputs": ["7\n4 7\n5 0\n0 0\n6 1\n0 2\n0 4\n1 0\n"], "outputs": ["4 7\n5 6\n0 5\n6 1\n3 2\n2 4\n1 0"]}, "2044": {"inputs": ["3 2\n", "5 3\n"], "outputs": ["2\n1 2\n2 3\n", "3\n1 2\n2 3\n3 4\n3 5\n"]}, "2045": {"inputs": ["4 3\n1 2 1\n1 3 3\n1 4 4\n", "8 4\n3 5 4\n3 7 6\n2 8 8\n1 8 1\n"], "outputs": ["3 1 4 0 \n", "0 8 4 6 4 8 6 1 \n"]}, "2046": {"inputs": ["4\n2 4 1\n", "3\n1 2\n"], "outputs": ["3\n6\n8\n", "-1\n-1\n"]}, "2047": {"inputs": ["4 5\n1 2 0 4\n1 2 0 4\n5 0 0 3\n0 5 0 3\n", "1 2\n1\n2\n1\n2\n", "1 2\n1\n1\n2\n2\n"], "outputs": ["6\n1 1 1\n2 1 2\n4 1 4\n3 4 4\n5 3 2\n5 4 2\n", "-1\n", "2\n1 1 1\n2 4 1\n"]}, "2048": {"inputs": ["4 1\n1 1 4 2\n", "3 1\n2 2 2\n"], "outputs": ["2\n", "0\n"]}, "2049": {"inputs": ["3 3\na := 101\nb := 011\nc := ? XOR b\n", "5 1\na := 1\nbb := 0\ncx := ? OR a\nd := ? XOR ?\ne := d AND bb\n"], "outputs": ["011\n100\n", "0\n0\n"]}, "2050": {"inputs": ["2 3\na\nb\n", "3 1\na\nb\nc\n", "1 2\nab\n"], "outputs": ["First\n", "First\n", "Second"]}, "2051": {"inputs": ["5 2\n4 2 1 10 2\n"], "outputs": ["20\n3 6 7 4 5 \n"]}, "2052": {"inputs": ["3 1\n2 2\n", "3 0\n", "4 3\n3 1\n3 2\n3 3\n"], "outputs": ["0\n", "1\n", "1\n"]}, "2053": {"inputs": ["3 2\n1 2 1\n3 4\n", "2 2\n0 1\n1 0\n", "2 3\n1 0\n1 1 2\n"], "outputs": ["12\n", "-1\n", "4\n"]}, "2054": {"inputs": ["4\n1 2\n2 3\n3 4\n1 2 1 1\n", "3\n1 2\n2 3\n1 2 3\n", "4\n1 2\n2 3\n3 4\n1 2 1 2\n"], "outputs": ["YES\n2\n", "YES\n2\n", "NO"]}, "2055": {"inputs": ["123123\n1\n2->00\n", "123123\n1\n3->\n", "222\n2\n2->0\n0->7\n", "1000000008\n0\n"], "outputs": ["10031003\n", "1212\n", "777\n", "1\n"]}, "2056": {"inputs": ["3\n100\n001\n", "4\n0101\n0011\n"], "outputs": ["2\n", "1\n"]}, "2057": {"inputs": ["ab\n", "aab\n"], "outputs": ["1\n", "3\n"]}, "2058": {"inputs": ["7\n2 1 5 11 5 9 11\n", "5\n5 4 3 2 1\n"], "outputs": ["9\n", "12\n"]}, "2059": {"inputs": ["2\n2 1\n", "9\n-2 0 -1 0 -1 2 1 0 -1\n"], "outputs": ["0\n", "6"]}, "2060": {"inputs": ["5 2\n50 110 130 40 120\n", "4 1\n2 3 4 1\n"], "outputs": ["20\n", "0\n"]}, "2061": {"inputs": ["1\n3 2 2 2 2 1\n"], "outputs": ["4\n"]}, "2062": {"inputs": ["3 1 3 1 2\n"], "outputs": ["4\n"]}, "2063": {"inputs": ["5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n", "8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n", "2 2\n1 2\n0\n"], "outputs": ["0\n", "2\n", "1\n"]}, "2064": {"inputs": ["5 5\n2 3\n1 4\n2 4\n2 3\n1 4\n"], "outputs": ["Yes\nNo\nNo\nNo\nYes\n"]}, "2065": {"inputs": ["3 2\n2 1 2\n1 3\n", "7 3\n3 1 3 7\n2 2 5\n2 4 6\n"], "outputs": ["1\n", "10\n"]}, "2066": {"inputs": ["6\n0 1 3 7 15 31\n", "2\n73 37\n"], "outputs": ["7\n", "36\n"]}, "2067": {"inputs": ["7\n-1 3\n1 2\n1 1\n1 4\n4 5\n4 3\n5 2\n"], "outputs": ["17\n"]}, "2068": {"inputs": ["3\n1 3 3\n1 2 2\n1 3 2\n", "5\n6 3 2 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n"], "outputs": ["3\n", "7\n"]}, "2069": {"inputs": ["4\n1 3 2 4\n"], "outputs": ["1 1 \n-1\n3 4\n4 2\n2 4\n-3 -6 -6"]}, "2070": {"inputs": ["5\n3 6 9 12 15\n", "4\n3 7 5 2\n"], "outputs": ["36\n", "1000000006\n"]}, "2071": {"inputs": ["3\n1 1\n7 5\n1 5\n", "6\n0 0\n0 1\n0 2\n-1 1\n0 1\n1 1\n"], "outputs": ["2\n", "11\n"]}, "2072": {"inputs": ["3 1\n1 1 2 2\n2 2 3 3\n3 3 4 4\n", "4 1\n1 1 2 2\n1 9 2 10\n9 9 10 10\n9 1 10 2\n", "3 0\n1 1 2 2\n1 1 1000000000 1000000000\n1 3 8 12\n"], "outputs": ["1\n", "64\n", "249999999000000001\n"]}, "2073": {"inputs": ["5\n5 2 1 4 3\n", "5\n9 8 3 5 7\n"], "outputs": ["7\n", "15\n"]}, "2074": {"inputs": ["3 2\n1 2 4\n", "5 2\n3 -5 3 -5 3\n", "6 3\n4 3 4 3 2 5\n"], "outputs": ["1\n", "0\n", "3\n"]}, "2075": {"inputs": ["3 3 3\n2 2 2\n1 1 3\n", "4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n"], "outputs": ["YES\n", "NO\n"]}, "2076": {"inputs": ["6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n", "3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n"], "outputs": ["1\n1\n", "0\n"]}, "2077": {"inputs": ["4 5 9\n2 3 4 5\n", "3 3 4\n1 2 4\n"], "outputs": ["YES\n0 0 1 1\n", "NO\n"]}, "2078": {"inputs": ["3\n223\n322\n", "2\n20\n42\n", "2\n35\n44\n"], "outputs": ["2\n1 1\n2 -1\n", "2\n1 1\n1 1\n", "-1\n"]}, "2079": {"inputs": ["7\n1 3 4 30\n1 4 1 2\n1 3 6 8\n2 4 3\n1 6 1 40\n2 3 7\n2 2 4\n"], "outputs": ["94\n0\n32\n"]}, "2080": {"inputs": ["1\n2\n4\n50 50 100 100\n", "2\n2 3\n5\n50 50 50 50 50\n", "1\n1\n7\n1 1 1 1 1 1 1\n"], "outputs": ["200\n", "150\n", "3\n"]}, "2081": {"inputs": ["5 3\n1 2 3 4 5\n", "2 6\n-5 9\n", "6 99\n-1 -1 -1 -1 -1 -1\n"], "outputs": ["6 5 4 0 0 0 \n", "1 2 0 \n", "0 6 5 4 3 2 1"]}, "2082": {"inputs": ["2\n1 1\n", "2\n1 2\n", "5\n0 0 0 0 35\n", "5\n8 4 2 0 1\n"], "outputs": ["1\n", "3\n", "0\n", "801604029\n"]}, "2083": {"inputs": ["4 5\n1 2 3 1\n2 1 2 8\n2 3 4 7\n1 1 3 3\n2 3 4 8\n", "4 5\n1 2 3 1\n2 1 2 8\n2 3 4 7\n1 1 3 3\n2 3 4 13\n"], "outputs": ["YES\n4 7 4 7\n", "NO"]}, "2084": {"inputs": ["3\n2 1\n1 0\n0 1\n", "5\n0 0\n0 1\n0 2\n0 3\n0 4\n"], "outputs": ["19\n", "2930"]}, "2085": {"inputs": ["5\n01\n10\n101\n11111\n0\n3\n1 2\n6 5\n4 4\n"], "outputs": ["1\n2\n0\n"]}, "2086": null, "2087": {"inputs": ["3 4 4 19 1\n42 3 99\n", "4 7 2 3 9\n1 2 3 4\n"], "outputs": ["576\n", "34\n"]}, "2088": {"inputs": ["3\n1 2 1\n", "3\n1 2 3\n", "7\n1 4 4 2 3 2 1\n"], "outputs": ["1\n", "3\n", "2\n"]}, "2089": {"inputs": ["3\n| 3\n^ 2\n| 1\n", "3\n& 1\n& 3\n& 5\n", "3\n^ 1\n^ 2\n^ 3\n"], "outputs": ["2\n| 3\n^ 2\n", "1\n& 1\n", "0\n"]}, "2090": {"inputs": ["5 4\n1 2\n2 3\n3 4\n4 5\n1 3 2\n3 5 2\n", "5 4\n1 2\n2 3\n3 4\n4 5\n1 3 2\n2 4 2\n", "5 4\n1 2\n2 3\n3 4\n4 5\n1 3 2\n3 5 1\n"], "outputs": ["0\n", "1\n", "-1"]}, "2091": {"inputs": ["())(())(())(\n7\n1 1\n2 3\n1 2\n1 12\n8 12\n5 11\n2 10\n"], "outputs": ["0\n0\n2\n10\n4\n6\n6\n"]}, "2092": {"inputs": ["4\nSVO\nSVO->CDG\nLHR->SVO\nSVO->LHR\nCDG->SVO\n", "3\nSVO\nSVO->HKT\nHKT->SVO\nSVO->RAP\n"], "outputs": ["home\n", "contest\n"]}, "2093": {"inputs": ["5\n1 3 2 5 4\n", "4\n4 3 2 1\n", "4\n10 30 50 101\n"], "outputs": ["1 3 5 \n2 4 \n", "4 \n3 \n2 \n1 \n", "10 30 50 101"]}, "2094": {"inputs": ["4\nezor\n", "10\nnznooeeoer\n"], "outputs": ["0 \n", "1 1 0 \n"]}, "2095": {"inputs": ["4\n2 3 3 4\n", "5\n3 2 2 5 3\n", "8\n2 3 5 4 1 6 6 7\n"], "outputs": ["1\n2 3 4 4 \n", "0\n3 2 2 5 3 \n", "2\n2 3 7 8 1 6 6 7\n"]}, "2096": {"inputs": ["6\n3 2 1 6 5 4\n", "6\n83 -75 -49 11 37 62\n"], "outputs": ["4\n2 1 3\n1 2\n2 4 6\n1 5\n", "1\n6 1 2 3 4 5 6\n"]}, "2097": {"inputs": ["4\n1 2 1\n2 3 2\n3 4 3\n1\n1\n1\n1\n", "4\n1 2 1\n2 3 2\n3 4 3\n4\n4\n4\n4\n"], "outputs": ["2\n", "3\n"]}, "2098": {"inputs": ["1 2\n1 100\n", "5 5\n2 100\n3 200\n4 300\n5 400\n5 900\n", "5 5\n2 100\n3 200\n4 300\n5 800\n5 900\n"], "outputs": ["0\n", "500\n", "600\n"]}, "2099": {"inputs": ["3 2\n", "3 1\n", "5 2\n"], "outputs": ["1 3 2\n", "1 2 3\n", "1 3 2 4 5\n"]}, "2100": {"inputs": ["4\n7 5 5 7\n", "5\n7 8 8 10 12\n", "10\n3 9 5 5 1 7 5 3 8 7\n"], "outputs": ["5.666666667\n5.666666667\n5.666666667\n7.000000000\n", "7.000000000\n8.000000000\n8.000000000\n10.000000000\n12.000000000\n", "3.000000000\n5.000000000\n5.000000000\n5.000000000\n5.000000000\n5.000000000\n5.000000000\n5.000000000\n7.500000000\n7.500000000\n"]}, "2101": {"inputs": ["6 11\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n", "3 0\n"], "outputs": ["2\n", "0\n"]}, "2102": {"inputs": ["1\n", "10\n"], "outputs": ["3\n011\n101\n110\n", "5\n01111\n10111\n11011\n11101\n11110"]}, "2103": {"inputs": ["4 4\n1 4\n7 8\n9 10\n12 14\n4 5 3 8\n", "2 2\n11 14\n17 18\n2 9\n", "2 1\n1 1\n1000000000000000000 1000000000000000000\n999999999999999999\n"], "outputs": ["Yes\n2 3 1 \n", "No\n", "Yes\n1 \n"]}, "2104": {"inputs": ["4\n4 1 3 2 3 2 1 3\n", "3\n5 8 5 5 7 5\n"], "outputs": ["1\n", "0\n"]}, "2105": {"inputs": ["3\n", "4\n"], "outputs": ["2\n1 1 2 \n", "2\n2 1 1 2\n"]}, "2106": {"inputs": ["2\n1 100\n2 1 10\n", "1\n9 2 8 6 5 9 4 7 1 3\n", "3\n3 1 3 2\n3 5 4 6\n2 8 7\n", "3\n3 1000 1000 1000\n6 1000 1000 1000 1000 1000 1000\n5 1000 1000 1000 1000 1000\n"], "outputs": ["101 10\n", "30 15\n", "18 18\n", "7000 7000\n"]}, "2107": {"inputs": ["((?))\n", "??()??\n"], "outputs": ["4\n", "7\n"]}, "2108": {"inputs": ["ross rachel\n4\nross joey\nrachel phoebe\nphoebe monica\nmonica chandler\n", "icm codeforces\n1\ncodeforces technex\n"], "outputs": ["ross rachel\njoey rachel\njoey phoebe\njoey monica\njoey chandler\n", "icm codeforces\nicm technex\n"]}, "2109": {"inputs": ["8\n1 4\n10 5\n3 3\n4 11\n8 9\n22 40\n8 36\n314159265 358979323\n"], "outputs": ["1\n12\n4\n11\n14\n57\n31\n671644785\n"]}, "2110": {"inputs": ["5\n1 1 2 3 3\n", "4\n0 1 2 3\n"], "outputs": ["2\n", "4\n"]}, "2111": {"inputs": ["3 5 10 1 5\n1 3 1\n", "3 5 10 1 339\n1 3 1\n"], "outputs": ["12\n2 5 2 \n", "35\n5 5 5 \n"]}, "2112": {"inputs": ["4\n0 1 3 2\n", "9\n10 7 9 10 7 5 5 3 5\n", "3\n8 10 3\n"], "outputs": ["1 0\n", "4 14\n", "0 8\n"]}, "2113": {"inputs": ["2\n1 2\n", "5\n3 5 2 4 1\n"], "outputs": ["0.000000\n", "13.000000\n"]}, "2114": {"inputs": ["1 0\n1\n", "2 1\n1 2\n1 2 1\n", "5 6\n13 56 73 98 17\n1 2 56\n1 3 29\n1 4 42\n2 3 95\n2 4 88\n3 4 63\n"], "outputs": ["0.000000000000000\n", "3.000000000000000\n", "2.965517241379311\n"]}, "2115": {"inputs": ["4 3\n1 2 3 4\n", "4 2\n-3 -2 -1 0\n", "5 19\n1 10 20 30 50\n"], "outputs": ["4\n", "2\n", "1\n"]}, "2116": {"inputs": ["3\ncbabc\n", "2\nabcab\n", "3\nbcabcbaccba\n"], "outputs": ["a\n", "aab\n", "aaabb\n"]}, "2117": {"inputs": ["10\n1 2 3 4 5 4 3 2 1 6\n"], "outputs": ["6 4 4 3 3 2 2 1 1 1"]}, "2118": {"inputs": ["1\n5\n", "2\n1\n2\n"], "outputs": ["NO\n", "YES\n"]}, "2119": {"inputs": ["4\n1 3 2 5\n3 4 1 2\n", "5\n1 2 3 4 5\n4 2 3 5 1\n", "8\n5 5 4 4 6 6 5 5\n5 2 8 7 1 3 4 6\n"], "outputs": ["5\n4\n3\n0\n", "6\n5\n5\n1\n0\n", "18\n16\n11\n8\n8\n6\n6\n0\n"]}, "2120": {"inputs": ["5\n2 1\n3\n2 3\n2 1\n3\n", "6\n2 1\n1 2 20\n2 2\n1 2 -3\n3\n3\n"], "outputs": ["0.500000\n0.000000\n1.500000\n1.333333\n1.500000\n", "0.500000\n20.500000\n14.333333\n12.333333\n17.500000\n17.000000\n"]}, "2121": {"inputs": ["8\n2\n5\n7\n6\n9\n8\n4\n2\n", "8\n9\n1\n6\n2\n6\n5\n8\n3\n"], "outputs": ["5\n", "5"]}, "2122": {"inputs": ["3\n9 2\n7 3\n2 4\n", "4\n1000000000 1000000\n1000000000 1000000\n100000000 1000000\n1000000000 1000000\n"], "outputs": ["9 10\n1 3\n4 7\n", "1000000000 1000999999\n1 1000000\n100000000 100999999\n1000001 2000000"]}, "2123": {"inputs": ["4\n1 2 3 5\n", "5\n1000000000 1000000000 1000000000 1000000000 1\n"], "outputs": ["3 3 5 5\n", "1000000000 1000000000 1000000000 1000000000 1000000000\n"]}, "2124": {"inputs": ["4 4 3\n1 2 2\n2 4 1\n1 3 1\n3 4 2\n", "5 11 23\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n1 3 4\n2 4 5\n3 5 6\n1 4 2\n2 5 3\n1 5 2\n3 2 30\n"], "outputs": ["1.5000000000\n", "10.2222222222\n"]}, "2125": {"inputs": ["8 10 8\n1 1 10\n1 4 13\n1 7 1\n1 8 2\n2 2 0\n2 5 14\n2 6 0\n2 6 1\n", "3 2 3\n1 1 2\n2 1 1\n1 1 5\n"], "outputs": ["4 8\n10 5\n8 8\n10 6\n10 2\n1 8\n7 8\n10 6\n", "1 3\n2 1\n1 3\n"]}, "2126": {"inputs": ["2\n1 1\n", "4\n10 24 40 80\n", "10\n540 648 810 648 720 540 594 864 972 648\n"], "outputs": ["1\n", "40\n", "54\n"]}, "2127": {"inputs": ["3 0\n", "4 4\n1 2 1\n2 3 1\n3 4 0\n4 1 0\n", "4 4\n1 2 1\n2 3 1\n3 4 0\n4 1 1\n"], "outputs": ["4\n", "1\n", "0\n"]}, "2128": {"inputs": ["4\n0 0 1 0\n", "5\n1 0 1 0 1\n"], "outputs": ["1\n", "3\n"]}, "2129": {"inputs": ["5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n", "2 3\n1 2\n1 2\n1 2\n"], "outputs": ["10 9 10 10 9 \n", "5 6 \n"]}, "2130": {"inputs": ["3\n2\n2\n1\n", "4\n1\n2\n3\n4\n"], "outputs": ["3\n", "1680\n"]}, "2131": {"inputs": ["3\n-1 -1 -1\n", "2\n2 -1\n", "40\n3 3 -1 -1 4 4 -1 -1 -1 -1 -1 10 10 10 10 10 10 4 20 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 3 3 3 3 3 3 3\n"], "outputs": ["3\n", "0\n", "755808950\n"]}, "2132": {"inputs": ["4\n1 2\n1 3\n2 4\n", "4\n1 2\n1 3\n1 4\n"], "outputs": ["16\n", "24\n"]}, "2133": {"inputs": ["2\n0101010\n1010101\n", "3\n0101011\n0011001\n0110111\n"], "outputs": ["1\n", "3\n"]}, "2134": {"inputs": ["5\n1 1 1 1\n1 -1 -1 -1 -1\n", "5\n1 2 3 1\n1 -1 2 -1 -1\n", "3\n1 2\n2 -1 1\n"], "outputs": ["1\n", "2\n", "-1"]}, "2135": {"inputs": ["7\nNNESWW\nSWSWSW\n", "3\nNN\nSS\n"], "outputs": ["YES\n", "NO\n"]}, "2136": {"inputs": ["5\n3 2 2 2 1\n"], "outputs": ["4\n"]}, "2137": {"inputs": ["6 1\n3 6 10 12 13 16\n", "5 3\n8 21 52 15 77\n"], "outputs": ["3\n", "7\n"]}, "2138": {"inputs": ["01011\n0110\n", "0011\n1110\n"], "outputs": ["YES\n", "NO\n"]}, "2139": {"inputs": ["1\n1 4\n", "2\n2 1 2 1\n", "3\n2 2 2 2 2 2\n", "5\n13 8 35 94 9284 34 54 69 123 846\n"], "outputs": ["6\n", "12\n", "0\n", "2588544\n"]}, "2140": {"inputs": ["4\n1 3 1 0\n", "2\n4 4\n"], "outputs": ["YES\n1 3 5 2\n", "NO\n"]}, "2141": {"inputs": ["3\n2 0\n0 2\n2 0\n", "5\n0 1\n1 3\n2 1\n3 0\n2 0\n"], "outputs": ["YES\n1 2 1 \n", "YES\n2 3 2 1 2"]}, "2142": {"inputs": ["1\n-1\n", "3\n-1 18 0\n18 -1 0\n0 0 -1\n", "4\n-1 128 128 128\n128 -1 148 160\n128 148 -1 128\n128 160 128 -1\n"], "outputs": ["0 \n", "18 18 0 \n", "128 180 148 160 \n"]}, "2143": {"inputs": ["3 7 6\n10 8 C\n4 3 C\n5 6 D\n", "2 4 5\n2 5 C\n2 1 D\n", "3 10 10\n5 5 C\n5 5 C\n10 11 D\n"], "outputs": ["9\n", "0\n", "10\n"]}, "2144": {"inputs": ["4\n3 1 7 4\n2 3 2\n2 8 5\n1 10\n", "2\n2 3 -2\n2 -1 5\n", "2\n2 -10 10\n2 0 -20\n"], "outputs": ["Yes\n7 2\n2 3\n5 1\n10 4\n", "No\n", "Yes\n-10 2\n-20 1\n"]}, "2145": {"inputs": ["ababa\naba\n", "welcometoroundtwohundredandeightytwo\nd\n", "ddd\nd\n"], "outputs": ["5\n", "274201\n", "12"]}, "2146": {"inputs": ["5 2 11\n8 10 15 23 5\n", "20 2 16\n20 5 8 2 18 16 2 16 16 1 5 16 2 13 6 16 4 17 21 7\n"], "outputs": ["48\n", "195\n"]}, "2147": {"inputs": ["4 1 3 4 3\n3 2 5 1\n", "4 2 4 4 1\n4 5 1 2\n"], "outputs": ["34\n", "31\n"]}, "2148": {"inputs": ["2\n6 12 10\n4 3 10\n", "4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n"], "outputs": ["Finite\nInfinite\n", "Finite\nFinite\nFinite\nInfinite\n"]}, "2149": {"inputs": ["2 3\n1 2 3\n", "5 5\n5 19 10 20 12\n"], "outputs": ["2\n", "2\n"]}, "2150": {"inputs": ["5\n11011\n3\n1 3 3\n1 4 2\n1 2 3\n"], "outputs": ["Yes\nYes\nNo"]}, "2151": {"inputs": ["3 8\n6 5 8\n", "7 20\n21 15 12 11 20 19 12\n"], "outputs": ["2\n", "6\n"]}, "2152": {"inputs": ["3\n1 0 1\n", "1\n1\n"], "outputs": ["2\n", "-1"]}, "2153": {"inputs": ["3\n", "5\n"], "outputs": ["2\n3 1 2 3\n3 1 2 3\n", "6\n3 5 4 2\n3 3 1 5\n4 4 5 2 3\n4 4 3 2 1\n3 4 2 1\n3 3 1 5"]}, "2154": {"inputs": ["1 1\n1\n", "2 2\n1\n2\n"], "outputs": ["1\n", "2\n2"]}, "2155": {"inputs": ["3 3\n100 100 100\n100 1 100\n100 100 100\n"], "outputs": ["800\n"]}, "2156": {"inputs": ["8\n0 0 5 3\n2 -1 5 0\n-3 -4 2 -1\n-1 -1 2 0\n-3 0 0 5\n5 2 10 3\n7 -3 10 2\n4 -2 7 -1\n"], "outputs": ["YES\n1\n2\n2\n3\n2\n2\n4\n1"]}, "2157": {"inputs": ["5\n1 2 3 4 5\n", "6\n15 14 3 13 1 12\n", "6\n9 7 13 17 5 11\n"], "outputs": ["4 5 2 3 1 \n", "12 13 14 7 3 1 \n", "4 5 2 6 3 1"]}, "2158": {"inputs": ["7\n", "6\n"], "outputs": ["YES\n1\n4\n3\n6\n5\n2\n7\n", "NO\n"]}, "2159": {"inputs": ["5 5\n1 1\n1 1\n2 2\n3 3\n4 4\n", "5 5\n4 1\n4 2\n4 3\n4 4\n4 5\n", "2 2\n1 1\n2 10\n"], "outputs": ["11\n", "9\n", "10\n"]}, "2160": {"inputs": ["6 3\n3 3 1 4 1 6\n", "3 3\n1 1 1\n", "3 3\n1 1 2\n", "3 1\n1 10 100\n"], "outputs": ["Yes\n2 3 1 \n", "Yes\n1 1 1 \n", "No\n", "Yes\n3"]}, "2161": {"inputs": ["3 1 5\n3 2 5\n2 4 2\n1 2\n", "4 2 11\n2 4 6 6\n6 4 2 1\n1 2\n2 3\n"], "outputs": ["6\n", "7\n"]}, "2162": {"inputs": ["4\n1 2\n1 3\n1 4\n", "7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"], "outputs": ["0.1250000000\n0.2916666667\n0.2916666667\n0.2916666667\n", "0.0850694444\n0.0664062500\n0.0664062500\n0.1955295139\n0.1955295139\n0.1955295139\n0.1955295139\n"]}, "2163": {"inputs": ["000\n", "0101\n", "0001111\n", "00101100011100\n"], "outputs": ["3\n", "6\n", "16\n", "477\n"]}, "2164": {"inputs": ["2 5\n3 4\n", "4 1000000000\n5 25 125 625\n", "2 4\n1 3\n"], "outputs": ["1\n2\n", "0\n", "2\n0 2\n"]}, "2165": {"inputs": ["3 4 2\n2 2\n2 3\n", "100 100 3\n15 16\n16 15\n99 88\n"], "outputs": ["2\n", "545732279"]}, "2166": {"inputs": ["5\n2 3 2\n3 1 2 3\n", "8\n4 6 2 3 4\n2 3 6\n"], "outputs": ["Lose Win Win Loop\nLoop Win Win Win\n", "Win Win Win Win Win Win Win\nLose Win Lose Lose Win Lose Lose"]}, "2167": {"inputs": ["10 4\n1 5 2 9 1 3 4 2 1 7\n2 4\n3 8\n7 10\n1 9\n", "7 6\n5 7 7 4 6 6 2\n1 2\n2 3\n2 6\n1 7\n4 7\n3 5\n"], "outputs": ["17\n82\n23\n210\n", "2\n0\n22\n59\n16\n8\n"]}, "2168": {"inputs": ["1\n0\n1\n", "2\n0 5\n4 0\n1 2\n", "4\n0 3 1 1\n6 0 400 1\n2 4 0 1\n1 1 1 0\n4 1 2 3\n"], "outputs": ["0 \n", "9 0 \n", "17 23 404 0"]}, "2169": {"inputs": ["3 3 0\n0 1 2\n", "6 7 2\n1 2 3 4 5 6\n"], "outputs": ["1\n", "3\n"]}, "2170": {"inputs": ["3 6\n5 3 1\n", "1 4\n19\n"], "outputs": ["15\n", "91\n"]}, "2171": {"inputs": ["10\n2 1\n3 1\n4 2\n5 1\n6 2\n7 5\n8 6\n9 8\n10 5\n1 0 1 1 0 1 0 1 0 1\n1 0 1 0 0 1 1 1 0 1\n"], "outputs": ["2\n4\n7"]}, "2172": {"inputs": ["2\n2\n3\n"], "outputs": ["1/6\n7/30"]}, "2173": {"inputs": ["7 4\n1 3\n1 2\n2 0 1\n2 1 2\n", "10 9\n2 2 9\n1 1\n2 0 1\n1 8\n2 0 8\n1 2\n2 1 3\n1 4\n2 2 4\n"], "outputs": ["4\n3\n", "7\n2\n10\n4\n5\n"]}, "2174": {"inputs": ["3\n1 2 0\n", "10\n1 2 3 4 5 6 1 2 9 10\n"], "outputs": ["4\n", "11\n"]}, "2175": {"inputs": ["7\n7\n6\n5\n4\n3\n2\n1\n", "2\n5\n5\n"], "outputs": ["0\n0\n0\n3 0 1 2\n2 1 2\n2 0 2\n2 0 1\n", "0\n1 0\n"]}, "2176": {"inputs": ["6\nADD 1\nACCEPT 1\nADD 2\nACCEPT 2\nADD 3\nACCEPT 3\n", "4\nADD 1\nADD 2\nADD 3\nACCEPT 2\n", "7\nADD 1\nADD 2\nADD 3\nADD 4\nADD 5\nACCEPT 3\nACCEPT 5\n"], "outputs": ["8\n", "2\n", "0\n"]}, "2177": {"inputs": ["4\n6 3 1 2\n", "1\n1000\n", "7\n3 3 3 3 3 3 3\n"], "outputs": ["7\n", "1\n", "7\n"]}, "2178": {"inputs": ["2 1\n1 2\n1 2\n", "4 3\n1 3 2 4\n1 2\n2 3\n1 4\n"], "outputs": ["0.500000000\n", "3.000000000"]}, "2179": {"inputs": ["5 3 7\n8\n4 7 5 5 3 6 2 8\n", "6 5 7\n5\n1 5 7 92 3\n"], "outputs": ["4\n", "0\n"]}, "2180": {"inputs": ["1 1 3 4\n7\n", "4 3 4 2\n7 9 11\n"], "outputs": ["1\n", "4\n"]}, "2181": {"inputs": ["5\n1 4 3 2 5\n", "5\n1 2 2 2 1\n", "7\n10 20 40 50 70 90 30\n"], "outputs": ["6\n", "1\n", "0\n"]}, "2182": {"inputs": ["tinkoff\nzscoder\n", "xxxxxx\nxxxxxx\n", "ioi\nimo\n"], "outputs": ["fzfsirk\n", "xxxxxx\n", "ioi\n"]}, "2183": {"inputs": ["4\n5\n231\n7\n2323\n6\n333\n24\n133321333\n"], "outputs": ["25\n1438\n1101\n686531475\n"]}, "2184": {"inputs": ["5 0\n3 7 3 7 3\n", "10 0\n1 2 1 2 3 1 1 1 50 1\n", "6 0\n6 6 3 3 4 4\n", "7 0\n3 3 1 3 2 1 2\n"], "outputs": ["2\n", "4\n", "0\n", "4"]}, "2185": {"inputs": ["5 4\n1 2\n2 3\n3 4\n3 5\n", "4 6\n1 2\n2 3\n1 3\n3 4\n2 4\n1 4\n", "4 2\n1 3\n2 4\n"], "outputs": ["3\n", "-1\n", "2\n"]}, "2186": {"inputs": ["3\n0 0\n0 1 1\n", "6\n0 1 1 0 4\n1 1 0 0 1 0\n", "10\n0 1 2 1 4 4 4 0 8\n0 0 0 1 0 1 1 0 0 1\n"], "outputs": ["2\n", "1\n", "27"]}, "2187": {"inputs": ["6\n", "9\n", "2\n"], "outputs": ["2\n6 3\n2 4\n", "3\n9 3\n2 4\n6 8\n", "0"]}, "2188": {"inputs": ["12\n+ 1\n+ 241\n? 1\n+ 361\n- 241\n? 0101\n+ 101\n? 101\n- 101\n? 101\n+ 4000\n? 0\n", "4\n+ 200\n+ 200\n- 200\n? 0\n"], "outputs": ["2\n1\n2\n1\n1\n", "1\n"]}, "2189": {"inputs": ["2\n1\n2\n2\n1 1\n"], "outputs": ["T\nHL\n"]}, "2190": {"inputs": ["10\n10 9 7 8 6 5 3 4 2 1\n", "6\n1 2 3 4 5 6\n"], "outputs": ["2\n", "0\n"]}, "2191": {"inputs": ["3\n3 4 5\n"], "outputs": ["2"]}, "2192": {"inputs": ["4\n1 9\n3 1\n6 1\n7 4\n", "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n"], "outputs": ["1\n", "3\n"]}, "2193": {"inputs": ["5\n100 98 100 100\n100 100 100 100\n100 100 99 99\n90 99 90 100\n100 98 60 99\n", "6\n100 80 90 99\n60 60 60 60\n90 60 100 60\n60 100 60 80\n100 100 0 100\n0 0 0 0\n"], "outputs": ["2\n", "1\n"]}, "2194": {"inputs": ["7\n1 2 1 1 4 4\n", "12\n1 1 2 2 4 4 3 3 1 10 8\n"], "outputs": ["1.0 4.0 5.0 3.5 4.5 5.0 5.0 \n", "1.0 5.0 5.5 6.5 7.5 8.0 8.0 7.0 7.5 6.5 7.5 8.0"]}, "2195": {"inputs": ["7\n10 1 1 1 5 5 3\n", "5\n1 1 1 1 1\n"], "outputs": ["4\n", "0\n"]}, "2196": {"inputs": ["3 3\naaa\n", "3 3\naab\n", "1 2\na\n", "10 9\nabacadefgh\n"], "outputs": ["6\n", "11\n", "1\n", "789\n"]}, "2197": {"inputs": ["aba\n", "ab\n"], "outputs": ["aba\n", "aabaa\n"]}, "2198": {"inputs": ["10\nmihail\noolyana\nkooooper\nhoon\nulyana\nkoouper\nmikhail\nkhun\nkuooper\nkkkhoon\n", "9\nhariton\nhkariton\nbuoi\nkkkhariton\nboooi\nbui\nkhariton\nboui\nboi\n", "2\nalex\nalex\n"], "outputs": ["4\n", "5\n", "1\n"]}, "2199": {"inputs": ["7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n", "4 1\n1 2\n1 3\n2 4\n", "8 5\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 5\n"], "outputs": ["7\n", "2\n", "9\n"]}, "2200": {"inputs": ["2\n1 2\n", "3\n1 2 3\n"], "outputs": ["3\n", "2\n"]}, "2201": {"inputs": ["3\n1 2 3\n", "4\n1 2 3 4\n", "10\n1 10 2 9 3 8 4 7 5 6\n"], "outputs": ["1.000000000000000\n", "2.000000000000000\n", "4.500000000000000\n"]}, "2202": {"inputs": ["3\n0 0 0\n", "2\n0 1\n", "5\n0 1 1 1 10\n"], "outputs": ["3 2 1\n", "1 2\n", "1 4 3 2 5\n"]}, "2203": {"inputs": ["2\n0 1\n1 0\n", "5\n0 2 2 1 2\n2 0 4 1 3\n2 4 0 1 3\n1 1 1 0 1\n2 3 3 1 0\n"], "outputs": ["2 1\n", "2 5 4 1 3\n"]}, "2204": {"inputs": ["4 4\n1 2\n2 3\n3 4\n4 1\n", "4 3\n2 1\n2 3\n4 3\n"], "outputs": ["2\n", "10\n"]}, "2205": {"inputs": ["3 3 3\n000\n111\n000\n1 1 1\n2 2 2\n3 3 3\n", "5 2 2\n01\n10\n01\n10\n01\n1 1 4\n5 1 4\n", "5 5 3\n01011\n10110\n01101\n11010\n10101\n1 1 4\n1 2 3\n5 5 3\n", "1 1 3\n0\n1 1 1\n1 1 2\n1 1 3\n"], "outputs": ["1\n1\n1\n", "0\n0\n", "1\n0\n1\n", "0\n0\n0\n"]}, "2206": {"inputs": ["4\n1 3 4 2\n", "8\n6 8 3 4 7 2 1 5\n"], "outputs": ["1 2 3 2 1\n", "1 2 2 3 4 3 4 5 1\n"]}, "2207": {"inputs": ["2\n1 5 5\n2 6 4\n", "3\n1 0 10\n2 0 10\n1 10 0\n"], "outputs": ["LIVE\nLIVE\n", "LIVE\nDEAD\n"]}, "2208": {"inputs": ["5 4\n1 2\n4 3\n1 4\n3 4\n", "6 5\n2 3\n2 1\n3 4\n6 5\n4 5\n"], "outputs": ["1\n", "0\n"]}, "2209": {"inputs": ["6\n1 3\n2 3\n3 4\n4 5\n5 6\n", "6\n1 3\n2 3\n3 4\n4 5\n4 6\n", "7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n"], "outputs": ["1 4\n", "3 3\n", "1 6\n"]}, "2210": {"inputs": ["3\n1 0 1\n1\n1 3\n"], "outputs": ["1\n"]}, "2211": {"inputs": ["4\n2 4\n1 3\n3 12\n3 4 5\n1 5\n5\n2 10\n15 4\n"], "outputs": ["2\n3\n1\n2\n"]}, "2212": {"inputs": ["4 3\n2\n3\n4\n", "13 4\n10\n5\n4\n8\n"], "outputs": ["3\n2\n4\n", "13\n3\n8\n9\n"]}, "2213": {"inputs": ["3\n3 4 2\n4 5 0\n325 265 1231232\n"], "outputs": ["7\n4\n76\n"]}, "2214": {"inputs": ["3\n1 1\n", "5\n1 2 3 4\n"], "outputs": ["4 3 3\n", "5 8 9 8 5"]}, "2215": {"inputs": ["5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n", "2 2 3\n1 2 2\n2 1 3\n2 1\n2 2\n2 3\n"], "outputs": ["2\n", "2"]}, "2216": {"inputs": ["zyxxxxxxyyz\n5\n5 5\n1 3\n1 11\n1 4\n3 6\n"], "outputs": ["YES\nYES\nNO\nYES\nNO\n"]}, "2217": {"inputs": ["1 0\n1\n", "4 5\n0 0 0 -1\n1 2\n2 3\n3 4\n1 4\n2 4\n", "2 1\n1 1\n1 2\n", "3 3\n0 -1 1\n1 2\n2 3\n1 3\n"], "outputs": ["-1\n", "0\n", "1\n1\n", "1\n2\n"]}, "2218": {"inputs": ["4\n1 2 3 4\n3\n2 3\n1 2 2\n2 1\n", "5\n3 50 2 1 10\n3\n1 2 0\n2 8\n1 3 20\n"], "outputs": ["3 2 3 4 \n", "8 8 20 8 10 \n"]}, "2219": {"inputs": ["6 8\nabdabc\n+ 1 a\n+ 1 d\n+ 2 b\n+ 2 c\n+ 3 a\n+ 3 b\n+ 1 c\n- 2\n", "6 8\nabbaab\n+ 1 a\n+ 2 a\n+ 3 a\n+ 1 b\n+ 2 b\n+ 3 b\n- 1\n+ 2 z\n"], "outputs": ["YES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\n", "YES\nYES\nYES\nYES\nYES\nNO\nYES\nNO\n"]}, "2220": {"inputs": ["1 1\n1\n1\n1\n1 1 100\n", "1 1\n1\n1\n1\n2 1 100\n", "4 6\n1 8 2 4\n3 3 6 1 5 2\n3\n1 1 1\n2 5 10\n1 1 6\n"], "outputs": ["100\n", "-1\n", "8\n-1\n4\n"]}, "2221": {"inputs": ["6\n1 1\n1 2\n2 2 1\n1 3\n2 5 2\n1 4\n16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n"], "outputs": ["1 2 1 2 3 1 2 1 2 3 1 2 1 2 3 4"]}, "2222": {"inputs": ["2\n16 4\n...AAAAA........\ns.BBB......CCCCC\n........DDDDD...\n16 4\n...AAAAA........\ns.BBB....CCCCC..\n.......DDDDD....\n", "2\n10 4\ns.ZZ......\n.....AAABB\n.YYYYYY...\n10 4\ns.ZZ......\n....AAAABB\n.YYYYYY...\n"], "outputs": ["YES\nNO\n", "YES\nNO\n"]}, "2223": {"inputs": ["60 3\n2012-03-16 16:15:25: Disk size is\n2012-03-16 16:15:25: Network failute\n2012-03-16 16:16:29: Cant write varlog\n2012-03-16 16:16:42: Unable to start process\n2012-03-16 16:16:43: Disk size is too small\n2012-03-16 16:16:53: Timeout detected\n", "1 2\n2012-03-16 23:59:59:Disk size\n2012-03-17 00:00:00: Network\n2012-03-17 00:00:01:Cant write varlog\n", "2 2\n2012-03-16 23:59:59:Disk size is too sm\n2012-03-17 00:00:00:Network failute dete\n2012-03-17 00:00:01:Cant write varlogmysq\n"], "outputs": ["2012-03-16 16:16:43\n", "-1\n", "2012-03-17 00:00:00"]}, "2224": {"inputs": ["5\n01011\n11001\n", "6\n011000\n010011\n"], "outputs": ["4\n", "6\n"]}, "2225": {"inputs": ["2 2\n00\n01\n"], "outputs": ["Alice\n"]}, "2226": {"inputs": ["4\n0110\n", "7\n1101001\n", "12\n011100011100\n"], "outputs": ["12\n", "30\n", "156\n"]}, "2227": {"inputs": ["6 4\n()(())\n", "8 8\n(()(()))\n"], "outputs": ["()()\n", "(()(()))"]}, "2228": {"inputs": ["4 4 2\n2 3\n1 2\n1 3\n1 4\n", "5 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n4 1\n3 2\n", "5 7 2\n1 5\n3 2\n2 5\n3 4\n1 2\n5 3\n1 3\n"], "outputs": ["0\n0\n3\n3\n", "0\n0\n0\n3\n3\n4\n4\n5\n", "0\n0\n0\n0\n3\n4\n4\n"]}, "2229": {"inputs": ["ababcba\nabb\n5 3 4 1 7 6 2\n", "bbbabb\nbb\n1 6 3 4 2 5\n"], "outputs": ["3\n", "4\n"]}, "2230": {"inputs": ["5\n300 200 400 500 911\n1 2 1 2 3\n2 1 3 2 1\n6\n2 3 1 2 1 1\n", "2\n1000000000 1\n1 1\n1 2\n2\n2 1\n"], "outputs": ["200 400 300 500 911 -1 \n", "1 1000000000"]}, "2231": {"inputs": ["4\n7 8\nAAPAAAAA\nPPPPAAAA\nPPPPAAAA\nAPAAPPPP\nAPAPPAPP\nAAAAPPAP\nAAAAPPAA\n6 5\nAAAAA\nAAAAA\nAAPAA\nAAPAP\nAAAPP\nAAAPP\n4 4\nPPPP\nPPPP\nPPPP\nPPPP\n3 4\nPPPP\nPAAP\nPPPP\n"], "outputs": ["2\n1\nMORTAL\n4\n"]}, "2232": {"inputs": ["3\n", "2\n", "4\n"], "outputs": ["14\n16\n46\n", "999999999999999998\n44500000000\n", "2\n17\n46\n97\n"]}, "2233": {"inputs": ["2\n2 4\n"], "outputs": ["2\n4\n"]}, "2234": {"inputs": ["4\n1 3\n2 3\n4 3\n4\n2 1 2\n3 2 3 4\n3 1 2 4\n4 1 2 3 4\n", "7\n1 2\n2 3\n3 4\n1 5\n5 6\n5 7\n1\n4 2 4 6 7\n"], "outputs": ["1\n-1\n1\n-1\n", "2\n"]}, "2235": {"inputs": ["4\n1 2\n1 3\n1 4\n", "4\n1 2\n2 3\n3 4\n"], "outputs": ["6\n", "7\n"]}, "2236": {"inputs": ["7 3\n0011100\n3\n1 4 6\n3\n3 4 7\n2\n2 3\n", "8 6\n00110011\n3\n1 3 8\n5\n1 2 5 6 7\n2\n6 8\n2\n3 5\n2\n4 7\n1\n2\n", "5 3\n00011\n3\n1 2 3\n1\n4\n3\n3 4 5\n", "19 5\n1001001001100000110\n2\n2 3\n2\n5 6\n2\n8 9\n5\n12 13 14 15 16\n1\n19\n"], "outputs": ["1\n2\n3\n3\n3\n3\n3\n", "1\n1\n1\n1\n1\n1\n4\n4\n", "1\n1\n1\n1\n1\n", "0\n1\n1\n1\n2\n2\n2\n3\n3\n3\n3\n4\n4\n4\n4\n4\n4\n4\n5\n"]}, "2237": {"inputs": ["5\n5 4 3 2 1\n", "3\n1 2 3\n"], "outputs": ["0 1 3 6 10 \n", "0 0 0"]}, "2238": {"inputs": ["3\n1 2\n2 4\n1 10\n"], "outputs": ["1\n3\n7\n"]}, "2239": {"inputs": ["4 4\n1 2 b\n1 3 a\n2 4 c\n3 4 b\n", "5 8\n5 3 h\n1 2 c\n3 1 c\n3 2 r\n5 1 r\n4 3 z\n5 4 r\n5 2 h\n"], "outputs": ["BAAA\nABAA\nBBBA\nBBBB\n", "BABBB\nBBBBB\nAABBB\nAAABA\nAAAAB\n"]}, "2240": {"inputs": ["3\n1 2\n1 3\n1 -1 1\n"], "outputs": ["3"]}, "2241": {"inputs": ["2 3\n1 1\n1 1\n"], "outputs": ["4\n"]}, "2242": {"inputs": ["2\n1 1\n1 2\n2 1\n2 2\n"], "outputs": ["8\n"]}, "2243": {"inputs": ["2 2\n2 3\n1 4\n"], "outputs": ["3\n"]}, "2244": {"inputs": ["3\n1 3\n5 7\n1 3\n"], "outputs": ["2\n"]}, "2245": {"inputs": ["3 3 3\n1 2 3\n1 2 1\n1 3 2\n2 3 4\n1 2\n1 3\n2 3\n", "1 1 1\n1\n1 1 1\n1 1\n", "4 3 6\n1 2 3 4\n1 2 1\n2 3 2\n3 4 4\n1 2\n1 3\n2 3\n1 2\n1 3\n2 3\n"], "outputs": ["9 18 17\n", "2\n", "5 18 31 20"]}, "2246": {"inputs": ["5 10000\n10000 30000 30000 40000 20000\n20000\n5 2 8 3 6\n", "5 10000\n10000 40000 30000 30000 20000\n10000\n5 2 8 3 6\n"], "outputs": ["5\n", "-1\n"]}, "2247": {"inputs": ["2\n1 2\n", "3\n1 2\n1 3\n"], "outputs": ["1.50000000000000000000\n", "2.00000000000000000000\n"]}, "2248": {"inputs": ["3\n10 4\n12 6\n179 822\n"], "outputs": ["10\n4\n179\n"]}, "2249": {"inputs": ["2\n1 2 2 2\n1 1 2 2\n"], "outputs": ["1\n4\n"]}, "2250": {"inputs": ["3 3 4\n1 1\n1 2\n2 1\n2 2\n", "3 4 6\n1 1\n2 1\n1 2\n2 2\n1 3\n2 3\n", "7 4 5\n1 3\n2 2\n5 1\n5 3\n4 3\n"], "outputs": ["1\n-1\n-1\n2\n", "1\n-1\n-1\n2\n5\n-1\n", "13\n2\n9\n5\n-1\n"]}, "2251": {"inputs": ["4 5\n1 2\n2 4\n1 3\n3 4\n2 3\n2\n2\n3\n", "3 3\n1 2\n2 3\n1 3\n5\n1\n2\n2\n1\n3\n"], "outputs": ["4\n3\n2\n", "1\n1\n1\n1\n1\n1\n"]}, "2252": {"inputs": ["3\naa\nbb\ncd\n", "6\naab\nabcac\ndffe\ned\naa\naade\n"], "outputs": ["1\n", "6\n"]}, "2253": {"inputs": ["3\n", "4\n"], "outputs": ["3 2\n0\n", "4 3\n3\n1 2 2 2\n3 2 3 3\n1 3 2 3\n"]}, "2254": {"inputs": ["3 4\n1 3\n1 1\n1 2\n2 3\n", "4 6\n1 2\n1 4\n1 2\n3 3\n1 3\n1 3\n"], "outputs": ["1\n2\n3\n2\n", "1\n2\n3\n0\n1\n2\n"]}, "2255": {"inputs": ["5\n1 2 3 4 5\n", "6\n3 2 2 3 7 6\n", "3\n42 4 2\n"], "outputs": ["1\n", "3\n", "0\n"]}, "2256": {"inputs": ["2 3\n", "1 1\n"], "outputs": ["1 1\n1 3\n1 2\n2 2\n2 3\n2 1\n", "1 1\n"]}, "2257": {"inputs": ["5\n3\naab\nbcc\n4\ncabc\nabcb\n3\nabc\ntsr\n4\naabd\ncccd\n5\nabcbd\nbcdda\n"], "outputs": ["2\n-1\n3\n2\n-1\n"]}, "2258": {"inputs": ["4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n"], "outputs": ["1\n4\n4\n165\n"]}, "2259": {"inputs": ["13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n", "5 2\n1 4 1 2 4\n0 0\n1 0\n"], "outputs": ["5\n11\n6\n1\n0\n", "2\n0\n"]}, "2260": {"inputs": ["7 11 3\n4 7 8 10 10 9 3\n6 2\n6 1\n7 6\n4 3\n4 6\n3 1\n5 3\n7 5\n7 3\n4 2\n1 4\n"], "outputs": ["3\n2\n1\n1\n3\n1\n2\n1\n2\n3\n2\n"]}, "2261": {"inputs": ["50 3 1\n49 1 1\n26 1 4\n6 1 10\n", "10 2 1\n1 1000 4\n9 1000 4\n"], "outputs": ["-31\n", "1992"]}, "2262": {"inputs": ["4 2 3\n0 1 3 1\n1 1 4 1\n2 0 2 2\n"], "outputs": ["YES\n"]}, "2263": {"inputs": ["abc\n"], "outputs": ["3\n"]}, "2264": {"inputs": ["4 4\n1 3\n1 2 1\n2 3 1\n3 4 1\n4 1 1\n"], "outputs": ["2\n"]}, "2265": {"inputs": ["5\n5\n2\n1\n4\n3\n"], "outputs": ["Yes\n"]}, "2266": {"inputs": ["4 4\n0 3\n2 3\n1 3\n3 4\n"], "outputs": ["0\n"]}, "2267": {"inputs": ["5\n1 2\n2 3\n2 4\n4 5\nWBBWW\n"], "outputs": ["5\n"]}, "2268": {"inputs": ["4\n2 3 4 1\n"], "outputs": ["POSSIBLE\n"]}, "2269": {"inputs": ["5 5\n1 2\n1 3\n3 4\n3 5\n4 5\n"], "outputs": ["4\n"]}, "2270": {"inputs": ["3 5 7 5\n"], "outputs": ["1\n"]}, "2271": {"inputs": ["5 2\n5 3 1 4 2\n1 3\n5 4\n"], "outputs": ["2\n"]}, "2272": {"inputs": ["2\n1 2\n3 4\n"], "outputs": ["2\n"]}, "2273": {"inputs": ["6\n1\n14\n2\n1 -1\n4\n5 5 5 1\n3\n3 2 1\n2\n0 1\n5\n-239 -2 -100 -3 -11\n"], "outputs": ["YES\nYES\nYES\nNO\nNO\nYES\n"]}, "2274": {"inputs": ["2 2\n0 1 2 3\n2 5\n0 4\n", "1 0\n2 3\n", "2 0\n1 1 1 1\n"], "outputs": ["1.500000\n2.250000\n3.250000\n", "2.500000\n", "1.000000\n"]}, "2275": {"inputs": ["4\n5 2\n2 3 4 4 3\n3 1\n2 10 1000\n4 5\n0 1 1 100\n1 8\n89\n"], "outputs": ["4\n1\n146981438\n747093407\n"]}, "2276": {"inputs": ["2\n2 3\n2 5 7\n4 2 4\n3 6\n4 1 5 2 10 4\n8 6 6 4 9 10\n5 4 9 5 8 7\n"], "outputs": ["12\n29\n"]}, "2277": {"inputs": ["3 6 3\n2 1 3\n1 2 3 1 2 3\n1 5\n2 6\n3 5\n", "2 4 3\n2 1\n1 1 2 2\n1 2\n2 3\n3 4\n"], "outputs": ["110\n", "010\n"]}, "2278": {"inputs": ["3\n-1 0\n0 2\n1 0\n", "5\n1 0\n1 -1\n0 -1\n-1 0\n-1 -1\n"], "outputs": ["2\n", "1\n"]}, "2279": {"inputs": ["3\n1 5 10\n"], "outputs": ["1\n3\n3\n"]}, "2280": {"inputs": ["2 2\n50 50\n2\n2\n", "5 5\n10 20 30 40 50\n2\n3\n4\n5\n3\n"], "outputs": ["4\n6\n", "117\n665496274\n332748143\n831870317\n499122211\n"]}, "2281": {"inputs": ["5 5\n1 2 1 1 2\n1 2\n1 3\n2 4\n2 5\n1 2 3\n1 1 2\n2 1\n2 2\n2 4\n"], "outputs": ["3\n3\n0\n"]}, "2282": {"inputs": ["1\n1 1 9\n", "2\n2 3 20\n2 4 40\n", "2\n1 2 5\n2 3 5\n"], "outputs": ["3\n", "6\n", "0\n"]}, "2283": {"inputs": ["4\n4 3 2 1 2\n1 2\n1 3\n1 4\n6 6 1 2 5\n1 2\n6 5\n2 3\n3 4\n4 5\n9 3 9 2 5\n1 2\n1 6\n1 9\n1 3\n9 5\n7 9\n4 8\n4 3\n11 8 11 3 3\n1 2\n11 9\n4 9\n6 5\n2 10\n3 2\n5 9\n8 3\n7 4\n7 10\n"], "outputs": ["Alice\nBob\nAlice\nAlice\n"]}, "2284": {"inputs": ["aaaaa\n3\n1 1\n2 4\n5 5\n", "aabbbbbbc\n6\n1 2\n2 4\n2 2\n1 9\n5 7\n3 5\n"], "outputs": ["Yes\nNo\nYes\n", "No\nYes\nYes\nYes\nNo\nNo\n"]}, "2285": {"inputs": ["5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n"], "outputs": ["121212211211\n1\n222222222\n21\n-\n"]}, "2286": {"inputs": ["3 2\n"], "outputs": ["2 1 \n"]}, "2287": {"inputs": ["5\n1 2\n3 1\n4 3\n3 5\n2\n2 6\n5 7\n"], "outputs": ["Yes\n5\n6\n6\n5\n7\n"]}, "2288": {"inputs": ["180\n3\n60 120 180\n3\n30 90\n61 1\n180 180\n"], "outputs": ["60\n1\n120\n"]}, "2289": {"inputs": ["atcoderregularcontest\n"], "outputs": ["b\n"]}, "2290": {"inputs": ["3 3\n..#\n##.\n.#.\n"], "outputs": ["6\n"]}, "2291": {"inputs": ["7\n10\n15\n13\n18\n11\n14\n19\n"], "outputs": ["1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n"]}, "2292": {"inputs": ["aab\n"], "outputs": ["1\n1\n"]}, "2293": {"inputs": ["2\n1 2 3 1\n"], "outputs": ["3\n4\n5\n"]}, "2294": {"inputs": ["3\n1 2\n3 4\n5 6\n"], "outputs": ["15\n"]}, "2295": {"inputs": ["2\n1 2\n3 2\n"], "outputs": ["2\n"]}, "2296": {"inputs": ["eel\n"], "outputs": ["1\n"]}, "2297": {"inputs": ["4 5\n3 1\n1 2\n4 1\n6 2\n1 2\n2 3\n2 4\n1 4\n3 4\n"], "outputs": ["6\n"]}, "2298": {"inputs": ["3 2\n100 50 200\n"], "outputs": ["1\n"]}, "2299": {"inputs": ["4\n3 2 4 1\n"], "outputs": ["3 1 2 4\n"]}, "2300": {"inputs": ["2\n0 0\n"], "outputs": ["8\n"]}, "2301": {"inputs": ["3 10\n10 10\n20 5\n4 3\n"], "outputs": ["10.0000000\n15.0000000\n13.2000000\n"]}, "2302": {"inputs": ["4 10\n3 4 3 3\n2\n4 3\n"], "outputs": ["NO\nYES\n"]}, "2303": {"inputs": ["3 3\n1 2 1\n2 3 1\n3 1 2\n"], "outputs": ["1\n"]}, "2304": {"inputs": ["3\n0\n"], "outputs": ["5\n"]}, "2305": {"inputs": ["6\n1 2\n1 3\n1 4\n1 5\n5 6\n"], "outputs": ["1 2 4 5 3 6\n"]}, "2306": {"inputs": ["5 1 2\n1 1\n4 3\n6 1\n5 5\n4 8\n"], "outputs": ["4\n"]}, "2307": {"inputs": ["4 2 5\n1 2 5 7\n"], "outputs": ["11\n"]}, "2308": {"inputs": ["3 3\n3 2 4 8\n2 2 5\n2 6 3\n", "2 2\n2 7 8\n1 -8\n"], "outputs": ["10 15 16 \n", "7 8 \n"]}, "2309": {"inputs": ["3\n3\n1 10 100\n1\n1\n2\n2 4\n"], "outputs": ["YES\n1 2 3 \nYES\n1 \nYES\n1 2"]}, "2310": {"inputs": ["5 5\n", "3 2\n"], "outputs": [">...v\nv.<..\n..^..\n>....\n..^.<\n1 1\n", ">vv\n^<.\n^.<\n1 3\n"]}, "2311": {"inputs": ["4\n22 73 9\n45 64 6\n47 55 7\n2 62 4\n", "4\n82 94 6\n56 67 4\n28 59 9\n39 74 4\n"], "outputs": ["1\n4\n0\n8\n", "3\n1\n1\n5\n"]}, "2312": {"inputs": ["5 3\n1 3 0 2 1\n1 3\n2 4\n1 4\n"], "outputs": ["Fou\nShi\nShi\n"]}, "2313": {"inputs": ["5\n1 2 3 4 5\n5 4 3 2 0\n", "6\n1 2 3 10 20 30\n6 5 4 3 2 0\n"], "outputs": ["25\n", "138"]}, "2314": {"inputs": ["3\n8 4 1\n2\n2 3\n1 2\n", "6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 4\n1 2\n"], "outputs": ["5\n12\n", "60\n30\n12\n3\n"]}, "2315": {"inputs": ["6\n3\n2 3 4\n2\n3 3\n3\n-1 -1 -1\n3\n3 4 -1\n1\n2\n4\n4 -1 4 5\n"], "outputs": ["1 2 3\n2 1\n2 1 3\n-1\n1\n3 2 1 4\n"]}, "2316": {"inputs": ["3\n3\n1 2 2\n3\n2 2 3\n5\n0 0 0 2 2\n", "4\n5\n4 1 5 1 3\n4\n1 0 1 6\n1\n0\n2\n5 4\n"], "outputs": ["WIN\nLOSE\nDRAW\n", "WIN\nWIN\nDRAW\nWIN\n"]}, "2317": {"inputs": ["3\n4\n1 7 6 5\n5\n1 2 3 4 5\n2\n0 -4\n"], "outputs": ["2\n0\n3\n"]}, "2318": {"inputs": ["5 0\n5 3 4 1 2\n", "10 -10\n5 5 1 7 5 1 2 4 9 2\n"], "outputs": ["2\n3\n4\n", "2\n4\n5\n7\n8\n9\n"]}, "2319": {"inputs": ["3\n5 3\n1 2 3 4 5\n3 2 5\n4 3\n4 3 2 1\n4 3 1\n7 4\n1 4 7 3 6 2 5\n3 2 4 5\n"], "outputs": ["2\n0\n4\n"]}, "2320": {"inputs": ["5\n7 3 5 3 4\n2 1 3 2 3\n", "7\n4 6 5 8 8 2 6\n2 1 2 2 1 1 2\n"], "outputs": ["4 7 3 5 3\n", "2 6 4 5 8 8 6"]}, "2321": {"inputs": ["5 4\n1 1 3\n2 3 90\n2 5 48\n1 4 1\n"], "outputs": ["8.0000000000 0.0000000000\n5.0000000000 -3.0000000000\n4.2568551745 -2.6691306064\n4.2568551745 -3.6691306064\n"]}, "2322": {"inputs": ["3\n0 0\n0 1\n1 0\n1\n1 1 2\n", "4\n0 0\n0 1\n1 0\n1 1\n2\n0 1 1 2\n2 5 5 8\n"], "outputs": ["1 1 1 \n", "4 0 0 0 1 1 0 1 1 \n4 -1 -1 -1 2 2 -1 2 2 \n"]}, "2323": {"inputs": ["3 4\n1 4\n2 2 5 1\n1 3 3 2\n2 2 5 1\n"], "outputs": ["11\n"]}, "2324": {"inputs": ["7\n3 6\n1 2\n3 1\n7 4\n5 7\n1 4\n"], "outputs": ["Fennec\n"]}, "2325": {"inputs": ["BBBAAAABA\nBBBBA\n4\n7 9 2 5\n7 9 1 4\n1 7 2 5\n1 7 2 4\n"], "outputs": ["YES\nNO\nYES\nNO\n"]}, "2326": {"inputs": ["2\n1 2\n"], "outputs": ["2\n1\n"]}, "2327": {"inputs": ["3 3\n1 2\n2 3\n3 3\n"], "outputs": ["3\n2\n2\n"]}, "2328": {"inputs": ["5 10\n1 2 3 5 6\n3 2 3 3\n3 2 3 4\n3 2 3 5\n2 2 5\n3 2 4 8\n1 2 1\n3 2 4 8\n2 1 4 \n3 2 4 3 \n3 1 5 7 \n", "3 4\n2013 2015 2017\n3 1 3 4030\n1 1 111\n3 1 3 4030\n3 1 2 111\n"], "outputs": ["yes\nNo\nYes\nYes\nYes\nNo\nYesSecond\n", "yes\nNo\nYes\n"]}, "2329": {"inputs": ["5 3\n1 5 2 4 7\n7 9 6\n", "4 2\n7 7 7 7\n3 4\n"], "outputs": ["4\n", "6\n"]}, "2330": {"inputs": ["1111\n"], "outputs": ["-1\n"]}, "2331": {"inputs": ["4\n8 4 7\n1 2\n2 3\n1 4\n4 5\n4 6\n1 7\n7 8\n4 3 2\n4 3\n1 2\n2 3\n9 3 5\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n1 8\n8 9\n16 15 12\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n4 8\n8 9\n8 10\n10 11\n11 12\n11 13\n13 14\n10 15\n15 16\n"], "outputs": ["YES\nNO\nNO\nYES\n"]}, "2332": {"inputs": ["3\n7 7 3 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 5\n4 5 2 3\n1 2\n2 3\n3 4\n4 1\n4 2\n4 3 2 1\n1 2\n2 3\n4 1\n"], "outputs": ["4\n0\n1"]}, "2333": {"inputs": ["9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"], "outputs": ["1\n2\n3\n4\n8\n12\n5\n10\n15\n"]}, "2334": {"inputs": ["3\nAAA\nBABA\nAABBBABBBB\n"], "outputs": ["3\n2\n0\n"]}, "2335": {"inputs": ["5\n5\n2 3 4 5 1\n1\n1\n3\n1 3 2\n4\n4 2 3 1\n5\n1 5 2 4 3\n"], "outputs": ["Yes\nYes\nNo\nYes\nNo\n"]}, "2336": {"inputs": ["5\n2 4 5 1 3\n"], "outputs": ["Petr\n"]}, "2337": {"inputs": ["5\n12\n5 4 4 3 2 2 1 1 1 1 1 1\n4\n4 3 2 1\n1\n1000000\n20\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n32\n64 64 63 58 58 58 58 58 37 37 37 37 34 34 28 28 28 28 28 28 24 24 19 17 17 17 17 16 16 16 16 11\n"], "outputs": ["1 2 3\n0 0 0\n0 0 0\n2 5 3\n2 6 6\n"]}, "2338": {"inputs": ["5\n2\n01\n10\n5\n01011\n11100\n2\n01\n01\n10\n0110011011\n1000110100\n1\n0\n1\n"], "outputs": ["3 1 2 1\n6 5 2 5 3 1 2\n0\n9 4 1 2 10 4 1 2 1 5\n1 1\n"]}, "2339": {"inputs": ["5\n2\n01\n10\n5\n01011\n11100\n2\n01\n01\n10\n0110011011\n1000110100\n1\n0\n1\n"], "outputs": ["3 1 2 1\n6 5 2 5 3 1 2\n0\n9 4 1 2 10 4 1 2 1 5\n1 1\n"]}, "2340": {"inputs": ["6\n2\n2 3 1 4\n2\n3 1 2 4\n4\n3 2 6 1 5 7 8 4\n3\n1 2 3 4 5 6\n4\n6 1 3 7 4 5 8 2\n6\n4 3 2 5 1 11 9 12 8 6 10 7\n"], "outputs": ["YES\nNO\nYES\nYES\nNO\nNO\n"]}, "2341": {"inputs": ["4\n6 4 2\n2 9 2 3 8 5\n4 4 1\n2 13 60 4\n4 1 3\n1 2 2 1\n2 2 0\n1 2\n"], "outputs": ["8\n4\n1\n1\n"]}, "2342": {"inputs": ["4\n3\n1 2 1\n5\n11 7 9 6 8\n5\n1 3 1 3 1\n4\n5 2 1 10\n"], "outputs": ["YES\nYES\nNO\nYES"]}, "2343": {"inputs": ["10\n1 1000000000\n2 999999999\n3 99999998\n4 9999997\n5 999996\n6 99995\n7 9994\n8 993\n9 92\n10 1\n"], "outputs": ["1\n3\n5\n11\n17\n23\n29\n59\n89\n0"]}, "2344": {"inputs": ["4\n1 2\n1 3\n1 2\n1 2\n1 3\n1 2\n2 5\n1 2\n3 1\n1 4\n5 1\n1 6\n2 15\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n"], "outputs": ["Matching\n2\nIndSet\n1\nIndSet\n2 4\nMatching\n1 15\n"]}, "2345": {"inputs": ["4\n2\n1 1\n3\n1 31 12\n3\n12345 67 84\n9\n1 2 3 4 5 6 7 8 9\n"], "outputs": ["2\n2\n2\n31680"]}, "2346": {"inputs": ["3\n4 5\n1 0 3 2\n2 2\n100 1\n1 8\n0\n"], "outputs": ["3\n101\n0\n"]}, "2347": {"inputs": ["9\n6 4\n100110\n3 2\n1?1\n3 2\n1?0\n4 4\n????\n7 4\n1?0??1?\n10 10\n11??11??11\n4 2\n1??1\n4 4\n?0?0\n6 2\n????00\n"], "outputs": ["YES\nYES\nNO\nYES\nYES\nNO\nNO\nYES\nNO\n"]}, "2348": {"inputs": ["9\n1 3 6 13 15 18 19 29 31\n10\n4\n1 8\n7 3\n6 7\n8 5\n"], "outputs": ["4\n2\n1\n2\n"]}, "2349": {"inputs": ["1.5\n"], "outputs": ["4\n0 0.4\n0 0.3\n1 0.2"]}, "2350": {"inputs": ["4\n3\n4\n5\n8\n"], "outputs": ["1\n6\n25\n93268\n"]}, "2351": {"inputs": ["3\n5 12\n1 0 2 0 4 0 5 0\n5 12\n3 30 4 0 5 0 6 0\n5 12\n3 0 4 0 5 0 6 0\n"], "outputs": ["1:20.56\n-1\n3:26.43\n"]}, "2352": {"inputs": ["httpsunrux\n", "ftphttprururu\n"], "outputs": ["http://sun.ru/x\n", "ftp://http.ru/ruru\n"]}, "2353": {"inputs": ["2\n1 2\n", "4\n1000 100 10 1\n"], "outputs": ["2 1 \n", "100 1 1000 10\n"]}, "2354": {"inputs": ["ya\n4\nah\noy\nto\nha\n", "hp\n2\nht\ntp\n", "ah\n1\nha\n"], "outputs": ["YES\n", "NO\n", "YES\n"]}, "2355": {"inputs": ["3 3\n1 2 3\n"], "outputs": ["12\n50\n216\n"]}, "2356": {"inputs": ["4 2\n"], "outputs": ["2\n"]}, "2357": {"inputs": ["3 5\n1 2 1\n"], "outputs": ["8\n"]}, "2358": {"inputs": ["-2 -2 2 2\n1\n0 0 1\n"], "outputs": ["3.6568542495\n"]}, "2359": {"inputs": ["3 1 998244353\n"], "outputs": ["1\n3\n1\n"]}, "2360": {"inputs": ["2\n", "9\n", "1\n"], "outputs": ["4\nNNYY\nNNYY\nYYNN\nYYNN\n", "8\nNNYYYNNN\nNNNNNYYY\nYNNNNYYY\nYNNNNYYY\nYNNNNYYY\nNYYYYNNN\nNYYYYNNN\nNYYYYNNN\n", "2\nNY\nYN\n"]}, "2361": {"inputs": ["6\n1\n2\n3\n4\n5\n6\n"], "outputs": ["1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6"]}, "2362": {"inputs": ["4\n2\n-1 -2 0 0 0 0\n-1 -2 0 0 0 0\n3\n1 5 1 1 1 1\n2 5 0 1 0 1\n3 5 1 0 0 0\n2\n1337 1337 0 1 1 1\n1336 1337 1 1 0 1\n1\n3 5 1 1 1 1\n"], "outputs": ["1 -1 -2\n1 2 5\n0\n1 -100000 -100000"]}, "2363": {"inputs": ["5\n5\n3 1 2 6 4\n6\n2 1 3 2 4 3\n4\n7 9 3 1\n2\n1 1000\n3\n100 150 200\n"], "outputs": ["1\n0\n2\n999\n50\n"]}, "2364": {"inputs": ["2\n4 3 2 3 4\n1 2 3\n1 2\n1 3\n1 4\n7 9 1 5 7\n2 10 4 8 5 6 7 3 3\n1 2\n1 3\n1 4\n3 2\n3 5\n4 2\n5 6\n1 7\n6 7\n"], "outputs": ["7\n12\n"]}, "2365": {"inputs": ["5\n6\n3 2 5 6\n2 4 6\n3 1 3 4\n2 1 3\n4 1 2 4 6\n5\n2 2 3\n2 1 2\n2 1 4\n2 4 5\n7\n3 1 2 6\n4 1 3 5 6\n2 1 2\n3 4 5 7\n6 1 2 3 4 5 6\n3 1 3 6\n2\n2 1 2\n5\n2 2 5\n3 2 3 5\n4 2 3 4 5\n5 1 2 3 4 5\n"], "outputs": ["3 1 4 6 2 5 \n3 2 1 4 5 \n2 1 6 3 5 4 7 \n1 2 \n2 5 3 4 1"]}, "2366": {"inputs": ["5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n"], "outputs": ["3\n0\n1\n8\n2"]}, "2367": {"inputs": ["4\n4\nabcd\nabdc\n5\nababa\nbaaba\n4\nasdf\nasdg\n4\nabcd\nbadc\n"], "outputs": ["NO\nYES\nNO\nYES"]}, "2368": {"inputs": ["5\n3\n3 5 6\n3 2 3\n5\n1 2 3 4 5\n5 4 3 2 1\n3\n1 1 1\n2 2 2\n6\n1 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1\n3\n10 12 8\n7 5 4\n"], "outputs": ["6\n16\n0\n4999999995\n7\n"]}, "2369": {"inputs": ["3\n8\n1 0\n4 1\n2 0\n4 1\n5 1\n6 1\n3 0\n2 0\n4\n1 1\n1 1\n2 1\n2 1\n9\n2 0\n2 0\n4 1\n4 1\n4 1\n7 0\n7 1\n7 0\n7 1\n"], "outputs": ["3 3\n3 3\n9 5\n"]}, "2370": {"inputs": ["6\n8\n1 1 2 2 3 2 1 1\n3\n1 3 3\n4\n1 10 10 1\n1\n26\n2\n2 1\n3\n1 1 1\n"], "outputs": ["7\n2\n4\n1\n1\n3"]}, "2371": {"inputs": ["5\n4\n1 2 3 4\n7\n4 3 3 8 4 5 2\n3\n1 1 1\n7\n1 3 1 4 5 3 2\n5\n5 4 3 2 3\n"], "outputs": ["0\n4\n0\n2\n3\n"]}, "2372": {"inputs": ["5\n1\n5\n42\n1337\n1000000000\n"], "outputs": ["0\n3\n11\n72\n63244"]}, "2373": {"inputs": ["4\n4 2\n1 2 1 2\n4 3\n1 2 2 1\n8 7\n6 1 1 7 6 3 4 6\n6 6\n5 2 6 1 3 4\n"], "outputs": ["0\n1\n4\n2"]}, "2374": {"inputs": ["6\n7\n2323216\n1615124\n1\n3\n4\n2\n13\n24\n2\n12\n34\n3\n536\n345\n2\n46\n54\n"], "outputs": ["YES\nYES\nYES\nNO\nYES\nNO\n"]}, "2375": {"inputs": ["6\n8\n1 1 2 2 3 2 1 1\n3\n1 3 3\n4\n1 10 10 1\n1\n26\n2\n2 1\n3\n1 1 1\n"], "outputs": ["7\n2\n4\n1\n1\n3"]}, "2376": {"inputs": ["4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n"], "outputs": ["2\n3\n3\n4\n"]}, "2377": {"inputs": ["4\n5\n4 7 2 3 9\n5\n3 5 8 1 7\n5\n1 4 5 7 12\n4\n0 2 1 3\n"], "outputs": ["2\n2\n0\n2\n"]}, "2378": {"inputs": ["6\nLRU\nDURLDRUDRULRDURDDL\nLRUDDLRUDRUL\nLLLLRRRR\nURDUR\nLLL\n"], "outputs": ["2\nLR\n14\nRUURDDDDLLLUUR\n12\nULDDDRRRUULL\n2\nLR\n2\nUD\n0\n"]}, "2379": {"inputs": ["4\n4\n0011\n6\n111111\n5\n10101\n8\n01010000\n"], "outputs": ["2\n1 2 2 1 \n6\n1 2 3 4 5 6 \n1\n1 1 1 1 1 \n4\n1 1 1 1 1 2 3 4"]}, "2380": {"inputs": ["6\n9 2\n010001010\n9 3\n111100000\n7 4\n1111111\n10 3\n1001110101\n1 1\n1\n1 1\n0\n"], "outputs": ["1\n2\n5\n4\n0\n0"]}, "2381": {"inputs": ["6\nLRLRRLL\nL\nLLR\nRRRR\nLLLLLL\nR\n"], "outputs": ["3\n2\n3\n1\n7\n1\n"]}, "2382": {"inputs": ["5\n2 4\nabac\nzbab\n2 4\naaaa\nbbbb\n3 3\nbaa\naaa\naab\n2 2\nab\nbb\n3 1\na\nb\nc\n"], "outputs": ["abab\n-1\naaa\nab\nz\n"]}, "2383": {"inputs": ["8\n3 2\n4 2\n1 1\n3 1\n4 7\n1 3\n7 4\n100 100\n"], "outputs": ["16\n16\n4\n9\n64\n9\n64\n40000\n"]}, "2384": {"inputs": ["9\n5\n4 7 2 2 9\n5\n3 5 8 1 7\n5\n1 2 2 4 5\n2\n0 1\n3\n0 1 0\n4\n0 1 0 0\n4\n0 1 0 1\n4\n0 1 0 2\n20\n16 15 1 10 0 14 0 10 3 9 2 5 4 5 17 9 10 20 0 9\n"], "outputs": ["2\n2\n0\n0\n1\n1\n1\n1\n16\n"]}, "2385": {"inputs": ["3\n1 2\n01\nRL\n3 3\n001\n101\n110\nRLL\nDLD\nULL\n3 3\n000\n000\n000\nRRD\nRLD\nULL\n"], "outputs": ["2 1\n4 3\n2 2"]}, "2386": {"inputs": ["5\n2\n1 1 2 2\n4\n1 3 1 4 3 4 2 2\n5\n1 2 1 2 3 4 3 5 4 5\n3\n1 2 3 1 2 3\n4\n2 3 2 4 1 3 4 1\n"], "outputs": ["1 2 \n1 3 4 2 \n1 2 3 4 5 \n1 2 3 \n2 3 4 1"]}, "2387": {"inputs": ["6\n1\n10\n19\n9876\n12345\n1000000000\n"], "outputs": ["1\n11\n21\n10973\n13716\n1111111111"]}, "2388": {"inputs": ["2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n6 8\n2 5\n5 4\n4 3\n4 1\n1 3\n2 3\n2 6\n5 6\n"], "outputs": ["2\n1 3\n3\n4 3 6\n"]}, "2389": {"inputs": ["3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n"], "outputs": ["1\n0\n3\n"]}, "2390": {"inputs": ["3\n8\n1 4 8 4 5 6 3 8\n16\n2 1 3 3 4 3 4 4 1 3 2 2 2 4 1 1\n9\n2 2 4 4 4 7 7 7 7\n"], "outputs": ["3\n10\n9\n"]}, "2391": {"inputs": ["5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n8\n8 4 5 2 3 6 7 3\n7\n5 2 1 6 4 7 3\n6\n1 2 3 3 6 4\n"], "outputs": ["0\n"]}, "2392": {"inputs": ["7\n1 1\n10 1\n100 3\n1024 14\n998244353 1337\n123 144\n1234312817382646 13\n"], "outputs": ["1\n45\n153\n294\n3359835\n0\n427262129093995"]}, "2393": {"inputs": ["5\n4\n0010\n0011\n0000\n0000\n2\n10\n01\n2\n00\n00\n4\n0101\n1111\n0101\n0111\n4\n0100\n1110\n0101\n0111\n"], "outputs": ["YES\nNO\nYES\nYES\nNO\n"]}, "2394": {"inputs": ["4\n2\n)(\n4\n()()\n8\n())()()(\n10\n)))((((())\n"], "outputs": ["1\n0\n1\n3\n"]}, "2395": {"inputs": ["4\n5\n22222\n5\n21211\n1\n2\n9\n220222021\n"], "outputs": ["11111\n11111\n11000\n10211\n1\n1\n110111011\n110111010"]}, "2396": {"inputs": ["6\n8\nbbdcaaaa\n8\nasdfghjk\n8\nceaaaabb\n8\nbbaaddcc\n1\nz\n2\nac\n"], "outputs": ["0\n7\n4\n5\n1\n1"]}, "2397": {"inputs": ["5\n3 3\n010\n001\n111\n4 3\n000\n111\n100\n011\n1 1\n1\n1 1\n0\n3 2\n00\n01\n10\n"], "outputs": ["100\n010\n0\n1\n11\n"]}, "2398": {"inputs": ["6\n4\n1 2 3 4\n2 3 1 4\n5\n5 3 5 1 4\n1 2 3 2 4\n3\n1 2 1\n3 3 2\n4\n1 2 2 1\n3 4 3 4\n4\n4 3 1 4\n3 2 2 1\n3\n1 1 2\n3 2 2\n"], "outputs": ["0\n"]}, "2399": {"inputs": ["4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n"], "outputs": ["YES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n"]}, "2400": {"inputs": ["4\n5\n1 2 1 2 2\n6\n1 2 2 1 2 2\n5\n1 2 1 2 3\n3\n10 10 10\n"], "outputs": ["2\n1 2 1 2 2\n2\n2 1 2 1 2 1\n3\n2 3 2 3 1\n1\n1 1 1"]}, "2401": {"inputs": [" pattern = \"abba\", str = \"dog cat cat dog\"\n", "pattern = \"abba\", str = \"dog cat cat fish\"\n", " pattern = \"aaaa\", str = \"dog cat cat dog\"\n", " pattern = \"abba\", str = \"dog dog dog dog\"\n"], "outputs": [" true\n", " false\n", " false\n", " false\n"]}, "2402": {"inputs": [" \"let's take leetcode contest\"\n"], "outputs": [" \"s'tel ekat edocteel tsetnoc\"\n"]}, "2403": {"inputs": [" 28\n"], "outputs": [" true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n"]}, "2404": {"inputs": [" arr = [2,3,4,7,11], k = 5\n", " arr = [1,2,3,4], k = 2\n"], "outputs": [" 9\nExplanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th\u00a0missing positive integer is 9.\n", " 6\nExplanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.\n"]}, "2405": {"inputs": [" commands = [4,-1,3], obstacles = []\n", " commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n"], "outputs": [" 25\nExplanation: robot will go to (3, 4)\n", " 65\nExplanation: robot will be stuck at (1, 4) before turning left and going to (1, 8)\n"]}, "2406": {"inputs": [" arr = [0,1,0]\n", " arr = [0,2,1,0]\n", " arr = [0,10,5,2]\n", " arr = [3,4,5,1]\n", " arr = [24,69,100,99,79,78,67,36,26,19]\n"], "outputs": [" 1\n", " 1\nExample 3:\n", " 1\n", " 2\n", " 2\n"]}, "2407": {"inputs": [" n = 234\n", " n = 4421\n"], "outputs": [" 15 \nExplanation: \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15\n", " 21\nExplanation: \nProduct of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21\n"]}, "2408": null, "2409": {"inputs": [" num = 9669\n", " num = 9996\n", " num = 9999\n"], "outputs": [" 9969\nExplanation: \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\u00a0\nThe maximum number is 9969.\n", " 9999\nExplanation: Changing the last digit 6 to 9 results in the maximum number.\nExample 3:\n", " 9999\nExplanation: It is better not to apply any change.\n"]}, "2410": {"inputs": [" name = \"alex\", typed = \"aaleex\"\n", " name = \"saeed\", typed = \"ssaaedd\"\n", " name = \"leelee\", typed = \"lleeelee\"\n", " name = \"laiden\", typed = \"laiden\"\n"], "outputs": [" true\nExplanation: 'a' and 'e' in 'alex' were long pressed.\n", " false\nExplanation: 'e' must have been pressed twice, but it wasn't in the typed output.\n", " true\n", " true\nExplanation: It's not necessary to long press any character.\n"]}, "2411": {"inputs": [" [3, 2, 1]\n", " [1, 2]\n", " [2, 2, 3, 1]\n"], "outputs": [" 1\n", " 2\n", " 1\n"]}, "2412": {"inputs": [" \"abbaca\"\n"], "outputs": [" \"ca\"\nExplanation: \nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.\u00a0 The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n"]}, "2413": {"inputs": [" 2\n"], "outputs": [" 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\n"]}, "2414": {"inputs": [" arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\n", " arr = [1,1,2,2,3], a = 0, b = 0, c = 1\n"], "outputs": [" 4\nExplanation:\u00a0There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].\n", " 0\nExplanation: No triplet satisfies all conditions.\n"]}, "2415": {"inputs": [" [1,3,5,6], 5\n", " [1,3,5,6], 2\n", " [1,3,5,6], 7\n", " [1,3,5,6], 0\n"], "outputs": [" 2\n", " 1\n", " 4\n", " 0"]}, "2416": null, "2417": {"inputs": [" 100\n", " -7\n"], "outputs": [" \"202\"\n", " \"-10\"\n"]}, "2418": {"inputs": [" [1,2,3,1]\n", " [1,2,3,4]\n", " [1,1,1,3,3,4,3,2,4,2]\n"], "outputs": [" true\n", " false\n", " true"]}, "2419": null, "2420": {"inputs": [" s = \"anagram\", t = \"nagaram\"\n", " s = \"rat\", t = \"car\"\n"], "outputs": [" true\n", " false\n"]}, "2421": {"inputs": [" [3,2,3]\n", " [2,2,1,1,1,2,2]\n"], "outputs": [" 3\n", " 2"]}, "2422": {"inputs": [" nums = [3,4,5,2]\n", " nums = [1,5,4,5]\n", " nums = [3,7]\n"], "outputs": [" 12 \nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n", " 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n", " 12\n"]}, "2423": {"inputs": [" nums = [-3,2,-3,4,2]\n", " nums = [1,2]\n", " nums = [1,-2,-3]\n"], "outputs": [" 5\nExplanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\n                step by step sum\n\u00a0               startValue = 4 | startValue = 5 | nums\n\u00a0                 (4 -3 ) = 1  | (5 -3 ) = 2    |  -3\n\u00a0                 (1 +2 ) = 3  | (2 +2 ) = 4    |   2\n\u00a0                 (3 -3 ) = 0  | (4 -3 ) = 1    |  -3\n\u00a0                 (0 +4 ) = 4  | (1 +4 ) = 5    |   4\n\u00a0                 (4 +2 ) = 6  | (5 +2 ) = 7    |   2\n", " 1\nExplanation: Minimum start value should be positive. \n", " 5\n"]}, "2424": null, "2425": {"inputs": [" \"hello, my name is john\"\n"], "outputs": [" 5"]}, "2426": {"inputs": [" a = [1], k = 0\n", " a = [0,10], k = 2\n", " a = [1,3,6], k = 3\n"], "outputs": [" 0\nExplanation: B = [1]\n", " 6\nExplanation: B = [2,8]\n", " 0\nExplanation: B = [3,3,3] or B = [4,4,4]\n"]}, "2427": {"inputs": [" [1,1,0,1,1,1]\n"], "outputs": [" 3\nExplanation: The first two digits or the last three digits are consecutive 1s.\n    The maximum number of consecutive 1s is 3.\n"]}, "2428": {"inputs": [" [2,2,1]\n", " [4,1,2,1,2]\n"], "outputs": [" 1\n", " 4"]}, "2429": {"inputs": [" [[1,1],[2,3],[3,2]]\n", " [[1,1],[2,2],[3,3]]\n"], "outputs": [" true\n", " false\n"]}, "2430": {"inputs": [" 5\n", " 7\n", " 11\n", " 10\n"], "outputs": [" true\nExplanation:\nThe binary representation of 5 is: 101\n", " false\nExplanation:\nThe binary representation of 7 is: 111.\n", " false\nExplanation:\nThe binary representation of 11 is: 1011.\n", " true\nExplanation:\nThe binary representation of 10 is: 1010."]}, "2431": {"inputs": [" [3, 1, 4, 1, 5], k = 2\n", "[1, 2, 3, 4, 5], k = 1\n", " [1, 3, 1, 5, 4], k = 0\n"], "outputs": [" 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).Although we have two 1s in the input, we should only return the number of unique pairs.\n", " 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n", " 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\n"]}, "2432": {"inputs": [" [\"5\",\"2\",\"c\",\"d\",\"+\"]\n", " [\"5\",\"-2\",\"4\",\"c\",\"d\",\"9\",\"+\",\"+\"]\n"], "outputs": [" 30\nExplanation: \nRound 1: You could get 5 points. The sum is: 5.\nRound 2: You could get 2 points. The sum is: 7.\nOperation 1: The round 2's data was invalid. The sum is: 5.  \nRound 3: You could get 10 points (the round 2's data has been removed). The sum is: 15.\nRound 4: You could get 5 + 10 = 15 points. The sum is: 30.\n", " 27\nExplanation: \nRound 1: You could get 5 points. The sum is: 5.\nRound 2: You could get -2 points. The sum is: 3.\nRound 3: You could get 4 points. The sum is: 7.\nOperation 1: The round 3's data is invalid. The sum is: 3.  \nRound 4: You could get -4 points (the round 3's data has been removed). The sum is: -1.\nRound 5: You could get 9 points. The sum is: 8.\nRound 6: You could get -4 + 9 = 5 points. The sum is 13.\nRound 7: You could get 9 + 5 = 14 points. The sum is 27.\n"]}, "2433": {"inputs": [" s = \"5f3z-2e-9-w\", k = 4\n", " s = \"2-5g-3-j\", k = 2\n"], "outputs": [" \"5f3z-2e9w\"\n", " \"2-5g-3j\"\n"]}, "2434": {"inputs": ["bits = [1, 0, 0]\n", "bits = [1, 1, 1, 0]\n"], "outputs": [" true\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n", " false\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n"]}, "2435": {"inputs": [" n = 4\n", " n = 2\n", " n = 7\n"], "outputs": [" \"pppz\"\nExplanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".\n", " \"xy\"\nExplanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\".\n", " \"holasss\"\n"]}, "2436": {"inputs": [" \"a man, a plan, a canal: panama\"\n", " \"race a car\"\n"], "outputs": [" true\n", " false"]}, "2437": {"inputs": [" arr = [1,2,4,4,4,4], m = 1, k = 3\n", " arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\n", " arr = [1,2,1,2,1,3], m = 2, k = 3\n", " arr = [1,2,3,1,2], m = 2, k = 2\n", " arr = [2,2,2,2], m = 2, k = 3\n"], "outputs": [" true\nExplanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.\n", " true\nExplanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.\n", " false\nExplanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.\n", " false\nExplanation: Notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count.\n", " false\nExplanation: The only pattern of length 2 is (2,2) however it's repeated only twice. Notice that we do not count overlapping repetitions.\n"]}, "2438": {"inputs": [" \"hello world\"\n"], "outputs": [" 5"]}, "2439": {"inputs": [" haystack = \"hello\", needle = \"ll\"\n", " haystack = \"aaaaa\", needle = \"bba\"\n"], "outputs": [" 2\n", " -1\n"]}, "2440": {"inputs": [" 2\n", " 3\n"], "outputs": [" 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n", " 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"]}, "2441": {"inputs": [" s = \"leeeetcode\"\n", " s = \"abbacc\"\n", " s = \"s\"\n"], "outputs": [" \"leetcode\"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".\n", " \"\"\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"\n", " \"s\"\n"]}, "2442": {"inputs": [" s = \"aaaabbbbcccc\"\n", " s = \"rat\"\n", " s = \"leetcode\"\n", " s = \"ggggggg\"\n", " s = \"spo\"\n"], "outputs": [" \"abccbaabccba\"\nExplanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"\n", " \"art\"\nExplanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.\n", " \"cdelotee\"\n", " \"ggggggg\"\n", " \"ops\"\n"]}, "2443": {"inputs": [" text = \"nlaebolko\"\n", " text = \"loonbalxballpoon\"\n", " text = \"leetcode\"\n"], "outputs": [" 1\n", " 2\n", " 0\n"]}, "2444": {"inputs": [" n = 22\n", " n = 5\n", " n = 6\n", " n = 8\n", " n = 1\n"], "outputs": [" 2\nExplanation: 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.\n", " 2\nExplanation: 5 in binary is \"101\".\n", " 1\nExplanation: 6 in binary is \"110\".\n", " 0\nExplanation: 8 in binary is \"1000\".\nThere aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n", " 0\n"]}, "2445": {"inputs": [" \"usa\"\n", " \"flag\"\n"], "outputs": [" true\n", " false\n"]}, "2446": {"inputs": [" [1,3,2,2,5,2,3,7]\n"], "outputs": [" 5\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].\n"]}, "2447": null, "2448": {"inputs": ["\"abccccdd\"\n"], "outputs": ["7\n"]}, "2449": {"inputs": [" s = \"ababa\"\n", " s = \"abb\"\n", " s = \"baabb\"\n", " s = \"\"\n"], "outputs": [" 1\nExplanation: String is already palindrome\n", " 2\nExplanation: \"abb\" -> \"bb\" -> \"\". \nRemove palindromic subsequence \"a\" then \"bb\".\n", " 2\nExplanation: \"baabb\" -> \"b\" -> \"\". \nRemove palindromic subsequence \"baab\" then \"b\".\n", " 0\n"]}, "2450": {"inputs": [" salary = [4000,3000,1000,2000]\n", " salary = [1000,2000,3000]\n", " salary = [6000,5000,4000,3000,2000,1000]\n", " salary = [8000,9000,2000,3000,6000,1000]\n"], "outputs": [" 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000)/2= 2500\n", " 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000)/1= 2000\n", " 3500.00000\n", " 4750.00000\n"]}, "2451": null, "2452": {"inputs": [" [2,7,4,1,8,1]\n"], "outputs": [" 1\nExplanation: \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.\n"]}, "2453": {"inputs": [" 19\n"], "outputs": [" true\nExplanation: \n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1"]}, "2454": {"inputs": [" 1\n", " 28\n", " 701\n"], "outputs": [" \"a\"\n", " \"ab\"\n", " \"zy\""]}, "2455": {"inputs": [" starttime = [1,2,3], endtime = [3,2,7], querytime = 4\n", " starttime = [4], endtime = [4], querytime = 4\n", " starttime = [4], endtime = [4], querytime = 5\n", " starttime = [1,1,1,1], endtime = [1,3,2,4], querytime = 7\n", " starttime = [9,8,7,6,5,4,3,2,1], endtime = [10,10,10,10,10,10,10,10,10], querytime = 5\n"], "outputs": [" 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.\n", " 1\nExplanation: The only student was doing their homework at the queryTime.\n", " 0\n", " 0\n", " 5\n"]}, "2456": {"inputs": [" s = \"ab#c\", t = \"ad#c\"\n", " s = \"ab##\", t = \"c#d#\"\n", " s = \"a##c\", t = \"#a#c\"\n", " s = \"a#c\", t = \"b\"\n"], "outputs": [" true\nExplanation: Both S and T become \"ac\".\n", " true\nExplanation: Both S and T become \"\".\n", " true\nExplanation: Both S and T become \"c\".\n", " false\nExplanation: S becomes \"c\" while T becomes \"b\".\n"]}, "2457": {"inputs": ["nums = [1, 7, 3, 6, 5, 6]\n", "nums = [1, 2, 3]\n"], "outputs": [" 3\nExplanation: \nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\nAlso, 3 is the first index where this occurs.\n", " -1\nExplanation: \nThere is no index that satisfies the conditions in the problem statement.\n"]}, "2458": {"inputs": [" s = \"rlrrllrlrl\"\n", " s = \"rllllrrrlr\"\n", " s = \"llllrrrr\"\n", " s = \"rlrrrllrll\"\n"], "outputs": [" 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.\n", " 3\nExplanation: s can be split into \"RL\", \"LLLRRR\", \"LR\", each substring contains same number of 'L' and 'R'.\n", " 1\nExplanation: s can be split into \"LLLLRRRR\".\n", " 2\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", since each substring contains an equal number of 'L' and 'R'\n"]}, "2459": {"inputs": ["26\n", "-1\n"], "outputs": ["\"1a\"\n", "\"ffffffff\""]}, "2460": {"inputs": [" [-2,1,-3,4,-1,2,1,-5,4],\n"], "outputs": [" 6\nExplanation:\u00a0[4,-1,2,1] has the largest sum = 6.\n"]}, "2461": {"inputs": [" 1\n", " 16\n", " 218\n"], "outputs": [" true \nExplanation: 20\u00a0= 1\n", " true\nExplanation: 24\u00a0= 16\n", " false"]}, "2462": {"inputs": [" \"a\"\n", " \"ab\"\n", " \"zy\"\n"], "outputs": [" 1\n", " 28\n", " 701"]}, "2463": {"inputs": [" [2,1]\n", " [3,5,5]\n", " [0,3,2,1]\n"], "outputs": [" false\n", " false\n", " true\n"]}, "2464": {"inputs": [" 10\n"], "outputs": [" 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7."]}, "2465": {"inputs": [" 2\n", " 3\n"], "outputs": [" true\nExplanation: Alice chooses 1, and Bob has no more moves.\n", " false\nExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n"]}, "2466": {"inputs": [" mat = [[1,2,3],\n\u00a0             [4,5,6],\n\u00a0             [7,8,9]]\n", " mat = [[1,1,1,1],\n\u00a0             [1,1,1,1],\n\u00a0             [1,1,1,1],\n\u00a0             [1,1,1,1]]\n", " mat = [[5]]\n"], "outputs": [" 25\nExplanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once.\n", " 8\n", " 5\n"]}, "2467": {"inputs": [" nums = [3,5]\n", " nums = [0,0]\n", " nums = [0,4,3,0,4]\n", " nums = [3,6,7,7,0]\n"], "outputs": [" 2\nExplanation: There are 2 values (3 and 5) that are greater than or equal to 2.\n", " -1\nExplanation: No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.\n", " 3\nExplanation: There are 3 values that are greater than or equal to 3.\n", " -1\n"]}, "2468": {"inputs": [" moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\n", " moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\n", " moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\n", " moves = [[0,0],[1,1]]\n"], "outputs": [" \"a\"\nExplanation: \"A\" wins, he always plays first.\n\"X  \"    \"X  \"    \"X  \"    \"X  \"    \"X  \"\n\"   \" -> \"   \" -> \" X \" -> \" X \" -> \" X \"\n\"   \"    \"O  \"    \"O  \"    \"OO \"    \"OOX\"\n", " \"b\"\nExplanation: \"B\" wins.\n\"X  \"    \"X  \"    \"XX \"    \"XXO\"    \"XXO\"    \"XXO\"\n\"   \" -> \" O \" -> \" O \" -> \" O \" -> \"XO \" -> \"XO \" \n\"   \"    \"   \"    \"   \"    \"   \"    \"   \"    \"O  \"\n", " \"draw\"\nExplanation: The game ends in a draw since there are no moves to make.\n\"XXO\"\n\"OOX\"\n\"XOX\"\n", " \"pending\"\nExplanation: The game has not finished yet.\n\"X  \"\n\" O \"\n\"   \"\n"]}, "2469": {"inputs": [" arr = [10,2,5,3]\n", " arr = [7,1,14,11]\n", " arr = [3,1,7,11]\n"], "outputs": [" true\nExplanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.\n", " true\nExplanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.\n", " false\nExplanation: In this case does not exist N and M, such that N = 2 * M.\n"]}, "2470": {"inputs": [" dominoes = [[1,2],[2,1],[3,4],[5,6]]\n"], "outputs": [" 1\n"]}, "2471": {"inputs": [" nums = [1,2,3,1]\n", " nums = [2,7,9,3,1]\n"], "outputs": [" 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n\u00a0            Total amount you can rob = 1 + 3 = 4.\n", " 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n\u00a0            Total amount you can rob = 2 + 9 + 1 = 12.\n"]}, "2472": {"inputs": [" \"ppallp\"\n", " \"ppalll\"\n"], "outputs": [" true\n", " false"]}, "2473": {"inputs": [" s = \"?zs\"\n", " s = \"ubv?w\"\n", " s = \"j?qg??b\"\n", " s = \"??yw?ipkj?\"\n"], "outputs": [" \"azs\"\nExplanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\".\n", " \"ubvaw\"\nExplanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".\n", " \"jaqgacb\"\n", " \"acywaipkja\"\n"]}, "2474": {"inputs": [" 4\n", " 8\n"], "outputs": [" 2\n", " 2\nExplanation: The square root of 8 is 2.82842..., and since \nthe decimal part is truncated, 2 is returned."]}, "2475": {"inputs": [" a = [\"cba\",\"daf\",\"ghi\"]\n", " a = [\"a\",\"b\"]\n", " a = [\"zyx\",\"wvu\",\"tsr\"]\n"], "outputs": [" 1\nExplanation: \nAfter choosing D = {1}, each column [\"c\",\"d\",\"g\"] and [\"a\",\"f\",\"i\"] are in non-decreasing sorted order.\nIf we chose D = {}, then a column [\"b\",\"a\",\"h\"] would not be in non-decreasing sorted order.\n", " 0\nExplanation: D = {}\n", " 3\nExplanation: D = {0, 1, 2}\n"]}, "2476": {"inputs": [" 38\n"], "outputs": [" 2 \nExplanation: The process is like: 3 + 8 = 11, 1 + 1 = 2. \n\u00a0            Since 2 has only one digit, return it.\n"]}, "2477": {"inputs": [" [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\n", " [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\n"], "outputs": [" 3\nExplanation: \nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings are all pairwise special equivalent to these.\n", " 3\n"]}, "2478": {"inputs": ["s = \"abcd\"\nt = \"abcde\"\n"], "outputs": ["e\n"]}, "2479": {"inputs": [" \"ud\"\n", " \"ll\"\n"], "outputs": [" true\n", " false"]}, "2480": {"inputs": [" position = [1,2,3]\n", " position = [2,2,2,3,3]\n", " position = [1,1000000000]\n"], "outputs": [" 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n", " 2\nExplanation: We can move the two chips at poistion 3 to position 2. Each move has cost = 1. The total cost = 2.\n", " 1\n"]}, "2481": {"inputs": [" [1,4,3,2]\n"], "outputs": [" 4\nExplanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\n"]}, "2482": {"inputs": [" flowerbed = [1,0,0,0,1], n = 1\n", " flowerbed = [1,0,0,0,1], n = 2\n"], "outputs": [" true\n", " false\n"]}, "2483": {"inputs": [" arr = [1,2,2,1,1,3]\n", " arr = [1,2]\n", " arr = [-3,0,1,-3,1,1,1,-3,10,0]\n"], "outputs": [" true\nExplanation:\u00a0The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n", " false\n", " true\n"]}, "2484": {"inputs": [" str1 = \"abcabc\", str2 = \"abc\"\n", " str1 = \"ababab\", str2 = \"abab\"\n", " str1 = \"leet\", str2 = \"code\"\n", " str1 = \"abcdef\", str2 = \"abc\"\n"], "outputs": [" \"abc\"\n", " \"ab\"\nExample 3:\n", " \"\"\n", " \"\"\n"]}, "2485": {"inputs": [" low = 3, high = 7\n", " low = 8, high = 10\n"], "outputs": [" 3\nExplanation: The odd numbers between 3 and 7 are [3,5,7].\n", " 1\nExplanation: The odd numbers between 8 and 10 are [9].\n"]}, "2486": {"inputs": [" num = 14\n", " num = 8\n", " num = 123\n"], "outputs": [" 6\nExplanation:\u00a0\nStep 1) 14 is even; divide by 2 and obtain 7.\u00a0\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\u00a0\nStep 4) 3 is odd; subtract 1 and obtain 2.\u00a0\nStep 5) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 6) 1 is odd; subtract 1 and obtain 0.\n", " 4\nExplanation:\u00a0\nStep 1) 8 is even; divide by 2 and obtain 4.\u00a0\nStep 2) 4 is even; divide by 2 and obtain 2.\u00a0\nStep 3) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 4) 1 is odd; subtract 1 and obtain 0.\n", " 12\n"]}, "2487": {"inputs": [" \"abab\"\n", " \"aba\"\n", " \"abcabcabcabc\"\n"], "outputs": [" true\n", " false\n", " true\n"]}, "2488": {"inputs": [" nums = [12,345,2,6,7896]\n", " nums = [555,901,482,1771]\n"], "outputs": [" 2\nExplanation: \n12 contains 2 digits (even number of digits).\u00a0\n345 contains 3 digits (odd number of digits).\u00a0\n2 contains 1 digit (odd number of digits).\u00a0\n6 contains 1 digit (odd number of digits).\u00a0\n7896 contains 4 digits (even number of digits).\u00a0\nTherefore only 12 and 7896 contain an even number of digits.\n", " 1 \nExplanation: \nOnly 1771 contains an even number of digits.\n"]}, "2489": {"inputs": [" [7,1,5,3,6,4]\n", " [7,6,4,3,1]\n"], "outputs": [" 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n\u00a0            Not 7-1 = 6, as selling price needs to be larger than buying price.\n", " 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0."]}, "2490": {"inputs": [" n = 5, start = 0\n", " n = 4, start = 3\n", " n = 1, start = 7\n", " n = 10, start = 5\n"], "outputs": [" 8\nExplanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator.\n", " 8\nExplanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.\nExample 3:\n", " 7\n", " 2\n"]}, "2491": {"inputs": [" a = \"ab\", b = \"ba\"\n", " a = \"ab\", b = \"ab\"\n", " a = \"aa\", b = \"aa\"\n", " a = \"aaaaaaabc\", b = \"aaaaaaacb\"\n", " a = \"\", b = \"aa\"\n"], "outputs": [" true\nExplanation: You can swap A[0] = 'a' and A[1] = 'b' to get \"ba\", which is equal to B.\n", " false\nExplanation: The only letters you can swap are A[0] = 'a' and A[1] = 'b', which results in \"ba\" != B.\n", " true\nExplanation: You can swap A[0] = 'a' and A[1] = 'a' to get \"aa\", which is equal to B.\n", " true\n", " false\n"]}, "2492": {"inputs": [" logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\n", " logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\n", " logs = [\"d1/\",\"../\",\"../\",\"../\"]\n"], "outputs": [" 2\nExplanation: Use this change folder operation \"../\" 2 times and go back to the main folder.\n", " 3\n", " 0\n"]}, "2493": {"inputs": [" [1,2,3]\n", " [1,2,3,4]\n"], "outputs": [" 6\n", " 24\n"]}, "2494": {"inputs": [" address = \"1.1.1.1\"\n", " address = \"255.100.50.0\"\n"], "outputs": [" \"1[.]1[.]1[.]1\"\n", " \"255[.]100[.]50[.]0\"\n"]}, "2495": {"inputs": [" target = [1,2,3,4], arr = [2,4,1,3]\n", " target = [7], arr = [7]\n", " target = [1,12], arr = [12,1]\n", " target = [3,7,9], arr = [3,7,11]\n", " target = [1,1,1,1,1], arr = [1,1,1,1,1]\n"], "outputs": [" true\nExplanation: You can follow the next steps to convert arr to target:\n1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]\n2- Reverse sub-array [4,2], arr becomes [1,2,4,3]\n3- Reverse sub-array [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so.\n", " true\nExplanation: arr is equal to target without any reverses.\n", " true\n", " false\nExplanation: arr doesn't have value 9 and it can never be converted to target.\n", " true\n"]}, "2496": {"inputs": [" day = 31, month = 8, year = 2019\n", " day = 18, month = 7, year = 1999\n", " day = 15, month = 8, year = 1993\n"], "outputs": [" \"saturday\"\n", " \"sunday\"\n", " \"sunday\"\n"]}, "2497": {"inputs": [" arr = [2,6,4,1]\n", " arr = [1,2,34,3,4,5,7,23,12]\n"], "outputs": [" false\nExplanation: There are no three consecutive odds.\n", " true\nExplanation: [5,7,23] are three consecutive odds.\n"]}, "2498": {"inputs": [" words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\n", " words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\n", " words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\n"], "outputs": [" true\nExplanation: As 'h' comes before 'l' in this language, then the sequence is sorted.\n", " false\nExplanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.\n", " false\nExplanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character (More info).\n"]}, "2499": {"inputs": [" deck = [1,2,3,4,4,3,2,1]\n", " deck = [1,1,1,2,2,2,3,3]\n", " deck = [1]\n", " deck = [1,1]\n", " deck = [1,1,2,2,2,2]\n"], "outputs": [" true\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].\n", " false\u00b4\nExplanation: No possible partition.\n", " false\nExplanation: No possible partition.\n", " true\nExplanation: Possible partition [1,1].\n", " true\nExplanation: Possible partition [1,1],[2,2],[2,2].\n"]}, "2500": {"inputs": [" s = \"leetcode\"\n", " s = \"abbcccddddeeeeedcba\"\n", " s = \"triplepillooooow\"\n", " s = \"hooraaaaaaaaaaay\"\n", " s = \"tourist\"\n"], "outputs": [" 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.\n", " 5\nExplanation: The substring \"eeeee\" is of length 5 with the character 'e' only.\n", " 5\n", " 11\n", " 1\n"]}, "2501": {"inputs": [" s = \"abcdefg\", k = 2\n"], "outputs": [" \"bacdfeg\"\n"]}, "2502": {"inputs": [" [7,1,5,3,6,4]\n", " [1,2,3,4,5]\n", " [7,6,4,3,1]\n"], "outputs": [" 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n\u00a0            Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n", " 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n\u00a0            Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n\u00a0            engaging multiple transactions at the same time. You must sell before buying again.\n", " 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0."]}, "2503": {"inputs": [" \"aba\", \"cdc\"\n"], "outputs": [" 3\nExplanation: The longest uncommon subsequence is \"aba\" (or \"cdc\"), because \"aba\" is a subsequence of \"aba\", but not a subsequence of any other strings in the group of two strings. \n"]}, "2504": {"inputs": [" arr = [1,4,2,5,3]\n", " arr = [1,2]\n", " arr = [10,11,12]\n"], "outputs": [" 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\n", " 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\n", " 66\n"]}, "2505": {"inputs": [" rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n", " rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n", " rec1 = [0,0,1,1], rec2 = [2,2,3,3]\n"], "outputs": [" true\n", " false\nExample 3:\n", " false\n"]}, "2506": {"inputs": [" s = \"egg\", t = \"add\"\n", " s = \"foo\", t = \"bar\"\n", " s = \"paper\", t = \"title\"\n"], "outputs": [" true\n", " false\n", " true\n"]}, "2507": {"inputs": [" words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\n", " words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\n"], "outputs": [" 6\nExplanation: \nThe strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.\n", " 10\nExplanation: \nThe strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.\n"]}, "2508": {"inputs": [" heights = [1,1,4,2,1,3]\n", " heights = [5,1,2,3,4]\n", " heights = [1,2,3,4,5]\n"], "outputs": [" 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 (0-based) we have 4 vs 1 so we have to move this student.\nOn index 4 (0-based) we have 1 vs 3 so we have to move this student.\nOn index 5 (0-based) we have 3 vs 4 so we have to move this student.\n", " 5\n", " 0\n"]}, "2509": {"inputs": ["[1,2,3]\n"], "outputs": ["3\n"]}, "2510": {"inputs": [" 4\n"], "outputs": [" false \nExplanation: If there are 4 stones in the heap, then you will never win the game;\n\u00a0            No matter 1, 2, or 3 stones you remove, the last stone will always be \nremoved by your friend."]}, "2511": {"inputs": [" [1,2,3,3]\n", " [2,1,2,5,3,2]\n", " [5,1,5,2,5,3,5,4]\n"], "outputs": [" 3\n", " 2\n", " 5\n"]}, "2512": {"inputs": [" [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\n"], "outputs": [" 2\nExplanation:\u00a0\"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails\n"]}, "2513": {"inputs": ["3\n", "11\n"], "outputs": ["3\n", "0\n"]}, "2514": {"inputs": [" arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\n", " arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\n", " arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\n"], "outputs": [" 2\nExplanation: \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n|8-10|=2 <= d=2\n|8-9|=1 <= d=2\n|8-1|=7 > d=2\n|8-8|=0 <= d=2\n", " 2\n", " 1\n"]}, "2515": {"inputs": [" \"i speak goat latin\"\n", " \"the quick brown fox jumped over the lazy dog\"\n"], "outputs": [" \"imaa peaksmaaa oatgmaaaa atinlmaaaaa\"\n", " \"hetmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n"]}, "2516": {"inputs": [" nums = [1,2,3,1], k = 3\n", " nums = [1,0,1,1], k = 1\n", " nums = [1,2,3,1,2,3], k = 2\n"], "outputs": [" true\n", " true\n", " false"]}, "2517": {"inputs": [" n = 4\n", " n = 25\n"], "outputs": [" 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n", " 1389537\n"]}, "2518": {"inputs": [" [4,2,3]\n", " [4,2,1]\n"], "outputs": [" true\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\n", " false\nExplanation: You can't get a non-decreasing array by modify at most one element.\n"]}, "2519": {"inputs": [" sentence = \"i love eating burger\", searchword = \"burg\"\n", " sentence = \"this problem is an easy problem\", searchword = \"pro\"\n", " sentence = \"i am tired\", searchword = \"you\"\n", " sentence = \"i use triple pillow\", searchword = \"pill\"\n", " sentence = \"hello from the other side\", searchword = \"they\"\n"], "outputs": [" 4\nExplanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.\n", " 2\nExplanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.\n", " -1\nExplanation: \"you\" is not a prefix of any word in the sentence.\n", " 4\n", " -1\n"]}, "2520": {"inputs": [" 123\n", " -123\n", " 120\n"], "outputs": [" 321\n", " -321\n", " 21\n"]}, "2521": {"inputs": [" s = \"a0b1c2\"\n", " s = \"leetcode\"\n", " s = \"1229857369\"\n", " s = \"covid2019\"\n", " s = \"ab123\"\n"], "outputs": [" \"0a1b2c\"\nExplanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations.\n", " \"\"\nExplanation: \"leetcode\" has only characters so we cannot separate them by digits.\n", " \"\"\nExplanation: \"1229857369\" has only digits so we cannot separate them by characters.\n", " \"c2o0v1i9d\"\n", " \"1a2b3\"\n"]}, "2522": {"inputs": [" 1\n", " 4\n"], "outputs": [" \"1\"\n", " \"1211\""]}, "2523": {"inputs": [" [1, 2, 2, 3, 1]\n", " [1,2,2,3,1,4,2]\n"], "outputs": [" 2\nExplanation: \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.\n", " 6\n"]}, "2524": {"inputs": [" [1,3,5,4,7]\n", " [2,2,2,2,2]\n"], "outputs": [" 3\nExplanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. \nEven though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. \n", " 1\nExplanation: The longest continuous increasing subsequence is [2], its length is 1. \n"]}, "2525": {"inputs": [" x = 1, y = 4\n"], "outputs": [" 2\n"]}, "2526": {"inputs": [" 3\n", " 5\n"], "outputs": [" 0\nExplanation:\u00a03! = 6, no trailing zero.\n", " 1\nExplanation:\u00a05! = 120, one trailing zero.\n"]}, "2527": null, "2528": {"inputs": [" [\"flower\",\"flow\",\"flight\"]\n", " [\"dog\",\"racecar\",\"car\"]\n"], "outputs": [" \"fl\"\n", " \"\"\nExplanation: There is no common prefix among the input strings.\n"]}, "2529": {"inputs": [" mat = [[1,0,0],\n\u00a0             [0,0,1],\n\u00a0             [1,0,0]]\n", " mat = [[1,0,0],\n\u00a0             [0,1,0],\n\u00a0             [0,0,1]]\n", " mat = [[0,0,0,1],\n\u00a0             [1,0,0,0],\n\u00a0             [0,1,1,0],\n\u00a0             [0,0,0,0]]\n", " mat = [[0,0,0,0,0],\n\u00a0             [1,0,0,0,0],\n\u00a0             [0,1,0,0,0],\n\u00a0             [0,0,1,0,0],\n\u00a0             [0,0,0,1,1]]\n"], "outputs": [" 1\nExplanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.\n", " 3\nExplanation: (0,0), (1,1) and (2,2) are special positions. \n", " 2\n", " 3\n"]}, "2530": {"inputs": [" [30,20,150,100,40]\n", " [60,60,60]\n"], "outputs": [" 3\nExplanation: Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60\n", " 3\nExplanation: All three pairs have a total duration of 120, which is divisible by 60.\n"]}, "2531": {"inputs": [" [2, 6, 4, 8, 10, 9, 15]\n"], "outputs": [" 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n"]}, "2532": {"inputs": [" n = 987\n", " n = 1234\n", " n = 123456789\n", " n = 0\n"], "outputs": [" \"987\"\n", " \"1.234\"\n", " \"123.456.789\"\n", " \"0\"\n"]}, "2533": null, "2534": {"inputs": [" s = \"011101\"\n", " s = \"00111\"\n", " s = \"1111\"\n"], "outputs": [" 5 \nExplanation: \nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5 \nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4 \nleft = \"011\" and right = \"101\", score = 1 + 2 = 3 \nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2 \nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3\n", " 5\nExplanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5\n", " 3\n"]}, "2535": {"inputs": [" \"aba\"\n", " \"abca\"\n"], "outputs": [" true\n", " true\nExplanation: You could delete the character 'c'.\n"]}, "2536": {"inputs": [" arr = [2,2,3,4]\n", " arr = [1,2,2,3,3,3]\n", " arr = [2,2,2,3,3]\n", " arr = [5]\n", " arr = [7,7,7,7,7,7,7]\n"], "outputs": [" 2\nExplanation: The only lucky number in the array is 2 because frequency[2] == 2.\n", " 3\nExplanation: 1, 2 and 3 are all lucky numbers, return the largest of them.\n", " -1\nExplanation: There are no lucky numbers in the array.\n", " -1\n", " 7\n"]}, "2537": {"inputs": [" distance = [1,2,3,4], start = 0, destination = 1\n", " distance = [1,2,3,4], start = 0, destination = 2\n", " distance = [1,2,3,4], start = 0, destination = 3\n"], "outputs": [" 1\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.\n", " 3\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.\n", " 4\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4.\n"]}, "2538": {"inputs": [" n = 13\n", " n = 2\n", " n = 15\n", " n = 24\n"], "outputs": [" 4\nExplanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.\n", " 2\nExplanation: There are 2 groups [1], [2] of size 1.\n", " 6\n", " 5\n"]}, "2539": {"inputs": [" [3,0,1]\n", " [9,6,4,2,3,5,7,0,1]\n"], "outputs": [" 2\n", " 8\n"]}, "2540": {"inputs": [" [2,1,2]\n", " [1,2,1]\n", " [3,2,3,4]\n", " [3,6,2,3]\n"], "outputs": [" 5\n", " 0\n", " 10\n", " 8\n"]}, "2541": null, "2542": {"inputs": [" [1,2,2,3]\n", " [6,5,4,4]\n", " [1,3,2]\n", " [1,2,4,5]\n", " [1,1,1]\n"], "outputs": [" true\n", " true\n", " false\n", " true\n", " true\n"]}, "2543": {"inputs": [" \"ab-cd\"\n", " \"a-bc-def-ghij\"\n", " \"test1ng-leet=code-q!\"\n"], "outputs": [" \"dc-ba\"\n", " \"j-ih-gfe-dcba\"\n", " \"qedo1ct-eelg=ntse-t!\"\n"]}, "2544": {"inputs": [" [[2]]\n", " [[1,2],[3,4]]\n", " [[1,0],[0,2]]\n", " [[1,1,1],[1,0,1],[1,1,1]]\n", " [[2,2,2],[2,1,2],[2,2,2]]\n"], "outputs": [" 5\n", " 17\nExplanation: \nHere are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\n", " 8\n", " 14\n", " 21\n"]}, "2545": {"inputs": [" [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"r\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n", " [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"b\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"b\",\"r\",\"b\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"b\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n", " [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"r\",\".\",\"p\",\"b\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"b\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n"], "outputs": [" 3\nExplanation: \nIn this example the rook is able to capture all the pawns.\n", " 0\nExplanation: \nBishops are blocking the rook to capture any pawn.\n", " 3\nExplanation: \nThe rook can capture the pawns at positions b5, d6 and f5.\n"]}, "2546": {"inputs": [" nums = [1,2,3,1,1,3]\n", " nums = [1,1,1,1]\n", " nums = [1,2,3]\n"], "outputs": [" 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n", " 6\nExplanation: Each pair in the array are good.\n", " 0\n"]}, "2547": {"inputs": [" grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\n", " grid = [[3,2],[1,0]]\n", " grid = [[1,-1],[-1,-1]]\n", " grid = [[-1]]\n"], "outputs": [" 8\nExplanation: There are 8 negatives number in the matrix.\n", " 0\n", " 3\n", " 1\n"]}, "2548": null, "2549": {"inputs": [" text = \"  this   is  a sentence \"\n", " text = \" practice   makes   perfect\"\n", " text = \"hello   world\"\n", " text = \"  walks  udp package   into  bar a\"\n", " text = \"a\"\n"], "outputs": [" \"this   is   a   sentence\"\nExplanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n", " \"practice   makes   perfect \"\nExplanation:\u00a0There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n", " \"hello   world\"\n", " \"walks  udp  package  into  bar  a \"\n", " \"a\"\n"]}, "2550": {"inputs": [" [5,5,5,10,20]\n", " [5,5,10]\n", " [10,10]\n", " [5,5,10,10,20]\n"], "outputs": [" true\nExplanation: \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.\n", " true\n", " false\n", " false\nExplanation: \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can't give change of $15 back because we only have two $10 bills.\nSince not every customer received correct change, the answer is false.\n"]}, "2551": {"inputs": [" \"()\"\n", " \"()[]{}\"\n", " \"(]\"\n", " \"([)]\"\n", " \"{[]}\"\n"], "outputs": [" true\n", " true\n", " false\n", " false\n", " true"]}, "2552": {"inputs": [" arr = [1,2,2,6,6,6,6,7,10]\n"], "outputs": [" 6\n"]}, "2553": {"inputs": [" n = 5\n", " n = 100\n"], "outputs": [" 12\nExplanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.\n", " 682289015\n"]}, "2554": {"inputs": ["words = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\n", "words = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\n"], "outputs": [" \"world\"\nExplanation: \nThe word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\n", " \"apple\"\nExplanation: \nBoth \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\n"]}, "2555": null, "2556": null, "2557": null, "2558": null, "2559": null, "2560": {"inputs": ["First line contains n, the number of rational numbers.\nThe ith of next n lines contain two integers each, the numerator (N_i) and denominator (D_i) of the ith rational number in the list.\n"], "outputs": ["Print only one line containing the numerator and denominator of the product of the numbers in the list in its simplest form, i.e. numerator and denominator have no common divisor other than 1."]}, "2561": null, "2562": null, "2563": null, "2564": null, "2565": null, "2566": null, "2567": null, "2568": null, "2569": null, "2570": null, "2571": null, "2572": null, "2573": null, "2574": null, "2575": null, "2576": null, "2577": null, "2578": null, "2579": null, "2580": null, "2581": null, "2582": null, "2583": null, "2584": null, "2585": null, "2586": null, "2587": null, "2588": null, "2589": null, "2590": null, "2591": null, "2592": null, "2593": null, "2594": null, "2595": null, "2596": null, "2597": null, "2598": null, "2599": null, "2600": null, "2601": {"inputs": ["The first line contains the first integer, a, and the second line contains the second integer, b.\n"], "outputs": ["Print the result as described above."]}, "2602": null, "2603": null, "2604": null, "2605": null, "2606": null, "2607": null, "2608": null, "2609": {"inputs": ["The first line contains a string consisting of space separated words.\n"], "outputs": ["Print the formatted string as explained above."]}, "2610": null, "2611": null, "2612": null, "2613": null, "2614": null, "2615": null, "2616": null, "2617": null, "2618": null, "2619": null, "2620": null, "2621": null, "2622": null, "2623": null, "2624": null, "2625": {"inputs": ["Locked stub code in the editor reads a single string denoting P from stdin and uses provided expression and your regular expressions to validate if P is a valid postal code.\n"], "outputs": ["You are not responsible for printing anything to stdout. Locked stub code in the editor does that."]}, "2626": null, "2627": null, "2628": {"inputs": ["The first line contains integers, n and m separated by a space.\nThe next n lines contains the words belonging to group A.\nThe next m lines contains the words belonging to group B.\n"], "outputs": ["The ith line should contain the 1-indexed positions of the occurrences of the ith word separated by spaces."]}, "2629": {"inputs": ["The first line contains integer N, the number of lines in a HTML code snippet.\nThe next N lines contain HTML code.\n"], "outputs": ["Print the HTML tags, attributes and attribute values in order of their occurrence from top to bottom in the given snippet.\n"]}, "2630": null, "2631": null, "2632": null, "2633": null, "2634": null, "2635": null, "2636": null, "2637": null, "2638": null, "2639": null, "2640": null, "2641": null, "2642": null, "2643": null, "2644": null, "2645": null, "2646": null, "2647": null, "2648": null, "2649": null, "2650": {"inputs": ["3 3\ndxx\naxx\ncxx\n"], "outputs": ["axxcxxdxx\n"]}, "2651": null, "2652": null, "2653": null, "2654": null, "2655": null, "2656": null, "2657": null, "2658": null, "2659": null, "2660": null, "2661": null, "2662": null, "2663": null, "2664": null, "2665": null, "2666": null, "2667": null, "2668": null, "2669": null, "2670": null, "2671": null, "2672": null, "2673": null, "2674": null, "2675": null, "2676": null, "2677": null, "2678": null, "2679": null, "2680": null, "2681": null, "2682": null, "2683": null, "2684": null, "2685": null, "2686": null, "2687": null, "2688": null, "2689": null, "2690": null, "2691": null, "2692": null, "2693": null, "2694": null, "2695": null, "2696": null, "2697": null, "2698": null, "2699": null, "2700": null, "2701": null, "2702": null, "2703": null, "2704": null, "2705": null, "2706": null, "2707": null, "2708": null, "2709": null, "2710": null, "2711": null, "2712": null, "2713": null, "2714": null, "2715": null, "2716": null, "2717": null, "2718": null, "2719": null, "2720": null, "2721": null, "2722": null, "2723": null, "2724": null, "2725": null, "2726": null, "2727": null, "2728": null, "2729": null, "2730": null, "2731": null, "2732": null, "2733": null, "2734": null, "2735": null, "2736": null, "2737": null, "2738": null, "2739": null, "2740": null, "2741": null, "2742": null, "2743": null, "2744": null, "2745": null, "2746": null, "2747": null, "2748": null, "2749": null, "2750": null, "2751": null, "2752": null, "2753": null, "2754": null, "2755": null, "2756": null, "2757": null, "2758": null, "2759": null, "2760": null, "2761": null, "2762": null, "2763": null, "2764": null, "2765": null, "2766": null, "2767": null, "2768": null, "2769": null, "2770": null, "2771": null, "2772": null, "2773": null, "2774": null, "2775": null, "2776": null, "2777": null, "2778": null, "2779": null, "2780": null, "2781": null, "2782": null, "2783": null, "2784": null, "2785": null, "2786": null, "2787": null, "2788": null, "2789": null, "2790": null, "2791": null, "2792": null, "2793": null, "2794": null, "2795": null, "2796": null, "2797": null, "2798": null, "2799": null, "2800": null, "2801": null, "2802": null, "2803": null, "2804": null, "2805": null, "2806": null, "2807": null, "2808": null, "2809": null, "2810": null, "2811": null, "2812": null, "2813": null, "2814": null, "2815": null, "2816": null, "2817": null, "2818": null, "2819": null, "2820": null, "2821": null, "2822": null, "2823": null, "2824": null, "2825": null, "2826": null, "2827": null, "2828": null, "2829": null, "2830": null, "2831": null, "2832": null, "2833": null, "2834": null, "2835": null, "2836": null, "2837": null, "2838": null, "2839": null, "2840": null, "2841": null, "2842": null, "2843": null, "2844": null, "2845": null, "2846": null, "2847": null, "2848": null, "2849": null, "2850": null, "2851": null, "2852": null, "2853": null, "2854": null, "2855": null, "2856": null, "2857": null, "2858": null, "2859": null, "2860": null, "2861": null, "2862": null, "2863": null, "2864": null, "2865": null, "2866": null, "2867": null, "2868": null, "2869": null, "2870": null, "2871": null, "2872": null, "2873": null, "2874": null, "2875": null, "2876": null, "2877": null, "2878": null, "2879": null, "2880": null, "2881": null, "2882": null, "2883": null, "2884": null, "2885": null, "2886": null, "2887": null, "2888": null, "2889": null, "2890": null, "2891": null, "2892": null, "2893": null, "2894": null, "2895": null, "2896": null, "2897": null, "2898": null, "2899": null, "2900": null, "2901": null, "2902": null, "2903": null, "2904": null, "2905": null, "2906": null, "2907": null, "2908": null, "2909": null, "2910": null, "2911": null, "2912": null, "2913": null, "2914": null, "2915": null, "2916": null, "2917": null, "2918": null, "2919": null, "2920": null, "2921": null, "2922": null, "2923": null, "2924": null, "2925": null, "2926": {"inputs": ["  {\"i\", \"like\", \"big\", \"butts\", \"and\", \"i\", \"cannot\", \"lie!\"}\n"], "outputs": [" {\"!\", \"eilt\", \"onn\", \"acidn\", \"ast\", \"t\", \"ubgibe\", \"kili\"}\n```\n"]}, "2927": null, "2928": null, "2929": null, "2930": null, "2931": null, "2932": null, "2933": null, "2934": null, "2935": null, "2936": null, "2937": null, "2938": null, "2939": null, "2940": null, "2941": null, "2942": null, "2943": null, "2944": null, "2945": null, "2946": null, "2947": null, "2948": null, "2949": null, "2950": null, "2951": null, "2952": null, "2953": null, "2954": null, "2955": null, "2956": null, "2957": null, "2958": null, "2959": null, "2960": null, "2961": null, "2962": null, "2963": null, "2964": null, "2965": null, "2966": null, "2967": null, "2968": null, "2969": null, "2970": null, "2971": null, "2972": null, "2973": null, "2974": null, "2975": null, "2976": null, "2977": null, "2978": null, "2979": null, "2980": null, "2981": null, "2982": null, "2983": null, "2984": null, "2985": null, "2986": null, "2987": null, "2988": null, "2989": null, "2990": null, "2991": null, "2992": null, "2993": null, "2994": null, "2995": null, "2996": null, "2997": null, "2998": null, "2999": null, "3000": null, "3001": null, "3002": null, "3003": null, "3004": null, "3005": null, "3006": null, "3007": null, "3008": null, "3009": null, "3010": null, "3011": null, "3012": null, "3013": null, "3014": null, "3015": null, "3016": null, "3017": null, "3018": null, "3019": null, "3020": null, "3021": null, "3022": null, "3023": null, "3024": null, "3025": null, "3026": null, "3027": null, "3028": null, "3029": null, "3030": null, "3031": null, "3032": null, "3033": null, "3034": null, "3035": null, "3036": null, "3037": null, "3038": null, "3039": null, "3040": null, "3041": null, "3042": null, "3043": null, "3044": null, "3045": null, "3046": null, "3047": null, "3048": null, "3049": null, "3050": null, "3051": null, "3052": null, "3053": null, "3054": null, "3055": null, "3056": null, "3057": null, "3058": null, "3059": null, "3060": null, "3061": null, "3062": null, "3063": null, "3064": null, "3065": null, "3066": null, "3067": null, "3068": null, "3069": null, "3070": null, "3071": null, "3072": null, "3073": null, "3074": null, "3075": null, "3076": null, "3077": null, "3078": null, "3079": null, "3080": null, "3081": null, "3082": null, "3083": null, "3084": null, "3085": null, "3086": null, "3087": null, "3088": null, "3089": null, "3090": null, "3091": null, "3092": null, "3093": null, "3094": null, "3095": null, "3096": null, "3097": null, "3098": null, "3099": null, "3100": null, "3101": null, "3102": null, "3103": null, "3104": null, "3105": null, "3106": null, "3107": null, "3108": null, "3109": null, "3110": null, "3111": null, "3112": null, "3113": null, "3114": null, "3115": null, "3116": null, "3117": null, "3118": null, "3119": null, "3120": null, "3121": null, "3122": null, "3123": null, "3124": null, "3125": null, "3126": null, "3127": null, "3128": null, "3129": null, "3130": null, "3131": null, "3132": null, "3133": null, "3134": null, "3135": null, "3136": null, "3137": null, "3138": null, "3139": null, "3140": null, "3141": null, "3142": null, "3143": null, "3144": null, "3145": null, "3146": null, "3147": null, "3148": null, "3149": null, "3150": null, "3151": null, "3152": null, "3153": null, "3154": null, "3155": null, "3156": null, "3157": null, "3158": null, "3159": null, "3160": null, "3161": null, "3162": null, "3163": null, "3164": null, "3165": null, "3166": null, "3167": null, "3168": null, "3169": null, "3170": null, "3171": null, "3172": null, "3173": null, "3174": null, "3175": null, "3176": null, "3177": null, "3178": null, "3179": null, "3180": null, "3181": null, "3182": null, "3183": null, "3184": null, "3185": null, "3186": null, "3187": null, "3188": null, "3189": null, "3190": null, "3191": null, "3192": null, "3193": null, "3194": null, "3195": null, "3196": null, "3197": null, "3198": null, "3199": null, "3200": null, "3201": null, "3202": null, "3203": null, "3204": null, "3205": null, "3206": null, "3207": null, "3208": null, "3209": null, "3210": null, "3211": null, "3212": null, "3213": null, "3214": null, "3215": null, "3216": null, "3217": null, "3218": null, "3219": null, "3220": null, "3221": null, "3222": null, "3223": null, "3224": null, "3225": null, "3226": null, "3227": null, "3228": null, "3229": null, "3230": null, "3231": null, "3232": null, "3233": null, "3234": null, "3235": null, "3236": null, "3237": null, "3238": null, "3239": null, "3240": null, "3241": null, "3242": null, "3243": null, "3244": null, "3245": null, "3246": null, "3247": null, "3248": null, "3249": null, "3250": null, "3251": null, "3252": null, "3253": null, "3254": null, "3255": null, "3256": null, "3257": null, "3258": null, "3259": null, "3260": null, "3261": null, "3262": null, "3263": null, "3264": null, "3265": null, "3266": null, "3267": null, "3268": null, "3269": null, "3270": null, "3271": null, "3272": null, "3273": null, "3274": null, "3275": null, "3276": null, "3277": null, "3278": null, "3279": null, "3280": null, "3281": null, "3282": null, "3283": null, "3284": null, "3285": null, "3286": null, "3287": null, "3288": null, "3289": null, "3290": null, "3291": null, "3292": null, "3293": null, "3294": null, "3295": null, "3296": null, "3297": null, "3298": null, "3299": null, "3300": null, "3301": null, "3302": null, "3303": null, "3304": null, "3305": null, "3306": null, "3307": null, "3308": null, "3309": null, "3310": null, "3311": null, "3312": null, "3313": null, "3314": null, "3315": null, "3316": null, "3317": null, "3318": null, "3319": null, "3320": null, "3321": null, "3322": null, "3323": null, "3324": null, "3325": null, "3326": null, "3327": null, "3328": null, "3329": null, "3330": null, "3331": null, "3332": null, "3333": null, "3334": null, "3335": null, "3336": null, "3337": null, "3338": null, "3339": null, "3340": null, "3341": null, "3342": null, "3343": null, "3344": null, "3345": null, "3346": null, "3347": null, "3348": null, "3349": null, "3350": null, "3351": null, "3352": null, "3353": null, "3354": null, "3355": null, "3356": null, "3357": null, "3358": null, "3359": null, "3360": null, "3361": null, "3362": null, "3363": null, "3364": null, "3365": null, "3366": null, "3367": null, "3368": null, "3369": null, "3370": null, "3371": null, "3372": null, "3373": null, "3374": null, "3375": null, "3376": null, "3377": null, "3378": null, "3379": null, "3380": null, "3381": null, "3382": null, "3383": null, "3384": null, "3385": null, "3386": null, "3387": null, "3388": null, "3389": null, "3390": null, "3391": null, "3392": null, "3393": null, "3394": null, "3395": null, "3396": null, "3397": null, "3398": null, "3399": null, "3400": null, "3401": null, "3402": null, "3403": null, "3404": null, "3405": null, "3406": null, "3407": null, "3408": null, "3409": null, "3410": null, "3411": null, "3412": null, "3413": null, "3414": null, "3415": null, "3416": null, "3417": null, "3418": null, "3419": null, "3420": null, "3421": null, "3422": null, "3423": null, "3424": null, "3425": null, "3426": null, "3427": null, "3428": null, "3429": null, "3430": null, "3431": null, "3432": null, "3433": null, "3434": null, "3435": null, "3436": null, "3437": null, "3438": null, "3439": null, "3440": null, "3441": null, "3442": null, "3443": null, "3444": null, "3445": null, "3446": null, "3447": null, "3448": null, "3449": null, "3450": null, "3451": null, "3452": null, "3453": null, "3454": null, "3455": null, "3456": null, "3457": null, "3458": null, "3459": null, "3460": null, "3461": null, "3462": null, "3463": null, "3464": null, "3465": null, "3466": null, "3467": null, "3468": null, "3469": null, "3470": null, "3471": null, "3472": null, "3473": null, "3474": null, "3475": null, "3476": null, "3477": null, "3478": null, "3479": null, "3480": null, "3481": null, "3482": null, "3483": null, "3484": null, "3485": null, "3486": null, "3487": null, "3488": null, "3489": null, "3490": null, "3491": null, "3492": null, "3493": null, "3494": null, "3495": null, "3496": null, "3497": null, "3498": null, "3499": null, "3500": null, "3501": null, "3502": null, "3503": null, "3504": null, "3505": null, "3506": null, "3507": null, "3508": null, "3509": null, "3510": null, "3511": null, "3512": null, "3513": null, "3514": null, "3515": null, "3516": null, "3517": null, "3518": null, "3519": null, "3520": null, "3521": null, "3522": null, "3523": null, "3524": null, "3525": null, "3526": null, "3527": null, "3528": null, "3529": null, "3530": null, "3531": null, "3532": null, "3533": null, "3534": null, "3535": null, "3536": null, "3537": null, "3538": null, "3539": null, "3540": null, "3541": null, "3542": null, "3543": null, "3544": null, "3545": null, "3546": null, "3547": null, "3548": null, "3549": null, "3550": null, "3551": null, "3552": null, "3553": null, "3554": null, "3555": null, "3556": null, "3557": null, "3558": null, "3559": null, "3560": null, "3561": null, "3562": null, "3563": null, "3564": null, "3565": null, "3566": null, "3567": null, "3568": null, "3569": null, "3570": null, "3571": null, "3572": null, "3573": null, "3574": null, "3575": null, "3576": null, "3577": null, "3578": null, "3579": null, "3580": null, "3581": null, "3582": null, "3583": null, "3584": null, "3585": null, "3586": null, "3587": null, "3588": null, "3589": null, "3590": null, "3591": null, "3592": null, "3593": null, "3594": null, "3595": null, "3596": null, "3597": null, "3598": null, "3599": null, "3600": null, "3601": null, "3602": null, "3603": null, "3604": null, "3605": null, "3606": null, "3607": null, "3608": null, "3609": null, "3610": null, "3611": null, "3612": null, "3613": null, "3614": null, "3615": null, "3616": null, "3617": null, "3618": null, "3619": null, "3620": null, "3621": null, "3622": null, "3623": null, "3624": null, "3625": null, "3626": null, "3627": null, "3628": null, "3629": null, "3630": null, "3631": null, "3632": null, "3633": null, "3634": null, "3635": null, "3636": null, "3637": null, "3638": null, "3639": null, "3640": null, "3641": null, "3642": null, "3643": null, "3644": null, "3645": null, "3646": null, "3647": null, "3648": null, "3649": null, "3650": null, "3651": null, "3652": null, "3653": null, "3654": null, "3655": null, "3656": null, "3657": null, "3658": null, "3659": null, "3660": null, "3661": null, "3662": null, "3663": null, "3664": null, "3665": null, "3666": null, "3667": null, "3668": null, "3669": null, "3670": null, "3671": null, "3672": null, "3673": null, "3674": null, "3675": null, "3676": null, "3677": null, "3678": null, "3679": {"inputs": [" \"gdfgdf234dg54gf*23op42\"\n"], "outputs": [" \"54929268\" (because 23454*2342=54929268)\n```\n"]}, "3680": null, "3681": null, "3682": null, "3683": null, "3684": null, "3685": null, "3686": null, "3687": null, "3688": null, "3689": null, "3690": null, "3691": null, "3692": null, "3693": null, "3694": null, "3695": null, "3696": null, "3697": null, "3698": null, "3699": null, "3700": null, "3701": null, "3702": null, "3703": null, "3704": null, "3705": null, "3706": null, "3707": null, "3708": null, "3709": null, "3710": null, "3711": null, "3712": null, "3713": null, "3714": null, "3715": null, "3716": null, "3717": null, "3718": null, "3719": null, "3720": null, "3721": null, "3722": null, "3723": null, "3724": null, "3725": null, "3726": null, "3727": null, "3728": null, "3729": null, "3730": null, "3731": null, "3732": null, "3733": null, "3734": null, "3735": null, "3736": null, "3737": null, "3738": null, "3739": null, "3740": null, "3741": null, "3742": null, "3743": null, "3744": null, "3745": null, "3746": null, "3747": null, "3748": null, "3749": null, "3750": null, "3751": null, "3752": null, "3753": null, "3754": null, "3755": null, "3756": null, "3757": null, "3758": null, "3759": null, "3760": null, "3761": null, "3762": null, "3763": null, "3764": null, "3765": null, "3766": null, "3767": null, "3768": null, "3769": null, "3770": null, "3771": null, "3772": null, "3773": null, "3774": null, "3775": null, "3776": null, "3777": null, "3778": null, "3779": null, "3780": null, "3781": null, "3782": null, "3783": null, "3784": null, "3785": null, "3786": null, "3787": null, "3788": null, "3789": null, "3790": null, "3791": null, "3792": null, "3793": null, "3794": null, "3795": null, "3796": null, "3797": null, "3798": null, "3799": null, "3800": null, "3801": null, "3802": null, "3803": null, "3804": null, "3805": null, "3806": null, "3807": null, "3808": null, "3809": null, "3810": null, "3811": null, "3812": null, "3813": null, "3814": {"inputs": ["  07:05:45pm\n"], "outputs": ["  19:05:45\n"]}, "3815": null, "3816": null, "3817": null, "3818": null, "3819": null, "3820": null, "3821": null, "3822": null, "3823": null, "3824": null, "3825": null, "3826": null, "3827": null, "3828": null, "3829": null, "3830": null, "3831": null, "3832": null, "3833": null, "3834": null, "3835": null, "3836": null, "3837": null, "3838": null, "3839": null, "3840": null, "3841": null, "3842": null, "3843": null, "3844": null, "3845": null, "3846": null, "3847": null, "3848": null, "3849": null, "3850": null, "3851": null, "3852": null, "3853": null, "3854": null, "3855": null, "3856": null, "3857": null, "3858": null, "3859": null, "3860": null, "3861": null, "3862": null, "3863": null, "3864": null, "3865": null, "3866": null, "3867": null, "3868": null, "3869": null, "3870": null, "3871": null, "3872": null, "3873": null, "3874": null, "3875": null, "3876": null, "3877": null, "3878": null, "3879": null, "3880": null, "3881": null, "3882": {"inputs": [" 23, 2, 3, 4, 5\nProduct of value and index:\n"], "outputs": [" 2, 3, 4, 23, 5\n```\n"]}, "3883": null, "3884": null, "3885": null, "3886": null, "3887": null, "3888": null, "3889": null, "3890": null, "3891": null, "3892": null, "3893": null, "3894": null, "3895": null, "3896": null, "3897": null, "3898": null, "3899": null, "3900": null, "3901": null, "3902": null, "3903": null, "3904": null, "3905": null, "3906": null, "3907": null, "3908": null, "3909": null, "3910": null, "3911": null, "3912": null, "3913": null, "3914": null, "3915": null, "3916": null, "3917": null, "3918": null, "3919": null, "3920": null, "3921": null, "3922": null, "3923": null, "3924": null, "3925": null, "3926": null, "3927": null, "3928": null, "3929": null, "3930": null, "3931": null, "3932": null, "3933": null, "3934": null, "3935": null, "3936": null, "3937": null, "3938": null, "3939": null, "3940": null, "3941": null, "3942": null, "3943": {"inputs": [" ellipse(5,2)\n"], "outputs": [" \"area: 31.4, perimeter: 23.1\"\n```\n"]}, "3944": null, "3945": null, "3946": null, "3947": null, "3948": null, "3949": null, "3950": null, "3951": null, "3952": null, "3953": null, "3954": null, "3955": null, "3956": null, "3957": null, "3958": null, "3959": null, "3960": null, "3961": null, "3962": null, "3963": null, "3964": null, "3965": null, "3966": null, "3967": null, "3968": null, "3969": null, "3970": null, "3971": null, "3972": null, "3973": null, "3974": null, "3975": null, "3976": null, "3977": {"inputs": ["- ```points``` - a list of 2D points ```[(1, 1), (3, 5), (4, 4), (8, 2), (0, 1)]```\n- ```n``` - the desired number of clusters\n"], "outputs": ["- list of clusters, each cluster is a list of points\n- points in each cluster should be sorted in ascending order\n- the list of clusters should also be sorted in ascending order\n"]}, "3978": null, "3979": null, "3980": null, "3981": null, "3982": null, "3983": null, "3984": null, "3985": {"inputs": ["____  \nAn integer array of length `0 < arr < 1000`. The numbers in the array can be any integer positive or negative.\n"], "outputs": ["____  \nThe lowest index `N` where the side to the left of `N` is equal to the side to the right of `N`. If you do not find an index that fits these rules, then you will return `-1`.\n"]}, "3986": null, "3987": null, "3988": null, "3989": null, "3990": null, "3991": null, "3992": null, "3993": null, "3994": null, "3995": null, "3996": null, "3997": null, "3998": null, "3999": null, "4000": null, "4001": null, "4002": null, "4003": null, "4004": null, "4005": null, "4006": null, "4007": null, "4008": null, "4009": null, "4010": null, "4011": null, "4012": null, "4013": null, "4014": null, "4015": null, "4016": null, "4017": null, "4018": null, "4019": null, "4020": null, "4021": null, "4022": null, "4023": null, "4024": null, "4025": null, "4026": null, "4027": null, "4028": null, "4029": null, "4030": null, "4031": null, "4032": null, "4033": null, "4034": null, "4035": null, "4036": null, "4037": null, "4038": null, "4039": null, "4040": null, "4041": null, "4042": null, "4043": null, "4044": null, "4045": null, "4046": null, "4047": null, "4048": null, "4049": null, "4050": null, "4051": null, "4052": null, "4053": null, "4054": null, "4055": null, "4056": null, "4057": null, "4058": null, "4059": null, "4060": null, "4061": null, "4062": null, "4063": null, "4064": null, "4065": null, "4066": null, "4067": null, "4068": null, "4069": null, "4070": null, "4071": null, "4072": null, "4073": null, "4074": null, "4075": null, "4076": null, "4077": null, "4078": null, "4079": null, "4080": null, "4081": null, "4082": null, "4083": null, "4084": null, "4085": null, "4086": null, "4087": null, "4088": null, "4089": null, "4090": null, "4091": null, "4092": null, "4093": null, "4094": null, "4095": null, "4096": null, "4097": null, "4098": null, "4099": null, "4100": null, "4101": null, "4102": null, "4103": null, "4104": null, "4105": null, "4106": null, "4107": null, "4108": null, "4109": null, "4110": null, "4111": null, "4112": null, "4113": null, "4114": null, "4115": null, "4116": null, "4117": null, "4118": null, "4119": null, "4120": null, "4121": null, "4122": null, "4123": null, "4124": null, "4125": null, "4126": null, "4127": null, "4128": null, "4129": null, "4130": null, "4131": null, "4132": null, "4133": null, "4134": null, "4135": null, "4136": null, "4137": null, "4138": null, "4139": null, "4140": null, "4141": null, "4142": null, "4143": null, "4144": null, "4145": null, "4146": null, "4147": null, "4148": null, "4149": null, "4150": null, "4151": null, "4152": null, "4153": null, "4154": null, "4155": null, "4156": null, "4157": null, "4158": null, "4159": null, "4160": null, "4161": null, "4162": null, "4163": null, "4164": null, "4165": null, "4166": null, "4167": null, "4168": null, "4169": null, "4170": null, "4171": null, "4172": null, "4173": null, "4174": null, "4175": null, "4176": null, "4177": null, "4178": null, "4179": null, "4180": null, "4181": null, "4182": null, "4183": null, "4184": null, "4185": null, "4186": null, "4187": null, "4188": null, "4189": null, "4190": null, "4191": null, "4192": null, "4193": null, "4194": null, "4195": null, "4196": null, "4197": null, "4198": null, "4199": null, "4200": null, "4201": null, "4202": null, "4203": null, "4204": null, "4205": null, "4206": null, "4207": null, "4208": null, "4209": null, "4210": null, "4211": {"inputs": ["A string (no spaces) containing `[a-z],[A-Z],[0-9]` and common symbols. The length will be `0 < string < 100`.\n"], "outputs": ["`true` if the word is a valid word, or `false` if the word is not valid."]}, "4212": null, "4213": null, "4214": null, "4215": null, "4216": null, "4217": null, "4218": null, "4219": null, "4220": null, "4221": null, "4222": null, "4223": null, "4224": null, "4225": null, "4226": null, "4227": null, "4228": null, "4229": null, "4230": null, "4231": null, "4232": null, "4233": null, "4234": null, "4235": null, "4236": null, "4237": null, "4238": null, "4239": null, "4240": null, "4241": null, "4242": null, "4243": null, "4244": null, "4245": null, "4246": null, "4247": null, "4248": null, "4249": null, "4250": null, "4251": null, "4252": null, "4253": null, "4254": null, "4255": null, "4256": null, "4257": null, "4258": null, "4259": null, "4260": null, "4261": null, "4262": null, "4263": null, "4264": null, "4265": null, "4266": null, "4267": null, "4268": null, "4269": null, "4270": null, "4271": null, "4272": null, "4273": null, "4274": null, "4275": null, "4276": null, "4277": null, "4278": null, "4279": null, "4280": null, "4281": null, "4282": null, "4283": null, "4284": null, "4285": null, "4286": null, "4287": null, "4288": null, "4289": null, "4290": null, "4291": null, "4292": null, "4293": null, "4294": null, "4295": null, "4296": null, "4297": null, "4298": null, "4299": null, "4300": null, "4301": null, "4302": null, "4303": null, "4304": null, "4305": null, "4306": null, "4307": null, "4308": null, "4309": null, "4310": null, "4311": null, "4312": null, "4313": null, "4314": null, "4315": null, "4316": null, "4317": null, "4318": null, "4319": null, "4320": null, "4321": null, "4322": null, "4323": null, "4324": null, "4325": null, "4326": null, "4327": null, "4328": null, "4329": null, "4330": null, "4331": null, "4332": null, "4333": null, "4334": null, "4335": null, "4336": null, "4337": null, "4338": null, "4339": null, "4340": null, "4341": null, "4342": null, "4343": null, "4344": null, "4345": null, "4346": null, "4347": null, "4348": null, "4349": null, "4350": null, "4351": null, "4352": null, "4353": null, "4354": null, "4355": null, "4356": null, "4357": null, "4358": null, "4359": null, "4360": null, "4361": null, "4362": null, "4363": null, "4364": null, "4365": null, "4366": null, "4367": null, "4368": null, "4369": null, "4370": null, "4371": null, "4372": null, "4373": null, "4374": null, "4375": null, "4376": null, "4377": null, "4378": null, "4379": null, "4380": null, "4381": null, "4382": null, "4383": null, "4384": null, "4385": null, "4386": null, "4387": null, "4388": null, "4389": null, "4390": null, "4391": null, "4392": null, "4393": null, "4394": null, "4395": null, "4396": null, "4397": null, "4398": null, "4399": null, "4400": null, "4401": null, "4402": null, "4403": null, "4404": null, "4405": null, "4406": null, "4407": null, "4408": null, "4409": null, "4410": null, "4411": null, "4412": null, "4413": null, "4414": null, "4415": null, "4416": null, "4417": null, "4418": null, "4419": null, "4420": null, "4421": null, "4422": null, "4423": null, "4424": null, "4425": null, "4426": null, "4427": null, "4428": null, "4429": null, "4430": null, "4431": null, "4432": null, "4433": {"inputs": [" true, true, false, operator: and\n", " true, true, false, operator: or\n", " true, true, false, operator: xor\n"], "outputs": [" false\n", " true\n", " false\n___\n"]}, "4434": null, "4435": null, "4436": null, "4437": null, "4438": null, "4439": null, "4440": null, "4441": null, "4442": null, "4443": null, "4444": null, "4445": null, "4446": null, "4447": null, "4448": null, "4449": null, "4450": null, "4451": null, "4452": null, "4453": null, "4454": null, "4455": null, "4456": null, "4457": null, "4458": null, "4459": null, "4460": null, "4461": null, "4462": null, "4463": null, "4464": null, "4465": null, "4466": null, "4467": null, "4468": null, "4469": null, "4470": null, "4471": null, "4472": null, "4473": null, "4474": null, "4475": null, "4476": null, "4477": null, "4478": null, "4479": null, "4480": null, "4481": null, "4482": null, "4483": null, "4484": null, "4485": null, "4486": null, "4487": null, "4488": null, "4489": null, "4490": null, "4491": null, "4492": null, "4493": null, "4494": null, "4495": null, "4496": null, "4497": null, "4498": null, "4499": null, "4500": null, "4501": null, "4502": null, "4503": null, "4504": null, "4505": null, "4506": null, "4507": null, "4508": null, "4509": null, "4510": null, "4511": null, "4512": null, "4513": null, "4514": null, "4515": null, "4516": null, "4517": null, "4518": null, "4519": null, "4520": null, "4521": null, "4522": null, "4523": null, "4524": null, "4525": null, "4526": null, "4527": null, "4528": null, "4529": null, "4530": null, "4531": null, "4532": null, "4533": null, "4534": null, "4535": {"inputs": [" string str \n"], "outputs": [" z array\n"]}, "4536": null, "4537": null, "4538": null, "4539": null, "4540": null, "4541": null, "4542": null, "4543": null, "4544": null, "4545": null, "4546": null, "4547": null, "4548": null, "4549": null, "4550": null, "4551": null, "4552": null, "4553": null, "4554": null, "4555": null, "4556": null, "4557": null, "4558": null, "4559": null, "4560": null, "4561": null, "4562": null, "4563": null, "4564": null, "4565": null, "4566": null, "4567": null, "4568": null, "4569": null, "4570": null, "4571": null, "4572": null, "4573": null, "4574": null, "4575": null, "4576": null, "4577": null, "4578": null, "4579": null, "4580": null, "4581": null, "4582": null, "4583": null, "4584": null, "4585": null, "4586": null, "4587": null, "4588": null, "4589": null, "4590": null, "4591": null, "4592": null, "4593": null, "4594": null, "4595": null, "4596": null, "4597": null, "4598": null, "4599": null, "4600": null, "4601": null, "4602": null, "4603": null, "4604": null, "4605": null, "4606": null, "4607": null, "4608": null, "4609": null, "4610": null, "4611": null, "4612": null, "4613": null, "4614": null, "4615": null, "4616": null, "4617": null, "4618": null, "4619": null, "4620": null, "4621": null, "4622": null, "4623": null, "4624": null, "4625": null, "4626": null, "4627": null, "4628": null, "4629": null, "4630": null, "4631": null, "4632": null, "4633": null, "4634": null, "4635": null, "4636": null, "4637": null, "4638": null, "4639": null, "4640": null, "4641": null, "4642": null, "4643": null, "4644": null, "4645": null, "4646": null, "4647": null, "4648": null, "4649": null, "4650": null, "4651": null, "4652": null, "4653": null, "4654": null, "4655": null, "4656": null, "4657": null, "4658": null, "4659": null, "4660": null, "4661": null, "4662": null, "4663": null, "4664": null, "4665": null, "4666": null, "4667": null, "4668": null, "4669": null, "4670": null, "4671": null, "4672": null, "4673": null, "4674": null, "4675": null, "4676": null, "4677": null, "4678": null, "4679": null, "4680": null, "4681": null, "4682": null, "4683": null, "4684": null, "4685": null, "4686": null, "4687": null, "4688": null, "4689": null, "4690": null, "4691": null, "4692": {"inputs": ["# \n"], "outputs": ["# \n"]}, "4693": null, "4694": null, "4695": null, "4696": null, "4697": null, "4698": null, "4699": null, "4700": null, "4701": null, "4702": null, "4703": null, "4704": null, "4705": null, "4706": null, "4707": null, "4708": null, "4709": null, "4710": null, "4711": null, "4712": null, "4713": null, "4714": null, "4715": null, "4716": null, "4717": null, "4718": null, "4719": null, "4720": null, "4721": null, "4722": null, "4723": null, "4724": null, "4725": null, "4726": null, "4727": null, "4728": null, "4729": null, "4730": null, "4731": null, "4732": null, "4733": null, "4734": null, "4735": null, "4736": null, "4737": null, "4738": null, "4739": null, "4740": null, "4741": null, "4742": null, "4743": null, "4744": null, "4745": null, "4746": null, "4747": null, "4748": null, "4749": null, "4750": null, "4751": null, "4752": null, "4753": null, "4754": null, "4755": {"inputs": [" 5\n", " 7\n", " 10\n"], "outputs": [" 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\n", " 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\n", " 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n"]}, "4756": null, "4757": {"inputs": ["5\n3 6 2 1\n2 2 2 1\n2 2 2 2\n4 4 2 2\n2 1 1 2\n"], "outputs": ["YES\n010001\n100100\n001010\nNO\nYES\n11\n11\nYES\n1100\n1100\n0011\n0011\nYES\n1\n1"]}, "4758": null, "4759": null, "4760": null, "4761": null, "4762": null, "4763": null, "4764": null, "4765": null, "4766": null, "4767": null, "4768": null, "4769": null, "4770": null, "4771": null, "4772": null, "4773": null, "4774": null, "4775": null, "4776": null, "4777": null, "4778": null, "4779": null, "4780": null, "4781": null, "4782": null, "4783": null, "4784": null, "4785": null, "4786": null, "4787": null, "4788": null, "4789": null, "4790": null, "4791": null, "4792": null, "4793": null, "4794": null, "4795": null, "4796": null, "4797": null, "4798": null, "4799": null, "4800": null, "4801": null, "4802": null, "4803": null, "4804": null, "4805": null, "4806": null, "4807": null, "4808": null, "4809": null, "4810": null, "4811": null, "4812": null, "4813": null, "4814": null, "4815": null, "4816": null, "4817": null, "4818": null, "4819": null, "4820": null, "4821": null, "4822": null, "4823": null, "4824": null, "4825": null, "4826": null, "4827": null, "4828": null, "4829": null, "4830": null, "4831": null, "4832": null, "4833": null, "4834": null, "4835": null, "4836": null, "4837": null, "4838": null, "4839": null, "4840": null, "4841": null, "4842": null, "4843": null, "4844": null, "4845": null, "4846": null, "4847": null, "4848": null, "4849": null, "4850": null, "4851": null, "4852": null, "4853": null, "4854": null, "4855": null, "4856": null, "4857": null, "4858": null, "4859": null, "4860": null, "4861": null, "4862": null, "4863": null, "4864": null, "4865": null, "4866": null, "4867": null, "4868": null, "4869": null, "4870": null, "4871": null, "4872": null, "4873": null, "4874": null, "4875": null, "4876": null, "4877": null, "4878": null, "4879": null, "4880": null, "4881": null, "4882": null, "4883": null, "4884": null, "4885": null, "4886": null, "4887": null, "4888": null, "4889": null, "4890": null, "4891": null, "4892": null, "4893": null, "4894": null, "4895": null, "4896": null, "4897": null, "4898": null, "4899": null, "4900": null, "4901": null, "4902": null, "4903": null, "4904": null, "4905": null, "4906": null, "4907": null, "4908": null, "4909": null, "4910": null, "4911": null, "4912": null, "4913": null, "4914": null, "4915": null, "4916": null, "4917": null, "4918": null, "4919": null, "4920": null, "4921": null, "4922": null, "4923": null, "4924": null, "4925": null, "4926": null, "4927": null, "4928": null, "4929": null, "4930": null, "4931": null, "4932": null, "4933": null, "4934": null, "4935": null, "4936": null, "4937": null, "4938": null, "4939": null, "4940": null, "4941": null, "4942": null, "4943": null, "4944": null, "4945": null, "4946": null, "4947": null, "4948": null, "4949": null, "4950": null, "4951": null, "4952": null, "4953": null, "4954": null, "4955": null, "4956": null, "4957": null, "4958": null, "4959": null, "4960": null, "4961": null, "4962": null, "4963": null, "4964": null, "4965": null, "4966": null, "4967": null, "4968": null, "4969": null, "4970": null, "4971": null, "4972": null, "4973": null, "4974": null, "4975": null, "4976": null, "4977": null, "4978": null, "4979": null, "4980": null, "4981": null, "4982": null, "4983": null, "4984": null, "4985": null, "4986": null, "4987": null, "4988": null, "4989": null, "4990": null, "4991": null, "4992": null, "4993": null, "4994": null, "4995": null, "4996": null, "4997": null, "4998": null, "4999": null}